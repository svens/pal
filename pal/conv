#pragma once // -*- C++ -*-

/**
 * \file pal/conv
 * Encoding/decoding functions (base64, hex)
 */

#include <pal/__bits/lib>
#include <pal/buffer>
#include <system_error>


__pal_begin


/**
 * Encoding/decoding conversion output size estimation result.
 */
struct conv_size_result
{
	/// Estimated maximum size for conversion output.
	size_t estimated_max_size;

	/// Error during size estimation or empty value if no error.
	std::errc ec;
};


/**
 * Encoding/decoding conversion result.
 */
struct conv_result
{
	/// Last read position.
	const char *last_in;

	/// Last write position.
	char *last_out;
};


/**
 * Return required output range size when doing base64 encoding of input range
 * [\a first, \a last).
 *
 * \note Returned \a ec has always default value.
 */
constexpr conv_size_result to_base64_size (const char *first, const char *last) noexcept
{
	size_t input_size = last - first;
	return
	{
		((input_size * 4 / 3) + 3) & ~3,
		{}
	};
}


/**
 * Return required output range size when doing base64 decoding of input range
 * [\a first, \a last).
 *
 * If input range size is not valid for base64-encoded blob, ec is set to \a
 * std::errc::invalid_argument and \a estimated_max_size has undefined value.
 */
constexpr conv_size_result from_base64_size (const char *first, const char *last) noexcept
{
	size_t input_size = last - first;
	return
	{
		input_size / 4 * 3,
		input_size % 4 == 0 ? std::errc{} : std::errc::invalid_argument
	};
}


/**
 * Encode range [\a first, \a last), writing result into \a out. During
 * conversion, there is no output range checking. It is application
 * responsibility to ensure sufficient output space using function
 * \c to_base64_size()
 *
 * On success, returns conv_result with \e last_in as last read position
 * (equals \a last), and \e last_out as last write position.
 */
conv_result to_base64 (const char *first, const char *last, char *out) noexcept;


/**
 * Decode base64-encoded blob in [\a first, \a last), writing result into \a out.
 * During conversion, there is no output range checking. It is application
 * responsibility to ensure there is sufficient output space using function
 * \c from_base64_size().
 *
 * On success, returns conv_result with \e last_in as last read position
 * (equals \a last), and \e last_out as last write position.
 *
 * On failure, \a last_in does not equal to \a last but points to erroneous
 * base64 value. \a last_out points to one past last successfully decoded
 * character position.
 */
conv_result from_base64 (const char *first, const char *last, char *out) noexcept;


__pal_end
