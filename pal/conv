#pragma once // -*- C++ -*-

/**
 * \file pal/conv
 * Encoding/decoding functions (base64, hex)
 */

#include <pal/__bits/lib>
#include <span>


__pal_begin


namespace __bits {

char *to_base64 (const uint8_t *first, const uint8_t *last, char *out) noexcept;
char *from_base64 (const uint8_t *first, const uint8_t *last, char *out) noexcept;
char *to_hex (const uint8_t *first, const uint8_t *last, char *out) noexcept;
char *from_hex (const uint8_t *first, const uint8_t *last, char *out) noexcept;

} // namespace __bits


// Base64 {{{1


/**
 * Return maximum output size when encoding \a input as Base64.
 */
template <typename Data>
constexpr size_t to_base64_size (const Data &input) noexcept
{
	auto as_span = std::span{input};
	return ((as_span.size_bytes() * 4 / 3) + 3) & ~3;
}


/**
 * Return maximum output size when decoding Base64 \a input or 0 if \a input
 * size is not valid encoded size.
 */
template <typename Data>
constexpr size_t from_base64_size (const Data &input) noexcept
{
	auto as_span = std::span{input};
	return as_span.size_bytes() % 4 == 0 ? (as_span.size_bytes() / 4 * 3) : 0;
}


/**
 * Encode \a input as Base64, writing result into \a out. During conversion
 * there is no output range checking. It is application responsibility to
 * ensure sufficient output space using function to_base64_size()
 *
 * \returns pointer to past last stored character.
 */
template <typename Data>
inline char *to_base64 (const Data &input, char *out) noexcept
{
	auto as_span = std::span{input};
	auto p = reinterpret_cast<const uint8_t *>(as_span.data());
	return __bits::to_base64(p, p + as_span.size_bytes(), out);
}


/**
 * Decode Base64 \a input, writing result into \a out. During conversion,
 * there is no output range checking. It is application responsibility to
 * ensure sufficient output space using function from_base64_size()
 *
 * \returns pointer to past last stored character or nullptr in case of
 * decoding error.
 */
template <typename Data>
inline char *from_base64 (const Data &input, char *out) noexcept
{
	auto as_span = std::span{input};
	auto p = reinterpret_cast<const uint8_t *>(as_span.data());
	return __bits::from_base64(p, p + as_span.size_bytes(), out);
}


// Hex {{{1


/**
 * Return maximum output size when encoding \a input as hex-string.
 */
template <typename Data>
constexpr size_t to_hex_size (const Data &input) noexcept
{
	auto as_span = std::span{input};
	return as_span.size_bytes() * 2;
}


/**
 * Return maximum output size when decoding hex-string \a input or 0 if \a
 * input size is not valid encoded size.
 */
template <typename Data>
constexpr size_t from_hex_size (const Data &input) noexcept
{
	auto as_span = std::span{input};
	return as_span.size_bytes() % 2 == 0 ? as_span.size_bytes() / 2 : 0;
}


/**
 * Encode \a input as hex-string, writing result into \a out. During
 * conversion there is no output range checking. It is application
 * responsibility to ensure sufficient output space using function
 * to_hex_size()
 *
 * \returns pointer to past last stored character.
 */
template <typename Data>
inline char *to_hex (const Data &input, char *out) noexcept
{
	auto as_span = std::span{input};
	auto p = reinterpret_cast<const uint8_t *>(as_span.data());
	return __bits::to_hex(p, p + as_span.size_bytes(), out);
}


/**
 * Decode hex-string \a input, writing result into \a out. During conversion,
 * there is no output range checking. It is application responsibility to
 * ensure sufficient output space using function from_base64_size()
 *
 * \returns pointer to past last stored character or nullptr in case of
 * decoding error.
 */
template <typename Data>
inline char *from_hex (const Data &input, char *out) noexcept
{
	auto as_span = std::span{input};
	auto p = reinterpret_cast<const uint8_t *>(as_span.data());
	return __bits::from_hex(p, p + as_span.size_bytes(), out);
}


// }}}1


__pal_end
