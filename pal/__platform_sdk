#pragma once // -*- C++ -*-

#if __pal_os_macos || defined(__APPLE__) //{{{1
	#include <memory>
	#include <type_traits>
	#include <CoreFoundation/CFBase.h>

	namespace pal {

	template <typename T>
	using unique_ref = std::unique_ptr<std::remove_pointer_t<T>, decltype(&::CFRelease)>;

	template <typename T>
	unique_ref<T> make_unique (T ref) noexcept
	{
		return {ref, &::CFRelease};
	}

	} // namespace pal
#endif

#if __pal_os_windows //{{{1
	// included from header: assume nothing, leak nothing
	#if !defined(WIN32_LEAN_AND_MEAN)
		#define __pal_WIN32_LEAN_AND_MEAN
		#define WIN32_LEAN_AND_MEAN
	#endif
	#if !defined(NOMINMAX)
		#define __pal_NOMINMAX
		#define NOMINMAX
	#endif
	#include <windows.h>
	#if defined(__pal_WIN32_LEAN_AND_MEAN)
		#undef __pal_WIN32_LEAN_AND_MEAN
		#undef WIN32_LEAN_AND_MEAN
	#endif
	#if defined(__pal_NOMINMAX)
		#undef __pal_NOMINMAX
		#undef NOMINMAX
	#endif
#else
	// include from .cpp, must be first
	#if defined(_WIN32) || defined(_WIN64)
		#define WIN32_LEAN_AND_MEAN
		#define WIN32_NO_STATUS
		#define NOMINMAX
		#include <windows.h>
		#undef WIN32_NO_STATUS
		#include <winternl.h>
		#include <ntstatus.h>
	#endif
#endif

//}}}1
