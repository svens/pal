#pragma once // -*- C++ -*-

// do not use <pal/version> here, use only preprocessor provided symbols
// to minimise chance for weird header inclusion order interactions

#if defined(__APPLE__) //{{{1

	// TODO: Apple header inject availability() to position that GNU g++ considers invalid
	// remove this workaround once fixed
	#if !__clang__ && defined(__has_attribute)
		#if __has_attribute(availability)
			#define availability(...)
		#endif
	#endif

	#include <memory>
	#include <type_traits>
	#include <CoreFoundation/CFBase.h>

	namespace pal {

	template <typename T>
	using unique_ref = std::unique_ptr<std::remove_pointer_t<T>, decltype(&::CFRelease)>;

	template <typename T>
	unique_ref<T> make_unique (T ref) noexcept
	{
		return {ref, &::CFRelease};
	}

	} // namespace pal

#elif defined(_WIN32) || defined(_WIN64) //{{{1

	#define WIN32_LEAN_AND_MEAN
	#define WIN32_NO_STATUS
	#define NOMINMAX
	#include <windows.h>
	#undef WIN32_NO_STATUS
	#include <winternl.h>
	#include <ntstatus.h>

#endif //}}}1
