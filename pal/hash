#pragma once // -*- C++ -*-

/**
 * \file pal/hash
 * Various non-cryptographic hash functions
 */

#include <pal/__bits/lib>
#include <span>


__pal_begin


/// FNV-1a initial basis
constexpr uint64_t fnv_1a_64_init = 0xcbf29ce484222325ULL;


/**
 * Fowler-Noll-Vo hashing function for 64bit result.
 *
 * This implementation is modified copy from it's homepage at
 * http://www.isthe.com/chongo/tech/comp/fnv/.
 *
 * See ThirdPartySources.txt for copyright notices.
 */
constexpr uint64_t fnv_1a_64 (const std::byte *first, const std::byte *last,
	uint64_t h = fnv_1a_64_init) noexcept
{
	while (first != last)
	{
		h ^= std::to_integer<uint64_t>(*first++);
		h += (h << 1) + (h << 4) + (h << 5) + (h << 7) + (h << 8) + (h << 40);
	}
	return h;
}


/// \copydoc fnv_1a_64
constexpr uint64_t fnv_1a_64 (std::span<const std::byte> span,
	uint64_t h = fnv_1a_64_init) noexcept
{
	return fnv_1a_64(span.data(), span.data() + span.size_bytes(), h);
}


/**
 * Hash two 64bit values into single 64bit value. This implementation is
 * copied from Google's CityHash.
 *
 * See ThirdPartySources.txt for copyright notices.
 */
constexpr uint64_t hash_128_to_64 (uint64_t h, uint64_t l) noexcept
{
	constexpr uint64_t mul = 0x9ddfea08eb382d69ULL;
	uint64_t a = (l ^ h) * mul;
	a ^= (a >> 47);
	uint64_t b = (h ^ a) * mul;
	b ^= (b >> 47);
	return b * mul;
}


__pal_end
