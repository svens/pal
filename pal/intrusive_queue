#pragma once // -*- C++ -*-

/**
 * \file pal/intrusive_queue
 * Intrusive queue (FIFO)
 */

#include <pal/__bits/lib>
#include <pal/not_null>


__pal_begin


/**
 * Intrusive queue hook.
 * \see intrusive_queue
 */
template <typename T>
using intrusive_queue_hook = T *;


#if !defined(__DOXYGEN__)
	template <auto Next>
	class intrusive_queue;
#endif


/**
 * Intrusive queue (FIFO).
 *
 * Elements of this container must provide member address \a Next that stores
 * opaque data managed by container. Any given time specific hook can be used
 * only to store element in single container. Same hook can be used to store
 * element in different containers at different times. If application needs to
 * store element in multiple containers same time, it needs to provide
 * multiple hooks, one per owner.
 *
 * Being intrusive, container itself does not deal with node allocation. It is
 * application's responsibility to handle node management and make sure that
 * while in container, element is kept alive and it's hook is not interfered
 * with. Also, pushing and popping elements into/from container does not copy
 * them, just hooks/unhooks using specified member \a Next.
 *
 * Usage:
 * \code
 * class foo
 * {
 *   pal::intrusive_queue_hook<foo> next;
 *   int a;
 *   char b;
 * };
 * pal::intrusive_queue<&foo::next> q;
 *
 * foo f;
 * q.push(&f);
 *
 * auto fp = q.try_pop(); // fp == &f
 * \endcode
 *
 * \note This container is not thread safe.
 */
template <typename T, typename Hook, Hook T::*Next>
class intrusive_queue<Next>
{
public:

	/**
	 * Element type of container.
	 */
	using value_type = T;


	intrusive_queue () noexcept = default;
	~intrusive_queue () noexcept = default;

	intrusive_queue (const intrusive_queue &) = delete;
	intrusive_queue &operator= (const intrusive_queue &) = delete;


	/**
	 * Construct new intrusive_queue by moving all elements from \a that
	 * to \a this.
	 */
	intrusive_queue (intrusive_queue &&that) noexcept
	{
		if (!that.empty())
		{
			head_->*Next = std::exchange(that.head_->*Next, nullptr);
			tail_ = std::exchange(that.tail_, that.head_);
		}
	}


	/**
	 * Move all elements from \a that to \a this. All existing elements
	 * are dropped.
	 */
	intrusive_queue &operator= (intrusive_queue &&that) noexcept
	{
		if (!that.empty())
		{
			head_->*Next = std::exchange(that.head_->*Next, nullptr);
			tail_ = std::exchange(that.tail_, that.head_);
		}
		else if (!empty())
		{
			tail_ = head_;
		}
		return *this;
	}


	/**
	 * Move all elements from \a that to end of \a this.
	 */
	void splice (intrusive_queue &&that) noexcept
	{
		if (!that.empty())
		{
			tail_->*Next = std::exchange(that.head_->*Next, nullptr);
			tail_ = std::exchange(that.tail_, that.head_);
		}
	}


	/**
	 * Push new \a node to back of queue.
	 */
	void push (not_null<value_type *> node) noexcept
	{
		node->*Next = nullptr;
		tail_ = tail_->*Next = node;
	}


	/**
	 * Pop next node from head of queue. If empty, return nullptr.
	 */
	value_type *try_pop () noexcept
	{
		if (auto node = head_->*Next)
		{
			head_->*Next = node->*Next;
			if (head_->*Next == nullptr)
			{
				tail_ = head_;
			}
			return node;
		}
		return nullptr;
	}


	/**
	 * Return head of queue without removing it. If empty, return nullptr.
	 */
	value_type *head () const noexcept
	{
		return head_->*Next;
	}


	/**
	 * Return true if queue has no elements.
	 */
	bool empty () const noexcept
	{
		return tail_ == reinterpret_cast<const value_type *>(&sentry_);
	}


	/**
	 * Execute UnaryFunction \a f for each element in queue.
	 */
	template <typename UnaryFunction>
	constexpr UnaryFunction for_each (UnaryFunction f) const
	{
		for (auto node = head_->*Next;  node;  node = node->*Next)
		{
			f(*node);
		}
		return f;
	}


private:

	char sentry_[sizeof(value_type)];
	value_type * const head_ = reinterpret_cast<value_type *>(&sentry_);
	value_type *tail_ = head_;
};


__pal_end
