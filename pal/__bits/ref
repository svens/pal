#pragma once // -*- C++ -*-

#include <pal/__bits/lib>
#include <utility>

#if __pal_os_macos
	#include <CoreFoundation/CFBase.h>
#endif


__pal_begin


#if __pal_os_macos //{{{1


template <typename T>
using native_ref = ::CFTypeRef;


template <typename T>
inline native_ref<T> inc_ref (native_ref<T> ref) noexcept
{
	return ::CFRetain(ref);
}


template <typename T>
inline void dec_ref (native_ref<T> ref) noexcept
{
	::CFRelease(ref);
}


#elif __pal_os_linux || __pal_os_windows //{{{1


template <typename T>
using native_ref = T;


template <typename T>
inline native_ref<T> inc_ref (native_ref<T> ref) noexcept
{
	return ref;
}


template <typename T>
inline void dec_ref (native_ref<T>) noexcept
{ }


#endif //}}}1


template <typename T,
	native_ref<T>(*IncRef)(native_ref<T>) = inc_ref<T>,
	void(*DecRef)(native_ref<T>) = dec_ref<T>
>
struct shared_ref
{
	static constexpr T null{};
	T ref = null;

	shared_ref () = default;

	shared_ref (T ref) noexcept
		: ref{ref}
	{ }

	shared_ref (const shared_ref &that) noexcept
		: ref{that.ref}
	{
		if (ref)
		{
			IncRef(ref);
		}
	}

	shared_ref &operator= (const shared_ref &that) noexcept
	{
		auto tmp{that};
		swap(tmp);
		return *this;
	}

	shared_ref (shared_ref &&that) noexcept
		: ref{std::exchange(that.ref, null)}
	{ }

	shared_ref &operator= (shared_ref &&that) noexcept
	{
		auto tmp{std::move(that)};
		swap(tmp);
		return *this;
	}

	~shared_ref () noexcept
	{
		if (ref)
		{
			DecRef(ref);
		}
	}

	void reset (T that = null) noexcept
	{
		auto tmp{std::move(*this)};
		ref = that;
	}

	T release () noexcept
	{
		return std::exchange(ref, null);
	}

	void swap (shared_ref &that) noexcept
	{
		using std::swap;
		swap(ref, that.ref);
	}

	bool is_null () const noexcept
	{
		return ref == null;
	}

	explicit operator bool () const noexcept
	{
		return !is_null();
	}
};


template <typename T,
	void(*DecRef)(native_ref<T>) = dec_ref<T>
>
struct unique_ref
{
	static constexpr T null{};
	T ref = null;

	unique_ref () = default;

	unique_ref (T ref) noexcept
		: ref(ref)
	{ }

	unique_ref (const unique_ref &that) noexcept = delete;
	unique_ref &operator= (const unique_ref &that) noexcept = delete;

	unique_ref (unique_ref &&that) noexcept
		: ref{std::exchange(that.ref, null)}
	{ }

	unique_ref &operator= (unique_ref &&that) noexcept
	{
		auto tmp{std::move(that)};
		swap(tmp);
		return *this;
	}

	~unique_ref () noexcept
	{
		if (ref)
		{
			DecRef(ref);
		}
	}

	void reset (T that = null) noexcept
	{
		auto tmp{std::move(*this)};
		ref = that;
	}

	T release () noexcept
	{
		return std::exchange(ref, null);
	}

	void swap (unique_ref &that) noexcept
	{
		using std::swap;
		swap(ref, that.ref);
	}

	bool is_null () const noexcept
	{
		return ref == null;
	}

	explicit operator bool () const noexcept
	{
		return !is_null();
	}
};


__pal_end
