#pragma once // -*- C++ -*-

/**
 * \file pal/expect
 * PAL implementation of assert macro
 */

#include <pal/__bits/lib>
#include <memory>
#include <stdexcept>
#include <type_traits>


__pal_begin


/**
 * True if pal_expect() macro is no-op.
 */
constexpr bool expect_noexcept = is_release_build;


/**
 * Require \a Expr to evaluate to true. On success, returns result of \a Expr.
 * Otherwise, throw \c std::logic_error. If \a OptionalMessage is specified,
 * it is passed to std::logic_error constructor as parameter. If no
 * \a OptionalMessage, textual representation of \a Expr with source code
 * location information is used.
 *
 * \note It is similar to standard \c assert() macro, except \a Expr is always
 * evaluated and result is returned.
 */
#define pal_expect(Expr, OptionalMessage) /* internal */


#if !defined(__DOXYGEN__) //{{{

namespace __bits {

template <typename T>
constexpr decltype(auto) expect_impl (T &&expr, const char message[], ...)
	noexcept(expect_noexcept)
{
	if constexpr (!expect_noexcept)
	{
		if (!expr)
		{
			throw std::logic_error(message);
		}
	}
	else
	{
		(void)message;
	}
	return std::forward<T>(expr);
}

constexpr auto expect_impl (std::nullptr_t, const char message[], ...)
	noexcept(noexcept(expect_impl(false, "")))
{
	return expect_impl<void*>(nullptr, message);
}

template <typename T, typename = void>
constexpr bool is_like_pointer_v = false;

template <typename T>
constexpr bool is_like_pointer_v<T,
	std::void_t
	<
		decltype(&T::operator->),
		decltype(&T::operator*)
	>
> = true;

template <typename T>
constexpr bool is_pointer_v = std::is_pointer<T>::value || is_like_pointer_v<T>;

#define __pal_str_impl(S) #S
#define __pal_str(S) __pal_str_impl(S)
#define __pal_at __FILE__ ":" __pal_str(__LINE__)

#undef pal_expect
#define pal_expect(...) \
	__pal_expect(__VA_ARGS__, __pal_expect_msg(__VA_ARGS__, _), _)

#define __pal_expect(Expr, Message, ...) \
	pal::__bits::expect_impl(Expr, Message)

#define __pal_expect_msg(Expr, ...) \
	(pal::__bits::is_pointer_v<decltype(Expr)> \
		? __pal_at ": Unexpected '" #Expr " == nullptr'" \
		: __pal_at ": Unexpected '" #Expr "'")

} // namespace __bits

#endif // __DOXYGEN__ }}}


__pal_end
