#pragma once // -*- C++ -*-

/**
 * \file pal/assert
 * PAL-specific implementation of assert macro
 */

#include <pal/version>
#include <stdexcept>
#include <type_traits>

namespace pal {

/// False if pal_assert() macro is no-op
constexpr bool assert_can_throw = (build == build_type::debug);

/// Require \a Expr to evaluate to true. On success, returns result of \a Expr.
/// Otherwise, throws \c std::logic_error. If \a OptionalMessage is specified,
/// it is passed to std::logic_error constructor as parameter. If no \a
/// OptionalMessage, textual representation with source code location
/// information is used.
///
/// \note It is similar to standard \c assert() macro, except \a Expr is
/// always evaluated and result is returned.
#define pal_assert(Expr, OptionalMessage) /* internal */

#if !defined(__DOXYGEN__) //{{{

namespace __assert {

template <typename T>
constexpr decltype(auto) test (T &&expr, const char message[], ...)
	noexcept(!assert_can_throw)
{
	if constexpr (assert_can_throw)
	{
		if (!expr)
		{
			throw std::logic_error(message);
		}
	}
	else
	{
		(void)message;
	}
	return std::forward<T>(expr);
}

constexpr auto test (std::nullptr_t, const char message[], ...)
	noexcept(noexcept(test(false, "")))
{
	return test<void *>(nullptr, message);
}

template <typename T, typename = void>
constexpr bool is_like_pointer_v = false;

template <typename T>
constexpr bool is_like_pointer_v<T,
	std::void_t
	<
		decltype(&T::operator->),
		decltype(&T::operator*)
	>
> = true;

template <typename T>
constexpr bool is_pointer_v = std::is_pointer_v<T> || is_like_pointer_v<T>;

#define __pal_str_impl(S) #S
#define __pal_str(S) __pal_str_impl(S)
#define __pal_at __FILE__ ":" __pal_str(__LINE__)

#undef pal_assert
#define pal_assert(...) \
	__pal_assert(__VA_ARGS__, __pal_assert_msg(__VA_ARGS__, _), _)

#define __pal_assert(Expr, Message, ...) \
	pal::__assert::test(Expr, Message)

#define __pal_assert_msg(Expr, ...) \
	(pal::__assert::is_pointer_v<decltype(Expr)> \
		? __pal_at ": Unexpected '" #Expr " == nullptr'" \
		: __pal_at ": Unexpected '" #Expr "'")

} // namespace __assert

#endif // __DOXYGEN__ }}}

} // namespace pal
