#pragma once // -*- C++ -*-

/**
 * \file pal/assert
 * PAL implementation of assert macro
 */

#include <pal/__bits/lib>
#include <stdexcept>


__pal_begin


/**
 * True if pal_assert() macro is no-op.
 */
inline constexpr bool assert_noexcept = is_release_build;


/**
 * \def pal_assert(Condition)
 *
 * Require \a Condition to be true. On false, throw \c std::logic_error. It is
 * similar to standard \c assert() macro, except \a Condition is always
 * evaluated.
 */
#define pal_assert(Condition) /* internal */


#if !defined(__DOXYGEN__) //{{{

namespace __bits {

inline void assert_impl (bool condition, const char message[])
	noexcept(assert_noexcept)
{
	if constexpr (!assert_noexcept)
	{
		if (!condition)
		{
			throw std::logic_error(message);
		}
	}
}

} // namespace __bits

#define __pal_str_impl(S) #S
#define __pal_str(S) __pal_str_impl(S)
#define __pal_at __FILE__ ":" __pal_str(__LINE__)

#undef pal_assert
#define pal_assert(Condition) \
	pal::__bits::assert_impl((Condition), \
		__pal_at ": Assertion '" #Condition "' failed" \
	)

#endif // __DOXYGEN__ }}}


__pal_end
