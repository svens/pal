#pragma once // -*- C++ -*-

/**
 * \file pal/not_null
 * Non-nullable fancy pointer
 */

#include <pal/__bits/lib>
#include <pal/expect>
#include <type_traits>


__pal_begin


template <typename Pointer>
class not_null;


/// True if type \a Pointer is not_null type
template <typename T>
constexpr bool is_not_null_v = false;

/// True if type \a Pointer is not_null type
template <typename Pointer>
constexpr bool is_not_null_v<not_null<Pointer>> = true;


/**
 * Fancy pointer that restricts internal plain or smart \a Pointer to hold
 * only non-null values. It has zero overhead over \a Pointer.
 */
template <typename Pointer>
class not_null
{
public:

	static_assert(!is_not_null_v<Pointer>,
		"not_null<not_null<Pointer>> not allowed"
	);

	/// Element type this smart pointer points to.
	using element_type = typename std::pointer_traits<Pointer>::element_type;


	not_null (std::nullptr_t) = delete;
	not_null &operator= (std::nullptr_t) = delete;


	/// Construct not_null pointer from copy of \a ptr
	constexpr not_null (const Pointer &ptr)
		: ptr_(ptr)
	{
		check_invariant();
	}


	/// Construct not_null pointer from moved \a ptr
	constexpr not_null (Pointer &&ptr)
		: ptr_(std::forward<Pointer>(ptr))
	{
		check_invariant();
	}


	/// Construct not_null from \a that
	template <typename U,
		std::enable_if_t<
			std::is_constructible_v<Pointer, U>
			&&
			!std::is_convertible_v<U, Pointer>,
			int
		> = 0
	>
	constexpr explicit not_null (const not_null<U> &that)
		: ptr_(that.as_nullable())
	{ }


	/// Construct not_null from \a that
	template <typename U,
		std::enable_if_t<
			std::is_constructible_v<Pointer, U>
			&&
			!std::is_convertible_v<U, Pointer>
			&&
			!std::is_pointer_v<U>,
			int
		> = 0
	>
	constexpr explicit not_null (not_null<U> &&that)
		: ptr_(std::move(that).as_nullable())
	{ }


	/// Construct not_null from \a that
	template <typename U,
		std::enable_if_t<
			std::is_convertible_v<U, Pointer>,
			int
		> = 0
	>
	constexpr not_null (const not_null<U> &that)
		: ptr_(that.as_nullable())
	{ }


	/// Construct not_null from \a that
	template <typename U,
		std::enable_if_t<
			std::is_convertible_v<U, Pointer>
			&&
			!std::is_pointer_v<U>,
			int
		> = 0
	>
	constexpr not_null (not_null<U> &&that)
		: ptr_(std::move(that).as_nullable())
	{ }


	operator bool () const = delete;


	/// Get plain pointer to element.
	constexpr element_type *get () const
	{
		return &*ptr_;
	}


	/// Get plain pointer to element.
	constexpr element_type *operator-> () const
	{
		return get();
	}


	/// Dereference pointer.
	constexpr element_type &operator* () const noexcept
	{
		return *get();
	}


	/// Return internal pointer as nullable pointer type.
	constexpr const Pointer &as_nullable () const &
	{
		return ptr_;
	}


	/**
	 * Return internal pointer as movable and nullable pointer type
	 * allowing to take ownership of pointed element. If ownership is
	 * moved out of \a this, it remains undefined state (i.e. can be
	 * actually null).
	 */
	constexpr Pointer &&as_nullable () &&
	{
		return std::forward<Pointer>(ptr_);
	}


	/// \see as_nullable() const &
	constexpr operator const Pointer & () const &
	{
		return as_nullable();
	}


	/// \see as_nullable() &&
	constexpr operator Pointer && () &&
	{
		return std::move(*this).as_nullable();
	}


private:

	Pointer ptr_;

	constexpr void check_invariant () const
	{
		pal_expect(ptr_ != nullptr);
	}
};


/// not_null \a Pointer type deduction guide.
template <typename Pointer>
not_null (Pointer) -> not_null<Pointer>;


/// Return true if \a l and \a r point to same memory location.
template <typename L, typename R>
constexpr auto operator== (const not_null<L> &l, const not_null<R> &r)
{
	return l.get() == r.get();
}


/// Return true if \a l and \a r point to different memory location.
template <typename L, typename R>
constexpr auto operator!= (const not_null<L> &l, const not_null<R> &r)
{
	return !operator==(l, r);
}


/// Return true if pointed memory location \a l < \a r
template <typename L, typename R>
constexpr auto operator< (const not_null<L> &l, const not_null<R> &r)
{
	return l.get() < r.get();
}


/// Return true if pointed memory location \a l > \a r
template <typename L, typename R>
constexpr auto operator> (const not_null<L> &l, const not_null<R> &r)
{
	return operator<(r, l);
}


/// Return true if pointed memory location \a l <= \a r
template <typename L, typename R>
constexpr auto operator<= (const not_null<L> &l, const not_null<R> &r)
{
	return !operator>(l, r);
}


/// Return true if pointed memory location \a l >= \a r
template <typename L, typename R>
constexpr auto operator>= (const not_null<L> &l, const not_null<R> &r)
{
	return !operator<(l, r);
}


/**
 * Check if \a Pointer is not null and return not_null<decltype(Pointer)>. If
 * \a Pointer is null, std::runtime_error is thrown with file:line
 * information.
 */
#define pal_not_null(Pointer) internal


#if !defined(__DOXYGEN__)

namespace __bits {

template <typename Pointer>
constexpr auto make_not_null (Pointer &&ptr, const char message[])
	-> not_null<std::remove_cv_t<std::remove_reference_t<Pointer>>>
{
	if (!ptr)
	{
		throw std::runtime_error(message);
	}
	return std::forward<Pointer>(ptr);
}

#undef pal_not_null
#define pal_not_null(Pointer) \
	pal::__bits::make_not_null((Pointer), __pal_at ": unexpected nullptr")

} // namespace __bits

#endif // !defined(__DOXYGEN__)


__pal_end
