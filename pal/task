#pragma once // -*- C++ -*-

/**
 * \file pal/task
 * Generic task for any worker type.
 */

#include <pal/__bits/lib>
#include <pal/not_null>


__pal_begin


/**
 * Generic task for any worker. It packages function pointer and it's argument
 * (as generic void pointer).
 *
 * \note Task and function comparisons involve only function pointers, not
 * user data.
 */
class task
{
public:

	/// Pointer to task function.
	using function_ptr = void(*)(task &)noexcept;


	task () = delete;


	/// Construct new task of \a function.
	constexpr task (not_null<function_ptr> function, void *data = nullptr) noexcept
		: function_(function)
		, user_data_(data)
	{ }


	/// Set new user data pointer.
	constexpr void user_data (void *v) noexcept
	{
		user_data_ = v;
	}


	/// Get user data pointer.
	constexpr void *user_data () const noexcept
	{
		return user_data_;
	}


	/// Run task directly in caller's thread context.
	void operator() () noexcept
	{
		(*function_)(*this);
	}


	/// Returns true if tasks \a l and \a r point to same function.
	constexpr friend bool operator== (const task &l, const task &r)
		noexcept
	{
		return l.function_ == r.function_;
	}


	/// Returns true if tasks \a l and \a r point to different function.
	constexpr friend bool operator!= (const task &l, const task &r)
		noexcept
	{
		return !operator==(l, r);
	}


	/// Returns true if task's function \a t is same as \a f.
	constexpr friend bool operator== (const task &t, function_ptr f)
		noexcept
	{
		return t.function_.get() == f;
	}


	/// Returns true if task's function \a t is not same as \a f.
	constexpr friend bool operator!= (const task &t, function_ptr f)
		noexcept
	{
		return !operator==(t, f);
	}


	/// Returns true if task's function \a t is same as \a f.
	constexpr friend bool operator== (function_ptr f, const task &t)
		noexcept
	{
		return operator==(t, f);
	}


	/// Returns true if task's function \a t is not same as \a f.
	constexpr friend bool operator!= (function_ptr f, const task &t)
		noexcept
	{
		return !operator==(t, f);
	}


private:

	not_null<function_ptr> function_;
	void *user_data_;
};


__pal_end
