#pragma once // -*- C++ -*-

/**
 * \file pal/memory
 * Additional helper utilities for <memory> header
 */

#include <pal/result>
#include <pal/version>
#include <memory>
#include <new>

namespace pal {

/// Temporary buffer (scoped allocation) up to \a StackSize bytes are
/// allocated from stack. If actually requested size is bigger (specificed
/// runtime during construction), memory is allocated from heap instead.
///
/// If memory is taken from heap, it is automatically freed during destruction.
template <size_t StackSize>
class temporary_buffer
{
public:

	static_assert(StackSize > 0);

	temporary_buffer () = delete;
	temporary_buffer (const temporary_buffer &) = delete;
	temporary_buffer &operator= (const temporary_buffer &) = delete;
	temporary_buffer (temporary_buffer &&) = delete;
	temporary_buffer &operator= (temporary_buffer &&) = delete;

	/// Ensure memory is allocated for \a size bytes.
	/// On allocation failure, get() will return nullptr
	temporary_buffer (std::nothrow_t, size_t size) noexcept
	{
		if (size > StackSize)
		{
			ptr_ = new(std::nothrow) char[size];
		}
	}

	/// Ensure memory is allocated for \a size bytes.
	/// On allocation failure, throws std::bad_alloc
	temporary_buffer (size_t size)
	{
		if (size > StackSize)
		{
			ptr_ = new char[size];
		}
	}

	/// Deallocate memory if it is allocated from heap during
	/// construction. Otherwise does nothing
	~temporary_buffer () noexcept
	{
		if (ptr_ != &stack_[0])
		{
			delete[] ptr_;
		}
	}

	/// Returns pointer to allocated buffer (either in stack or heap)
	/// If allocation did not succeed, returns nullptr
	void *get () noexcept
	{
		return ptr_;
	}

	/// Returns true if allocation was successful.
	explicit operator bool () const noexcept
	{
		return ptr_ != nullptr;
	}

	/// Returns pointer to stack regardless whether allocation was stack-
	/// or heap-based.
	void *stack () noexcept
	{
		return &stack_[0];
	}

private:

	char stack_[StackSize] = {}, *ptr_ = &stack_[0];
};

namespace __memory {

template <typename... Args>
auto alloc_result (auto &&alloc, Args &&...args)
	-> result<decltype(alloc(std::forward<Args>(args)...))>
{
	try
	{
		if constexpr (std::is_same_v<decltype(alloc(std::forward<Args>(args)...)), void>)
		{
			alloc(std::forward<Args>(args)...);
			return {};
		}
		else
		{
			if (auto ptr = alloc(std::forward<Args>(args)...))
			{
				return ptr;
			}
		}
	}
	catch (const std::bad_alloc &)
	{
	}

	return make_unexpected(std::errc::not_enough_memory);
}

} // namespace __memory

/// Convenience wrapper around invoking \a alloc(\a args...) that handles two special cases:
/// - catches std::bad_alloc
/// - checks if \a alloc retursn nullptr (if result type of alloc is not void)
///
/// \returns Result of \a alloc on success or unexpected{std::errc::not_enough_memory} on failure
template <typename... Args>
auto alloc_result (auto &&alloc, Args &&...args)
{
	return __memory::alloc_result(alloc, std::forward<Args>(args)...);
}

/// Wrapper for non-array T std::make_unique() that catches std::bad_alloc and
/// returns pal::result<> with std::errc::not_enough_memory instead
template <typename T, typename... Args>
result<std::unique_ptr<T>> make_unique (Args &&...args)
{
	return alloc_result(std::make_unique<T, Args...>, std::forward<Args>(args)...);
}

/// Wrapper for non-array T std::make_shared() that catches std::bad_alloc and
/// returns pal::result<> with std::errc::not_enough_memory instead
template <typename T, typename... Args>
result<std::shared_ptr<T>> make_shared (Args &&...args)
{
	if constexpr (os == os_type::macos && compiler == compiler_type::clang)
	{
		// TODO(macos+clang): fails to infer alloc type
		return alloc_result([&]()
		{
			return std::make_shared<T>(std::forward<Args>(args)...);
		});
	}
	else
	{
		return alloc_result(std::make_shared<T, Args...>, std::forward<Args>(args)...);
	}
}

} // namespace pal
