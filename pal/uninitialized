#pragma once // -*- C++ -*-

/**
 * \file pal/uninitialized
 * Uninitialized memory storage for typed variable.
 */

#include <pal/__bits/lib>
#include <type_traits>
#include <utility>


__pal_begin


/**
 * Uninitialized memory storage for typed variable.
 *
 * Provides memory block for \a T, not constructed during instantation of this
 * class. This allows caller explicitly construct/destruct instance of T in
 * memory storage. It is application responsibility to ensure proper lifetime
 * handling. Fetching pointer or reference to internal memory block while it
 * is not constructed yet or is already destructed is undefined behaviour.
 */
template <typename T>
class uninitialized
{
public:

	static_assert(!std::is_void_v<T>);
	static_assert(!std::is_reference_v<T>);


	using value_type = std::remove_const_t<T>;


	constexpr uninitialized () = default;
	~uninitialized () = default;


	/**
	 * Constructs variable \a T in internal storage with value from \a that.
	 */
	constexpr uninitialized (const uninitialized &that)
		noexcept(std::is_nothrow_copy_constructible_v<T>)
		: storage_{that.get()}
	{ }


	/**
	 * Constructs variable \a T in internal storage with value from \a that.
	 */
	constexpr uninitialized (uninitialized &&that)
		noexcept(std::is_nothrow_move_constructible_v<T>)
		: storage_{std::move(that.get())}
	{ }


	/**
	 * Constructs variable \a T in internal storage with \a args.
	 */
	template <typename... Args>
		requires(std::is_constructible_v<T, Args...>)
	constexpr uninitialized (Args &&...args)
		#if !defined(_MSC_BUILD)
		noexcept(std::is_nothrow_constructible_v<T, Args...>)
		#else
		// TODO: error C2065: 'Args': undeclared identifier
		#endif
		: storage_{std::forward<Args>(args)...}
	{ }


	/**
	 * Constructs variable \a T in internal storage as copy of value
	 * from \a that.
	 */
	void construct (const uninitialized<T> &that)
		noexcept(std::is_nothrow_copy_constructible_v<T>)
	{
		::new (std::addressof(storage_)) value_type{that.get()};
	}


	/**
	 * Constructs variable \a T in internal storage with value from \a that.
	 */
	void construct (uninitialized<T> &&that)
		noexcept(std::is_nothrow_move_constructible_v<T>)
	{
		::new (std::addressof(storage_)) value_type{std::move(that.get())};
	}


	/**
	 * Constructs variable \a T in internal \a storage with \a args.
	 */
	template <typename... Args>
		requires(std::is_constructible_v<T, Args...>)
	void construct (Args &&...args)
		noexcept(std::is_nothrow_constructible_v<T, Args...>)
	{
		::new (std::addressof(storage_)) value_type{std::forward<Args>(args)...};
	}


	/**
	 * Assign variable \a T in internal storage as copy of value
	 * from \a that.
	 */
	void assign (const uninitialized<T> &that)
		noexcept(std::is_nothrow_copy_assignable_v<T>)
	{
		get() = that.get();
	}


	/**
	 * Assign variable \a T in internal storage with value from \a that.
	 */
	void assign (uninitialized<T> &&that)
		noexcept(std::is_nothrow_move_assignable_v<T>)
	{
		get() = std::move(that.get());
	}


	/**
	 * Invokes T destructor in memory block. No-op for trivially
	 * destructible type T
	 */
	constexpr void destruct ()
		noexcept(std::is_nothrow_destructible_v<T>)
	{
		storage_.value.~value_type();
	}


	/**
	 * Returns const reference to variable \a T.
	 */
	constexpr const T &get () const & noexcept
	{
		return storage_.value;
	}


	/**
	 * Returns reference to variable \a T.
	 */
	constexpr T &get () & noexcept
	{
		return storage_.value;
	}


	/**
	 * Returns const rvalue reference to variable \a T.
	 */
	constexpr const T &&get () const && noexcept
	{
		return std::move(storage_.value);
	}


	/**
	 * Returns rvalue reference to variable \a T.
	 */
	constexpr T &&get () && noexcept
	{
		return std::move(storage_.value);
	}


	/**
	 * Returns const reference to variable \a T.
	 */
	constexpr const T &operator* () const & noexcept
	{
		return get();
	}


	/**
	 * Returns reference to variable \a T.
	 */
	constexpr T &operator* () & noexcept
	{
		return get();
	}


	/**
	 * Returns const rvalue reference to variable \a T.
	 */
	constexpr const T &&operator* () const && noexcept
	{
		return std::move(get());
	}


	/**
	 * Returns rvalue reference to variable \a T.
	 */
	constexpr T &&operator* () && noexcept
	{
		return std::move(get());
	}


	/**
	 * Returns const pointer to variable \a T.
	 */
	constexpr const T *operator-> () const noexcept
	{
		return std::addressof(get());
	}


	/**
	 * Returns const pointer to variable \a T.
	 */
	constexpr T *operator-> () noexcept
	{
		return std::addressof(get());
	}


private:

	template <typename U, bool = std::is_trivially_destructible_v<U>>
	union storage
	{
		bool empty;
		U value;

		constexpr storage () noexcept
			: empty{}
		{ }

		constexpr storage (const U &that)
			noexcept(std::is_nothrow_copy_constructible_v<U>)
			: value{that}
		{ }

		constexpr storage (U &&that)
			noexcept(std::is_nothrow_move_constructible_v<U>)
			: value{std::move(that)}
		{ }

		template <typename... Args>
		constexpr storage (Args &&...args)
			noexcept(std::is_nothrow_constructible_v<U, Args...>)
			: value{std::forward<Args>(args)...}
		{ }
	};

	template <typename U>
	union storage<U, false>
	{
		bool empty;
		U value;

		constexpr storage () noexcept
			: empty{}
		{ }

		constexpr storage (const U &that)
			noexcept(std::is_nothrow_copy_constructible_v<U>)
			: value{that}
		{ }

		constexpr storage (U &&that)
			noexcept(std::is_nothrow_move_constructible_v<U>)
			: value{std::move(that)}
		{ }

		template <typename... Args>
		constexpr storage (Args &&...args)
			noexcept(std::is_nothrow_constructible_v<U, Args...>)
			: value{std::forward<Args>(args)...}
		{ }

		~storage ()
		{ }
	};

	storage<value_type> storage_{};
};

template <typename T> uninitialized(T) -> uninitialized<T>;


__pal_end
