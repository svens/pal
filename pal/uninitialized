#pragma once // -*- C++ -*-

/**
 * \file pal/uninitialized
 * Uninitialized memory storage for typed variable.
 */

#include <pal/__bits/lib>
#include <type_traits>
#include <utility>


__pal_begin


/**
 * Tag type passed to uninitialized to indicate not to default construct
 * internal storage
 */
struct no_init_t {};

/// \see no_init_t
constexpr no_init_t no_init{};


/**
 * Uninitialized memory storage for typed variable.
 *
 * Provides memory block for \a T, not constructed during instantation of this
 * class. This allows caller explicitly construct/destruct instance of T in
 * memory storage. It is application responsibility to ensure proper lifetime
 * handling. Fetching pointer or reference to internal memory block while it
 * is not constructed yet or is already destructed is undefined behaviour.
 */
template <typename T>
class uninitialized
{
public:

	static_assert(!std::is_reference_v<T>);
	static_assert(!std::is_same_v<std::remove_cv_t<T>, void>);
	static_assert(!std::is_same_v<std::remove_cv_t<T>, no_init_t>);

	/// Contained value type
	using value_type = T;


	/**
	 * Default constructs variable T in internal storage.
	 */
	constexpr uninitialized () = default;


	uninitialized (const uninitialized &) = delete;
	uninitialized (uninitialized &&) = delete;
	uninitialized &operator= (const uninitialized &) = delete;
	uninitialized &operator= (uninitialized &&) = delete;


	/**
	 * No-op. It is application responsibility to destruct() T before this
	 * object goes out of scope.
	 */
	~uninitialized () = default;


	/**
	 * Constructs uninitialized object without constructing variable \a T.
	 */
	constexpr uninitialized (no_init_t tag) noexcept
		: storage_{tag}
	{ }


	/**
	 * Constructs variable \a T in internal storage with \a args.
	 */
	template <typename... Args>
	requires(std::is_constructible_v<T, Args...>)
	constexpr uninitialized (Args &&...args)
		#if !defined(_MSC_BUILD)
			noexcept(std::is_nothrow_constructible_v<T, Args...>)
		#else
			// TODO: error C2065: 'Args': undeclared identifier
		#endif
		: storage_{std::forward<Args>(args)...}
	{ }


	/**
	 * Constructs variable \a T in internal \a storage with \a args.
	 */
	template <typename... Args>
	requires(std::is_constructible_v<T, Args...>)
	void construct (Args &&...args)
		noexcept(std::is_nothrow_constructible_v<T, Args...>)
	{
		::new(std::addressof(storage_)) T{std::forward<Args>(args)...};
	}


	/**
	 * Assign variable \a T in internal storage as copy of value
	 * from \a that.
	 */
	void assign (const T &that)
		noexcept(std::is_nothrow_copy_assignable_v<T>)
		#if !defined(__apple_build_version__)
			requires(std::is_copy_assignable_v<T>)
		#else
			// TODO: expected ';' at end of declaration list
		#endif
	{
		get() = that;
	}


	/**
	 * Assign variable \a T in internal storage with value from \a that.
	 */
	void assign (T &&that)
		noexcept(std::is_nothrow_move_assignable_v<T>)
		#if !defined(__apple_build_version__)
			requires(std::is_move_assignable_v<T>)
		#else
			// TODO: expected ';' at end of declaration list
		#endif
	{
		get() = std::move(that);
	}


	/**
	 * Invokes T destructor in memory block. No-op for trivially
	 * destructible type T
	 */
	void destruct ()
		noexcept(std::is_nothrow_destructible_v<T>)
	{
		storage_.value.~value_type();
	}


	/**
	 * Returns const reference to variable \a T.
	 */
	constexpr const T &get () const & noexcept
	{
		return storage_.value;
	}


	/**
	 * Returns reference to variable \a T.
	 */
	constexpr T &get () & noexcept
	{
		return storage_.value;
	}


	/**
	 * Returns const rvalue reference to variable \a T.
	 */
	constexpr const T &&get () const && noexcept
	{
		return std::move(storage_.value);
	}


	/**
	 * Returns rvalue reference to variable \a T.
	 */
	constexpr T &&get () && noexcept
	{
		return std::move(storage_.value);
	}


	/**
	 * Returns const reference to variable \a T.
	 */
	constexpr const T &operator* () const & noexcept
	{
		return get();
	}


	/**
	 * Returns reference to variable \a T.
	 */
	constexpr T &operator* () & noexcept
	{
		return get();
	}


	/**
	 * Returns const rvalue reference to variable \a T.
	 */
	constexpr const T &&operator* () const && noexcept
	{
		return std::move(get());
	}


	/**
	 * Returns rvalue reference to variable \a T.
	 */
	constexpr T &&operator* () && noexcept
	{
		return std::move(get());
	}


	/**
	 * Returns const pointer to variable \a T.
	 */
	constexpr const T *operator-> () const noexcept
	{
		return std::addressof(get());
	}


	/**
	 * Returns const pointer to variable \a T.
	 */
	constexpr T *operator-> () noexcept
	{
		return std::addressof(get());
	}


private:

	template <typename U, bool = std::is_trivially_destructible_v<U>>
	union storage
	{
		U value;
		no_init_t empty;

		constexpr storage () noexcept
			: value{}
		{ }

		template <typename... Args>
		requires(std::is_constructible_v<U, Args &&...>)
		constexpr storage (Args &&...args)
			noexcept(std::is_nothrow_constructible_v<U, Args &&...>)
			: value{std::forward<Args>(args)...}
		{ }

		constexpr storage (no_init_t tag) noexcept
			: empty{tag}
		{ }

		~storage () = default;

		storage (const storage &) = delete;
		storage (storage &&) = delete;
		storage &operator= (const storage &) = delete;
		storage &operator= (storage &&) = delete;
	};

	template <typename U>
	union storage<U, false>
	{
		U value;
		no_init_t empty;

		constexpr storage () noexcept
			: value{}
		{ }

		template <typename... Args>
		requires(std::is_constructible_v<U, Args &&...>)
		constexpr storage (Args &&...args)
			noexcept(std::is_nothrow_constructible_v<U, Args &&...>)
			: value{std::forward<Args>(args)...}
		{ }

		constexpr storage (no_init_t tag) noexcept
			: empty{tag}
		{ }

		~storage ()
		{ }

		storage (const storage &) = delete;
		storage (storage &&) = delete;
		storage &operator= (const storage &) = delete;
		storage &operator= (storage &&) = delete;
	};

	storage<value_type> storage_{};
};

/// \cond
template <typename T> uninitialized(T) -> uninitialized<T>;
/// \endcond


__pal_end
