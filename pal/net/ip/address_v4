#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/address_v4
 * IPv4 address
 */

#include <pal/__bits/lib>
#include <pal/net/ip/__bits/inet>
#include <pal/byte_order>
#include <pal/error>
#include <pal/hash>
#include <pal/string>
#include <array>
#include <charconv>
#include <ostream>


__pal_begin


namespace net::ip {


/**
 * IPv4 address.
 */
class address_v4
{
public:

	/// Integer representation of IPv4 address
	using uint_type = uint_least32_t;

	/// Binary representation of IPv4 address
	using bytes_type = std::array<uint8_t, 4>;


	/**
	 * Construct new unspecified address.
	 */
	constexpr address_v4 () noexcept = default;


	/**
	 * Construct new address from \a that
	 */
	constexpr address_v4 (const address_v4 &that) noexcept = default;


	/**
	 * Assign \a this from \a that.
	 */
	address_v4 &operator= (const address_v4 &that) noexcept = default;


	/**
	 * Construct new address from \a value
	 */
	explicit constexpr address_v4 (uint_type value) noexcept
		: addr_{hton(value)}
	{ }


	/**
	 * Construct new address from \a bytes
	 */
	constexpr address_v4 (const bytes_type &bytes) noexcept
		: addr_{bytes}
	{ }


	/**
	 * Return binary representation of \a this address
	 */
	constexpr const bytes_type &to_bytes () const noexcept
	{
		return addr_.bytes;
	}


	/**
	 * Return integer representation of \a this address
	 */
	constexpr uint_type to_uint () const noexcept
	{
		return ntoh(static_cast<uint_type>(addr_.in.s_addr));
	}


	/**
	 * Convert \a this address to human readable textual representation by
	 * filling range [\a first, \a last).
	 *
	 * On success, returns std::to_chars_result with ptr pointing at last
	 * filled character (NUL) and ec default value initialized.
	 *
	 * On failure, ptr is set to \a last and ec std::errc::value_too_large.
	 * Content of [\a first, \a last) is unspecified.
	 */
	std::to_chars_result to_chars (char *first, char *last) const noexcept
	{
		if (auto end = __bits::inet_ntop(addr_.in, first, last - first))
		{
			return {end, std::errc{}};
		}
		else
		{
			return {last, std::errc::value_too_large};
		}
	}


	/**
	 * Return \a this addess as human readable textual representation.
	 */
	template <typename Allocator = std::allocator<char>>
	string<Allocator> to_string (const Allocator &allocator = Allocator()) const
	{
		string<Allocator> result(INET_ADDRSTRLEN, '\0', allocator);
		auto [back, _] = to_chars(result.data(), result.data() + result.size());
		result.resize(back - result.data());
		return result;
	}


	/**
	 * Return true if \a this is unspecified address (0.0.0.0)
	 */
	constexpr bool is_unspecified () const noexcept
	{
		return to_uint() == 0;
	}


	/**
	 * Return true if \a this is loopback address (127.0.0.0 - 127.255.255.255)
	 */
	constexpr bool is_loopback () const noexcept
	{
		return (to_uint() & 0xff00'0000) == 0x7f00'0000;
	}


	/**
	 * Return true if \a this is multicast address (224.0.0.0 - 239.255.255.255)
	 */
	constexpr bool is_multicast () const noexcept
	{
		return (to_uint() & 0xf000'0000) == 0xe000'0000;
	}


	/**
	 * Return true if \a this is private address (RFC1918)
	 */
	constexpr bool is_private () const noexcept
	{
		const auto &bytes = to_bytes();
		return
			// 10.0.0.0 - 10.255.255.255
			(bytes[0] == 0x0a) ||

			// 172.16.0.0 - 172.31.255.255
			(bytes[0] == 0xac && bytes[1] >= 0x10 && bytes[1] <= 0x1f) ||

			// 192.168.0.0 - 192.168.0.0
			(bytes[0] == 0xc0 && bytes[1] == 0xa8)
		;
	}


	/**
	 * Compare \a this to \a that. Return value has same meaning as
	 * std::memcmp.
	 */
	constexpr int compare (const address_v4 &that) const noexcept
	{
		auto a = to_uint(), b = that.to_uint();
		return a < b ? -1 : a > b ? 1 : 0;
	}


	/**
	 * Calculate hash value for \a this.
	 */
	constexpr uint64_t hash () const noexcept
	{
		return hash_128_to_64(AF_INET,
			fnv_1a_64(
				addr_.bytes.data(),
				addr_.bytes.data() + addr_.bytes.size()
			)
		);
	}


	/**
	 * Unspecified IPv4 address
	 */
	static constexpr address_v4 any () noexcept
	{
		return {{0,0,0,0}};
	}


	/**
	 * IPv4 loopback address
	 */
	static constexpr address_v4 loopback () noexcept
	{
		return {{127,0,0,1}};
	}


	/**
	 * IPv4 broadcast address
	 */
	static constexpr address_v4 broadcast () noexcept
	{
		return {{255,255,255,255}};
	}


private:

	union storage
	{
		in_addr in{};
		bytes_type bytes;

		constexpr storage () noexcept = default;

		explicit constexpr storage (uint_type value) noexcept
		{
			in.s_addr = value;
		}

		explicit constexpr storage (const bytes_type &value) noexcept
			: bytes{value}
		{ }
	} addr_{};

	friend address_v4 make_address_v4 (const char *, std::error_code &) noexcept;
};


/**
 * Return true if \a a == \a b
 */
constexpr bool operator== (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) == 0;
}

/**
 * Return true if \a a != \a b
 */
constexpr bool operator!= (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) != 0;
}

/**
 * Return true if \a a < \a b
 */
constexpr bool operator< (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) < 0;
}

/**
 * Return true if \a a <= \a b
 */
constexpr bool operator<= (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) <= 0;
}

/**
 * Return true if \a a > \a b
 */
constexpr bool operator> (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) > 0;
}

/**
 * Return true if \a a >= \a b
 */
constexpr bool operator>= (const address_v4 &a, const address_v4 &b) noexcept
{
	return a.compare(b) >= 0;
}


/**
 * pal::net::ip::address_v4 stream I/O
 */
inline std::ostream &operator<< (std::ostream &os, const address_v4 &a)
{
	char text[INET_ADDRSTRLEN];
	a.to_chars(text, text + sizeof(text));
	return (os << text);
}


/**
 * Create and return address from \a bytes.
 */
constexpr address_v4 make_address_v4 (const address_v4::bytes_type &bytes)
{
	return address_v4{bytes};
}

/**
 * Create and return address from \a value.
 */
constexpr address_v4 make_address_v4 (const address_v4::uint_type &value)
{
	return address_v4{value};
}

/**
 * Create and return address from \a text. On failure, set \a error to
 * \c std::errc::invalid_argument and return unspecified address.
 */
inline address_v4 make_address_v4 (const char *text, std::error_code &error) noexcept
{
	address_v4 result;
	if (__bits::inet_pton(text, result.addr_.in))
	{
		error.clear();
		return result;
	}
	error = std::make_error_code(std::errc::invalid_argument);
	return {};
}

/**
 * Create and return address from \a text. On failure, throw
 * std::system_error.
 */
inline address_v4 make_address_v4 (const char *text)
{
	return make_address_v4(text, throw_on_error("make_address_v4"));
}

/**
 * Create and return address from \a text. On failure, set \a error to
 * \c std::errc::invalid_argument and return unspecified address.
 */
inline address_v4 make_address_v4 (const std::string &text, std::error_code &error) noexcept
{
	return make_address_v4(text.c_str(), error);
}

/**
 * Create and return address from \a text. On failure, throw
 * std::system_error.
 */
inline address_v4 make_address_v4 (const std::string &text)
{
	return make_address_v4(text.c_str());
}

/**
 * Create and return address from \a text. On failure, set \a error to
 * \c std::errc::invalid_argument and return unspecified address.
 */
inline address_v4 make_address_v4 (const std::string_view &text, std::error_code &error) noexcept
{
	char c_str[INET_ADDRSTRLEN];
	auto length = text.copy(c_str, sizeof(c_str));
	if (length < sizeof(c_str))
	{
		c_str[length] = '\0';
		return make_address_v4(c_str, error);
	}
	error = std::make_error_code(std::errc::invalid_argument);
	return {};
}

/**
 * Create and return address from \a text. On failure, throw
 * std::system_error.
 */
inline address_v4 make_address_v4 (const std::string_view &text)
{
	return make_address_v4(text, throw_on_error("make_address_v4"));
}


} // namespace net::ip


__pal_end


namespace std {


template <>
struct hash<pal::net::ip::address_v4>
{
	size_t operator() (const pal::net::ip::address_v4 &a) const noexcept
	{
		return a.hash();
	}
};


} // namespace std
