#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/address
 * Version independent IP address
 */

#include <pal/__bits/lib>
#include <pal/net/__bits/socket>
#include <pal/net/ip/address_v4>
#include <pal/net/ip/address_v6>


__pal_begin


namespace net::ip {


/**
 * Version independent representation of IP address. It holds either IPv4 or
 * IPv6 address.
 */
class address
{
public:

	/// Construct new unspecified IPv4 address
	constexpr address () noexcept
		: family_{AF_INET}
		, v4_{}
	{ }

	/// Construct new address from \a that
	constexpr address (const address &that) noexcept = default;

	/// Construct new address from IPv4 address \a that
	constexpr address (const address_v4 &that) noexcept
		: family_{AF_INET}
		, v4_{that}
	{ }

	/// Construct new address from IPv6 address \a that
	constexpr address (const address_v6 &that) noexcept
		: family_{AF_INET6}
		, v6_{that}
	{ }

	/// Assign \a this from \a that
	address &operator= (const address &that) noexcept = default;

	/// Assign \a this from \a that.
	address &operator= (const address_v4 &that) noexcept
	{
		new (&v4_) address_v4(that);
		family_ = AF_INET;
		return *this;
	}

	/// Assign \a this from \a that.
	address &operator= (const address_v6 &that) noexcept
	{
		new (&v6_) address_v6(that);
		family_ = AF_INET6;
		return *this;
	}

	/// Return \c true if object contains IPv4 address, otherwise \c false
	constexpr bool is_v4 () const noexcept
	{
		return family_ == AF_INET;
	}

	/// Return \c true if object contains IPv6 address, otherwise \c false
	constexpr bool is_v6 () const noexcept
	{
		return family_ == AF_INET6;
	}

	/// Cast unconditionally to address_v4.
	constexpr const address_v4 &v4 () const noexcept
	{
		return v4_;
	}

	/// Cast unconditionally to address_v6.
	constexpr const address_v6 &v6 () const noexcept
	{
		return v6_;
	}

	/// Return IPv4 address or failure if this does not contain IPv4 address
	result<address_v4> to_v4 () const noexcept
	{
		if (is_v4())
		{
			return v4();
		}
		return make_unexpected(std::errc::address_not_available);
	}

	/// Return IPv4 address or failure if this does not contain IPv4 address
	result<address_v6> to_v6 () const noexcept
	{
		if (is_v6())
		{
			return v6();
		}
		return make_unexpected(std::errc::address_not_available);
	}

	/// Return true if \a this is unspecified address.
	constexpr bool is_unspecified () const noexcept
	{
		return is_v4() ? v4_.is_unspecified() : v6_.is_unspecified();
	}

	/// Return true if \a this is loopback address.
	constexpr bool is_loopback () const noexcept
	{
		return is_v4() ? v4_.is_loopback() : v6_.is_loopback();
	}

	/**
	 * Convert \a this address to human readable textual representation by
	 * filling range [\a first, \a last).
	 *
	 * On success, returns std::to_chars_result with ptr pointing at past
	 * last filled character and ec default value initialized.
	 *
	 * On failure, ptr is set to \a last and ec std::errc::value_too_large.
	 * Content of [\a first, \a last) is unspecified.
	 */
	std::to_chars_result to_chars (char *first, char *last) const noexcept
	{
		return is_v4() ? v4_.to_chars(first, last) : v6_.to_chars(first, last);
	}

	/// Return \a this address as human readable textual representation.
	template <typename Allocator = std::allocator<char>>
	string<Allocator> to_string (const Allocator &allocator = Allocator()) const
	{
		return is_v4() ? v4_.to_string(allocator) : v6_.to_string(allocator);
	}

	/// Compare \a this to \a that. Return value has same meaning as std::memcmp.
	constexpr int compare (const address &that) const noexcept
	{
		if (family_ == that.family_)
		{
			return is_v4() ? v4_.compare(that.v4_) : v6_.compare(that.v6_);
		}
		return family_ == AF_INET ? -1 : 1;
	}

	/// Return hash value for \a this.
	constexpr uint64_t hash () const noexcept
	{
		return is_v4() ? v4_.hash() : v6_.hash();
	}


private:

	net::__bits::sa_family family_;
	union
	{
		address_v4 v4_;
		address_v6 v6_;
	};

	template <typename Protocol> friend class basic_endpoint;
};

/// Return true if \a a == \a b
constexpr bool operator== (const address &a, const address &b) noexcept
{
	return a.compare(b) == 0;
}

/// Return true if \a a != \a b
constexpr bool operator!= (const address &a, const address &b) noexcept
{
	return a.compare(b) != 0;
}

/// Return true if \a a < \a b
constexpr bool operator< (const address &a, const address &b) noexcept
{
	return a.compare(b) < 0;
}

/// Return true if \a a <= \a b
constexpr bool operator<= (const address &a, const address &b) noexcept
{
	return a.compare(b) <= 0;
}

/// Return true if \a a > \a b
constexpr bool operator> (const address &a, const address &b) noexcept
{
	return a.compare(b) > 0;
}

/// Return true if \a a >= \a b
constexpr bool operator>= (const address &a, const address &b) noexcept
{
	return a.compare(b) >= 0;
}

/// Insert address \a a into stream \a os
inline std::ostream &operator<< (std::ostream &os, const address &a)
{
	char text[INET6_ADDRSTRLEN] = {};
	a.to_chars(text, text + sizeof(text));
	return (os << text);
}

/// Return new address parsed from human readable \a text.
inline result<address> make_address (const char *text) noexcept
{
	if (auto v4 = make_address_v4(text))
	{
		return *v4;
	}
	else if (auto v6 = make_address_v6(text))
	{
		return *v6;
	}
	return make_unexpected(std::errc::invalid_argument);
}

/// \copydoc make_address()
inline result<address> make_address (const std::string &text) noexcept
{
	return make_address(text.c_str());
}

/// \copydoc make_address()
inline result<address> make_address (const std::string_view &text) noexcept
{
	char c_str[INET6_ADDRSTRLEN];
	auto length = text.copy(c_str, sizeof(c_str));
	if (length < sizeof(c_str))
	{
		c_str[length] = '\0';
		return make_address(c_str);
	}
	return make_unexpected(std::errc::invalid_argument);
}


} // namespace net::ip


__pal_end


namespace std {

template <>
struct hash<pal::net::ip::address>
{
	size_t operator() (const pal::net::ip::address &a) const noexcept
	{
		return a.hash();
	}
};

} // namespace std
