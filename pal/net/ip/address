#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/address
 * Version independent IP address
 */

#include <pal/net/ip/address_v4>
#include <pal/net/ip/address_v6>
#include <variant>

namespace pal::net::ip {

/// Version independent representation of IP address.
/// It holds either IPv4 or IPv6 address (implemented as std::variant<address_v4, address_v6>).
class address
	: public std::variant<address_v4, address_v6>
{
public:

	using std::variant<address_v4, address_v6>::variant;

	/// Maximum human readable representation length
	static constexpr auto max_string_length = address_v6::max_string_length;

	/// Return true if \a this is unspecified address.
	constexpr bool is_unspecified () const noexcept
	{
		return std::visit([](auto &&a) { return a.is_unspecified(); }, *this);
	}

	/// Return true if \a this is loopback address.
	constexpr bool is_loopback () const noexcept
	{
		return std::visit([](auto &&a) { return a.is_loopback(); }, *this);
	}

	/// Convert \a this address to human readable textual representation by
	/// filling range [\a first, \a last).
	///
	/// On success, returns std::to_chars_result with ptr pointing at past
	/// last filled character and ec default value initialized.
	///
	/// On failure, ptr is set to \a last and ec std::errc::value_too_large.
	/// Content of [\a first, \a last) is unspecified.
	std::to_chars_result to_chars (char *first, char *last) const noexcept
	{
		return std::visit([&](auto &&a) { return a.to_chars(first, last); }, *this);
	}

	/// Parses human readable address from range [\a first, \a last).
	///
	/// On success, returns std::from_chars_result with ptr pointing to
	/// first character not matching the IPv4 address text, or has value
	/// equal to \a last if all characters were matched.
	///
	/// On failure, ptr is set to \a first and ec std::errc::invalid_argument.
	/// Content of this is undefined.
	std::from_chars_result from_chars (const char *first, const char *last) noexcept
	{
		auto r = emplace<address_v4>().from_chars(first, last);
		if (r.ec != std::errc{})
		{
			r = emplace<address_v6>().from_chars(first, last);
		}
		return r;
	}

	/// Return hash value for \a this.
	constexpr uint64_t hash () const noexcept
	{
		return std::visit([](auto &&a) { return a.hash(); }, *this);
	}
};

/// Return new address parsed from human readable \a text.
inline result<address> make_address (const std::string_view text) noexcept
{
	address result;
	auto [_, ec] = result.from_chars(text.data(), text.data() + text.size());
	if (ec == std::errc{})
	{
		return result;
	}
	return pal::make_unexpected(ec);
}

} // namespace pal::net::ip

namespace std {

template <>
struct hash<pal::net::ip::address>
{
	size_t operator() (const pal::net::ip::address &a) const noexcept
	{
		return a.hash();
	}
};

template <>
struct formatter<pal::net::ip::address>
{
	bool mask_address = false;

	template <typename ParseContext>
	constexpr typename ParseContext::iterator parse (ParseContext &ctx)
	{
		auto it = ctx.begin();
		for (/**/; it != ctx.end() && *it != '}'; ++it)
		{
			if (*it == '#')
			{
				mask_address = true;
			}
			else
			{
				throw std::format_error("invalid format for pal::net::ip::address");
			}
		}
		return it;
	}

	template <typename FormatContext>
	typename FormatContext::iterator format (const pal::net::ip::address &a, FormatContext &ctx) const
	{
		char text[pal::net::ip::address::max_string_length + 1];
		auto [end, _] = a.to_chars(text, text + sizeof(text));
		if (mask_address)
		{
			while (end > text && end[-1] != ':' && end[-1] != '.')
			{
				--end;
			}
			*end++ = '0';
		}
		return std::copy(text, end, ctx.out());
	}
};

} // namespace std
