#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/udp
 * UDP stream-oriented protocol
 */

#include <pal/net/__socket>
#include <pal/net/basic_datagram_socket>
#include <pal/net/ip/basic_endpoint>
#include <pal/net/ip/basic_resolver>

#if __pal_net_posix
	#include <netinet/udp.h>
#endif

namespace pal::net::ip {

/// Encapsulate types and constants for UDP sockets
class udp
{
public:

	/// UDP socket endpoint
	using endpoint = basic_endpoint<udp>;

	/// UDP host and service name resolver
	using resolver = basic_resolver<udp>;

	/// UDP datagram socket
	using socket = basic_datagram_socket<udp>;

	udp () = delete;

	/// UDP/IPv4 internet protocol
	static constexpr udp v4 () noexcept
	{
		return udp{AF_INET};
	}

	/// UDP/IPv6 internet protocol
	static constexpr udp v6 () noexcept
	{
		return udp{AF_INET6};
	}

	/// Return value suitable passing as domain argument for socket(2)
	constexpr int family () const noexcept
	{
		return family_;
	}

	/// Return value suitable passing as type argument for socket(2)
	constexpr int type () const noexcept
	{
		return SOCK_DGRAM;
	}

	/// Return value suitable passing as protocol argument for socket(2)
	constexpr int protocol () const noexcept
	{
		return IPPROTO_UDP;
	}

	constexpr auto operator<=> (const udp &) const noexcept = default;

protected:

	const int family_;

	constexpr explicit udp (int family) noexcept
		: family_{family}
	{ }

	friend class basic_endpoint<udp>;
	friend class basic_socket<udp>;
};

} // namespace pal::net::ip
