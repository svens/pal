#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/tcp
 * TCP stream-oriented protocol
 */

#include <pal/net/__socket>
#include <pal/net/basic_socket_acceptor>
#include <pal/net/basic_stream_socket>
#include <pal/net/ip/basic_endpoint>
#include <pal/net/socket_option>

#if __pal_net_posix
	#include <netinet/tcp.h>
#endif

namespace pal::net::ip {

/// Encapsulate types and constants for TCP sockets
class tcp
{
public:

	/// TCP socket endpoint
	using endpoint = basic_endpoint<tcp>;

	/// TCP stream socket
	using socket = basic_stream_socket<tcp>;

	/// TCP socket acceptor
	using acceptor = basic_socket_acceptor<tcp>;

	tcp () = delete;

	/// TCP/IPv4 internet protocol
	static constexpr tcp v4 () noexcept
	{
		return tcp{AF_INET};
	}

	/// TCP/IPv6 internet protocol
	static constexpr tcp v6 () noexcept
	{
		return tcp{AF_INET6};
	}

	/// Return value suitable passing as domain argument for socket(2)
	constexpr int family () const noexcept
	{
		return family_;
	}

	/// Return value suitable passing as type argument for socket(2)
	constexpr int type () const noexcept
	{
		return SOCK_STREAM;
	}

	/// Return value suitable passing as protocol argument for socket(2)
	constexpr int protocol () const noexcept
	{
		return IPPROTO_TCP;
	}

	constexpr auto operator<=> (const tcp &) const noexcept = default;

	/// \ingroup socket_option
	/// Determines whether a TCP socket will avoid coalescing of small
	/// segments (i.e. disable Nagle's algorithm)
	using no_delay = socket_option<bool,
		socket_option_level{IPPROTO_TCP},
		socket_option_name{TCP_NODELAY}
	>;

protected:

	const int family_;

	constexpr explicit tcp (int family) noexcept
		: family_{family}
	{ }

	friend class basic_endpoint<tcp>;
	friend class basic_socket<tcp>;
	friend class basic_socket_acceptor<tcp>;
};

} // namespace pal::net::ip
