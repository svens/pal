#pragma once // -*- C++ -*-

#include <pal/__bits/lib>
#include <pal/byte_order>
#include <pal/result>
#include <charconv>
#include <string_view>

#if __pal_os_linux || __pal_os_macos
	#include <arpa/inet.h>
	#include <unistd.h>
#elif __pal_os_windows
	#include <ws2tcpip.h>
#endif


__pal_begin


namespace net::ip::__bits {


inline char *to_text (int family, const uint8_t *bytes, char *first, char *last) noexcept
{
	if (::inet_ntop(family, bytes, first, last - first))
	{
		while (*first)
		{
			first++;
		}
		return first;
	}
	return nullptr;
}


namespace {

inline char *add_port (uint16_t port, char *first, char *last) noexcept
{
	if (first + sizeof(":1") - 1 < last)
	{
		*first++ = ':';
		auto [p, ec] = std::to_chars(first, last, ntoh(port));
		if (ec == std::errc{})
		{
			return p;
		}
	}
	return nullptr;
}

}


inline char *to_text (const sockaddr_in &src, char *first, char *last) noexcept
{
	auto bytes = reinterpret_cast<const uint8_t *>(&src.sin_addr);
	if ((first = to_text(AF_INET, bytes, first, last)) != nullptr)
	{
		return add_port(src.sin_port, first, last);
	}
	return nullptr;
}


inline char *to_text (const sockaddr_in6 &src, char *first, char *last) noexcept
{
	if (first + sizeof("[::]:1") - 1 < last)
	{
		*first++ = '[';
		auto bytes = reinterpret_cast<const uint8_t *>(&src.sin6_addr);
		if ((first = to_text(AF_INET6, bytes, first, last)) != nullptr)
		{
			if (first + sizeof("]:1") - 1 < last)
			{
				*first++ = ']';
				return add_port(src.sin6_port, first, last);
			}
		}
	}
	return nullptr;
}


inline bool from_text (int family, const char *src, uint8_t *bytes) noexcept
{
  return ::inet_pton(family, src, bytes) == 1;
}


inline result<std::string_view> host_name () noexcept
{
	static char buf[256] = {};
	if (::gethostname(buf, sizeof(buf) - 1) == 0)
	{
		return buf;
	}
	#if __pal_os_linux || __pal_os_macos
		return unexpected<std::error_code>{std::in_place, errno, std::generic_category()};
	#elif __pal_os_windows
		return unexpected<std::error_code>{std::in_place, ::WSAGetLastError(), std::system_category()};
	#endif
}


} // namespace net::ip::__bits


__pal_end
