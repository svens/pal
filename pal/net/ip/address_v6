#pragma once // -*- C++ -*-

/**
 * \file pal/net/ip/address_v6
 * IPv4 address
 */

#include <pal/net/ip/address_v4>
#include <pal/hash>
#include <pal/result>
#include <array>
#include <charconv>
#include <format>

namespace pal::net::ip {

/// IPv6 address
class address_v6
{
public:

	/// Maximum human readable representation length
	static constexpr size_t max_string_length = sizeof("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255") - 1;

	/// Binary representation of IPv6 address
	struct bytes_type: std::array<uint8_t, 16>
	{
		/// Construct address using values \a v
		template <typename... T>
		explicit constexpr bytes_type (T... v)
			: std::array<uint8_t, 16>{{static_cast<uint8_t>(v)...}}
		{ }
	};

	/// Construct new unspecified address
	constexpr address_v6 () noexcept
		: bytes_{}
	{ }

	/// Construct new address from \a bytes
	constexpr address_v6 (const bytes_type &bytes) noexcept
		: bytes_{bytes}
	{ }

	/// Construct new address from \a that
	constexpr address_v6 (const address_v6 &that) noexcept = default;

	/// Assign \a this from \a that
	address_v6 &operator= (const address_v6 &that) noexcept = default;

	/// Return binary representation of \a this address
	constexpr const bytes_type &to_bytes () const noexcept
	{
		return bytes_;
	}

	/**
	 * Convert \a this address to human readable textual representation by
	 * filling range [\a first, \a last).
	 *
	 * On success, returns std::to_chars_result with ptr pointing at past
	 * last filled character and ec default value initialized.
	 *
	 * On failure, ptr is set to \a last and ec std::errc::value_too_large.
	 * Content of [\a first, \a last) is unspecified.
	 */
	std::to_chars_result to_chars (char *first, char *last) const noexcept;

	/**
	 * Parses human readable IPv6 address from range [\a first, \a last).
	 *
	 * On success, returns std::from_chars_result with ptr pointing to
	 * first character not matching the IPv4 address text, or has value
	 * equal to \a last if all characters were matched.
	 *
	 * On failure, ptr is set to \a first and ec std::errc::invalid_argument.
	 * Content of this is undefined.
	 */
	std::from_chars_result from_chars (const char *first, const char *last) noexcept;

	/// Return true if \a this is unspecified address (::)
	constexpr bool is_unspecified () const noexcept
	{
		for (auto i = 0;  i < 16;  ++i)
		{
			if (bytes_[i] != 0x00)
			{
				return false;
			}
		}
		return true;
	}

	/// Return true if \a this is loopback address (::1)
	constexpr bool is_loopback () const noexcept
	{
		for (auto i = 0;  i < 15;  ++i)
		{
			if (bytes_[i] != 0x00)
			{
				return false;
			}
		}
		return bytes_.back() == 0x01;
	}

	/// Return true if \a this represents IPv4-mapped IPv6 address
	constexpr bool is_v4_mapped () const noexcept
	{
		return true
			&& bytes_[0] == 0x00
			&& bytes_[1] == 0x00
			&& bytes_[2] == 0x00
			&& bytes_[3] == 0x00
			&& bytes_[4] == 0x00
			&& bytes_[5] == 0x00
			&& bytes_[6] == 0x00
			&& bytes_[7] == 0x00
			&& bytes_[8] == 0x00
			&& bytes_[9] == 0x00
			&& bytes_[10] == 0xff
			&& bytes_[11] == 0xff
		;
	}

	/// Compare \a this to \a that. Return value has same meaning as std::memcmp.
	constexpr int compare (const address_v6 &that) const noexcept
	{
		for (auto i = 0;  i < 16;  ++i)
		{
			if (int r = bytes_[i] - that.bytes_[i];  r != 0)
			{
				return r;
			}
		}
		return 0;
	}

	/// Return hash value for \a this.
	constexpr uint64_t hash () const noexcept
	{
		return fnv_1a_64(bytes_);
	}

	/// Return unspecified IPv6 address (::)
	static constexpr address_v6 any () noexcept
	{
		return bytes_type{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	}

	/// Return IPv6 loopback address (::1)
	static constexpr address_v6 loopback () noexcept
	{
		return bytes_type{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
	}


private:

	bytes_type bytes_;

	template <typename Protocol> friend class basic_endpoint;
};

/// Return true if \a a == \a b
constexpr bool operator== (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) == 0;
}

/// Return true if \a a != \a b
constexpr bool operator!= (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) != 0;
}

/// Return true if \a a < \a b
constexpr bool operator< (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) < 0;
}

/// Return true if \a a <= \a b
constexpr bool operator<= (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) <= 0;
}

/// Return true if \a a > \a b
constexpr bool operator> (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) > 0;
}

/// Return true if \a a >= \a b
constexpr bool operator>= (const address_v6 &a, const address_v6 &b) noexcept
{
	return a.compare(b) >= 0;
}

/// Return new address from \a value.
constexpr address_v6 make_address_v6 (const address_v6::bytes_type &value) noexcept
{
	return address_v6{value};
}

/// Return new address parsed from human readable \a text.
inline result<address_v6> make_address_v6 (const std::string_view &text) noexcept
{
	address_v6 result;
	auto [_, ec] = result.from_chars(text.data(), text.data() + text.size());
	if (ec == std::errc{})
	{
		return result;
	}
	return pal::make_unexpected(ec);
}

/// Tag type to invoke conversion between IPv6 and IPv4-mapped IPv6 addresses.
struct v4_mapped_t {};

/// Tag to invoke conversion between IPv6 and IPv4-mapped IPv6 addresses.
constexpr v4_mapped_t v4_mapped;

/// Return new IPv4 address from IPv4-mapped IPv6 address.
inline result<address_v4> make_address_v4 (v4_mapped_t, const address_v6 &a) noexcept
{
	if (a.is_v4_mapped())
	{
		const auto &v6b = a.to_bytes();
		return address_v4::bytes_type{v6b[12], v6b[13], v6b[14], v6b[15]};
	}
	return pal::make_unexpected(std::errc::invalid_argument);
}

/// Return new IPv4-mapped IPv6 address from IPv4 address \a a.
constexpr address_v6 make_address_v6 (v4_mapped_t, const address_v4 &a) noexcept
{
	const auto &v4b = a.to_bytes();
	return address_v6::bytes_type
	{
		0,0,0,0,0,0,0,0,0,0,0xff,0xff,v4b[0],v4b[1],v4b[2],v4b[3]
	};
}

} // namespace pal::net::ip

namespace std {

template <>
struct hash<pal::net::ip::address_v6>
{
	size_t operator() (const pal::net::ip::address_v6 &a) const noexcept
	{
		return a.hash();
	}
};

template <>
struct formatter<pal::net::ip::address_v6>
{
	bool mask_address = false;

	template <typename ParseContext>
	constexpr typename ParseContext::iterator parse (ParseContext &ctx)
	{
		auto it = ctx.begin();
		for (/**/; it != ctx.end() && *it != '}'; ++it)
		{
			if (*it == '#')
			{
				mask_address = true;
			}
			else
			{
				throw std::format_error("invalid format for pal::net::ip::address_v6");
			}
		}
		return it;
	}

	template <typename FormatContext>
	typename FormatContext::iterator format (const pal::net::ip::address_v6 &a, FormatContext &ctx) const
	{
		char text[pal::net::ip::address_v6::max_string_length + 1];
		auto [end, _] = a.to_chars(text, text + sizeof(text));
		if (mask_address)
		{
			while (end > text && end[-1] != ':' && end[-1] != '.')
			{
				--end;
			}
			*end++ = '0';
		}
		return std::copy(text, end, ctx.out());
	}
};

} // namespace std
