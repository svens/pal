#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_datagram_socket
 * Generic datagram-oriented socket
 */

#include <pal/__bits/lib>
#include <pal/net/basic_socket>
#include <pal/net/async/request>
#include <pal/not_null>


__pal_begin


namespace net {


/**
 * Datagram socket that can be used to send and receive discrete messages of
 * fixed maximum length.
 *
 * \note Vector I/O supports up to 4 spans. If send/receive requests exceed
 * this value, method will return std::errc::argument_list_too_long
 */
template <typename Protocol>
class basic_datagram_socket: public basic_socket<Protocol>
{
	using base = basic_socket<Protocol>;

public:

	using typename basic_socket<Protocol>::protocol_type;
	using typename basic_socket<Protocol>::endpoint_type;

	//
	// Synchronous API
	//

	/**
	 * Read data from socket into \a spans. Source endpoint is stored into
	 * \a sender. Returns number of bytes received.
	 */
	template <typename MutableSpanSequence>
	result<size_t> receive_from (const MutableSpanSequence &spans,
		endpoint_type &sender,
		socket_base::message_flags flags = 0) noexcept
	{
		std::error_code error;
		__bits::message message{};
		if (message.set(spans, error))
		{
			message.flags(flags);
			message.name(sender.data(), sender.capacity());
			auto r = base::socket_.receive(message);
			if (r)
			{
				sender.resize(message.msg_namelen);
				return r;
			}
			return unexpected{r.error()};
		}
		return unexpected{error};
	}

	/**
	 * Send data from \a spans using this socket to \a recipient. Returns
	 * number of bytes sent.
	 */
	template <typename ConstSpanSequence>
	result<size_t> send_to (const ConstSpanSequence &spans,
		const endpoint_type &recipient,
		socket_base::message_flags flags = 0) noexcept
	{
		std::error_code error;
		__bits::message message{};
		if (message.set(spans, error))
		{
			message.flags(flags);
			message.name(recipient.data(), recipient.size());
			return base::socket_.send(message);
		}
		return unexpected{error};
	}

	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received.
	 *
	 * \note This methods can be used with connectionless or
	 * connected mode. In connectionless mode, application do not retrieve
	 * datagrams source endpoint.
	 */
	template <typename MutableSpanSequence>
	result<size_t> receive (const MutableSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		std::error_code error;
		__bits::message message{};
		if (message.set(spans, error))
		{
			message.flags(flags);
			return base::socket_.receive(message);
		}
		return unexpected{error};
	}

	/**
	 * Send data in \a spans using this socket. It can be used only in
	 * connected mode. Returns number of bytes sent.
	 */
	template <typename ConstSpanSequence>
	result<size_t> send (const ConstSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		std::error_code error;
		__bits::message message{};
		if (message.set(spans, error))
		{
			message.flags(flags);
			return base::socket_.send(message);
		}
		return unexpected{error};
	}


	//
	// Asynchronous API
	//

	/**
	 * Start asynchronous datagram receive request.
	 * \see receive_from()
	 */
	template <typename MutableSpanSequence>
	void async_receive_from (not_null<async::request *> request,
		const MutableSpanSequence &spans,
		endpoint_type &sender,
		socket_base::message_flags flags = 0) noexcept
	{
		auto &message = request->impl_.message;
		if (message.set(spans, request->error))
		{
			message.flags(flags);
			message.name(sender.data(), sender.capacity());
		}
		base::socket_.start(request->emplace<async::receive_from>());
	}

	/**
	 * Start asynchronous datagram send request.
	 * \see send_to()
	 */
	template <typename ConstSpanSequence>
	void async_send_to (not_null<async::request *> request,
		const ConstSpanSequence &spans,
		const endpoint_type &recipient,
		socket_base::message_flags flags = 0) noexcept
	{
		auto &message = request->impl_.message;
		if (message.set(spans, request->error))
		{
			message.flags(flags);
			message.name(recipient.data(), recipient.size());
		}
		base::socket_.start(request->emplace<async::send_to>());
	}

	/**
	 * Start asynchronous datagram receive request.
	 * \see receive()
	 */
	template <typename MutableSpanSequence>
	void async_receive (not_null<async::request *> request,
		const MutableSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		auto &message = request->impl_.message;
		if (message.set(spans, request->error))
		{
			message.flags(flags);
			message.name(nullptr, 0);
		}
		base::socket_.start(request->emplace<async::receive>());
	}

	/**
	 * Start asynchronous datagram send request.
	 * \see send_to()
	 */
	template <typename ConstSpanSequence>
	void async_send (not_null<async::request *> request,
		const ConstSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		auto &message = request->impl_.message;
		if (message.set(spans, request->error))
		{
			message.flags(flags);
			message.name(nullptr, 0);
		}
		base::socket_.start(request->emplace<async::send>());
	}


private:

	using basic_socket<Protocol>::basic_socket;
};


/**
 * Create new datagram socket of \a protocol.
 */
template <typename Protocol>
auto make_datagram_socket (const Protocol &protocol) noexcept
	-> result<basic_datagram_socket<Protocol>>
{
	basic_datagram_socket<Protocol> socket;
	if (auto open = socket.open(protocol);  !open)
	{
		return unexpected{open.error()};
	}
	return socket;
}


/**
 * Create new datagram socket of \a protocol and \a bind to \a endpoint.
 */
template <typename Protocol>
auto make_datagram_socket (const Protocol &protocol, const typename Protocol::endpoint &endpoint) noexcept
	-> result<basic_datagram_socket<Protocol>>
{
	auto socket = make_datagram_socket(protocol);
	if (!socket)
	{
		return unexpected{socket.error()};
	}
	else if (auto bind = socket->bind(endpoint);  !bind)
	{
		return unexpected{bind.error()};
	}
	return socket;
}


/**
 * Create new datagram socket of \a protocol from existing \a handle.
 */
template <typename Protocol>
auto make_datagram_socket (const Protocol &protocol, socket_base::native_handle_type handle) noexcept
	-> result<basic_datagram_socket<Protocol>>
{
	basic_datagram_socket<Protocol> socket;
	if (auto assign = socket.assign(protocol, handle);  !assign)
	{
		return unexpected{assign.error()};
	}
	return socket;
}


} // namespace net


__pal_end
