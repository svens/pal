#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_datagram_socket
 * Generic datagram-oriented socket
 */

#include <pal/__bits/lib>
#include <pal/net/error>
#include <pal/net/basic_socket>


__pal_begin


namespace net {


/**
 * Datagram socket that can be used to send and receive discrete messages of
 * fixed maximum length.
 */
template <typename Protocol>
class basic_datagram_socket: public basic_socket<Protocol>
{
	using base = basic_socket<Protocol>;

public:

	/// Socket protocol
	using protocol_type = Protocol;

	/// Socket endpoint
	using endpoint_type = typename protocol_type::endpoint;

	/// Native socket handle
	using typename base::native_handle_type;


	/**
	 * Create new unopened socket.
	 */
	basic_datagram_socket () noexcept = default;


	/**
	 * Create new socket, acquiring native_sockte.
	 */
	basic_datagram_socket (const protocol_type &protocol, native_handle_type handle)
		: base(protocol, handle)
	{ }


	/**
	 * Create new socket and open it.
	 */
	basic_datagram_socket (const protocol_type &protocol)
		: base(protocol)
	{ }


	/**
	 * Construct and open new socket. After construction bind to \a
	 * endpoint. On failure, throw std::system_error.
	 */
	basic_datagram_socket (const endpoint_type &endpoint)
		: base(endpoint)
	{ }
};


} // namespace net


__pal_end
