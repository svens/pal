#pragma once // -*- C++ -*-

#include <pal/result>
#include <pal/version>
#include <chrono>

#if __pal_os_linux || __pal_os_macos
	#define __pal_net_posix 1
	#define __pal_net_winsock 0
	#include <poll.h>
	#include <sys/socket.h>
	#include <unistd.h>
#elif __pal_os_windows
	#define __pal_net_posix 0
	#define __pal_net_winsock 1
	#include <winsock2.h>
	#include <mswsock.h>
#endif

namespace pal::net::__socket {

constexpr size_t io_vector_max_size = 4;

#if __pal_net_posix //{{{1

using sa_family = ::sa_family_t;
using timeval = ::timeval;

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &tv) noexcept
{
	return std::chrono::milliseconds{tv.tv_sec * 1000 + tv.tv_usec / 1000};
}

constexpr timeval from_chrono_ms (const std::chrono::milliseconds &ms) noexcept
{
	timeval tv;
	tv.tv_sec = ms.count() / 1000;
	tv.tv_usec = (ms.count() - tv.tv_sec * 1000) * 1000;
	return tv;
}

inline unexpected<std::error_code> sys_error (int e = errno) noexcept
{
	return unexpected<std::error_code>{std::in_place, e, std::generic_category()};
}

#elif __pal_net_winsock //{{{1

using sa_family = ::ADDRESS_FAMILY;
using timeval = ::DWORD;

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &tv) noexcept
{
	return std::chrono::milliseconds{tv};
}

constexpr timeval from_chrono_ms (const std::chrono::milliseconds &ms) noexcept
{
	return static_cast<timeval>(ms.count());
}

inline unexpected<std::error_code> sys_error (int e = ::WSAGetLastError()) noexcept
{
	if (e == WSAENOTSOCK || e == WSA_INVALID_HANDLE)
	{
		// unify with Posix
		e = WSAEBADF;
	}
	return unexpected<std::error_code>{std::in_place, e, std::system_category()};
}

#define SHUT_RD SD_RECEIVE
#define SHUT_WR SD_SEND
#define SHUT_RDWR SD_BOTH

extern ::LPFN_CONNECTEX ConnectEx;
extern ::LPFN_ACCEPTEX AcceptEx;
extern ::LPFN_GETACCEPTEXSOCKADDRS GetAcceptExSockaddrs;

#endif //}}}1

constexpr int reuse_port =
#if defined(SO_REUSEPORT_LB)
	SO_REUSEPORT_LB
#elif defined(SO_REUSEPORT)
	SO_REUSEPORT
#else
	-1
#endif
;

} // namespace pal::net::__socket
