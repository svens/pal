#pragma once // -*- C++ -*-

#include <pal/span>
#include <pal/result>
#include <pal/version>
#include <array>
#include <chrono>

#define __pal_net_posix 0
#define __pal_net_winsock 0

#if __pal_os_linux || __pal_os_macos
	#undef __pal_net_posix
	#define __pal_net_posix 1
	#include <poll.h>
	#include <sys/socket.h>
	#include <unistd.h>
#elif __pal_os_windows
	#undef __pal_net_winsock
	#define __pal_net_winsock 1
	#include <winsock2.h>
	#include <mswsock.h>
#endif

namespace pal::net::__socket {

constexpr size_t io_vector_max_size = 4;

#if __pal_net_posix //{{{1

using handle_type = int;
static constexpr handle_type invalid_handle = -1;

using sa_family = ::sa_family_t;
using timeval = ::timeval;

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &tv) noexcept
{
	return std::chrono::milliseconds{tv.tv_sec * 1000 + tv.tv_usec / 1000};
}

constexpr timeval from_chrono_ms (const std::chrono::milliseconds &ms) noexcept
{
	timeval tv;
	tv.tv_sec = ms.count() / 1000;
	tv.tv_usec = (ms.count() - tv.tv_sec * 1000) * 1000;
	return tv;
}

inline unexpected<std::error_code> sys_error (int e = errno) noexcept
{
	return unexpected<std::error_code>{std::in_place, e, std::generic_category()};
}

struct message: ::msghdr
{
	std::array<::iovec, io_vector_max_size> iov{};

	template <typename SpanSequence>
	bool set (const SpanSequence &spans) noexcept
	{
		msg_iovlen = 0;
		msg_iov = iov.data();
		auto it = span_sequence_begin(spans);
		const auto end = span_sequence_end(spans);
		while (it != end && static_cast<size_t>(msg_iovlen) != iov.size())
		{
			auto &s = *it++;
			iov[msg_iovlen++] =
			{
				.iov_base = const_cast<void *>(static_cast<const void *>(s.data())),
				.iov_len = s.size_bytes(),
			};
		}
		return (it == end && static_cast<size_t>(msg_iovlen) <= iov.size());
	}

	void reset () noexcept
	{
		msg_iovlen = 0;
	}

	void name (const void *name, size_t name_size) noexcept
	{
		msg_name = const_cast<void *>(name);
		msg_namelen = name_size;
	}

	void flags (int flags) noexcept
	{
		msg_flags = flags;
	}
};

#elif __pal_net_winsock //{{{1

using handle_type = ::SOCKET;
static constexpr handle_type invalid_handle = INVALID_SOCKET;

using sa_family = ::ADDRESS_FAMILY;
using timeval = ::DWORD;

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &tv) noexcept
{
	return std::chrono::milliseconds{tv};
}

constexpr timeval from_chrono_ms (const std::chrono::milliseconds &ms) noexcept
{
	return static_cast<timeval>(ms.count());
}

inline unexpected<std::error_code> sys_error (int e = ::WSAGetLastError()) noexcept
{
	if (e == WSAENOTSOCK || e == WSA_INVALID_HANDLE)
	{
		// unify with Posix
		e = WSAEBADF;
	}
	return unexpected<std::error_code>{std::in_place, e, std::system_category()};
}

struct message
{
	sockaddr *msg_name{};
	INT msg_namelen{};
	DWORD msg_flags{};
	DWORD msg_iovlen{};

	union
	{
		std::array<::WSABUF, io_vector_max_size> msg_iov{};
	};

	template <typename SpanSequence>
	bool set (const SpanSequence &spans) noexcept
	{
		msg_iovlen = 0;
		auto it = span_sequence_begin(spans);
		const auto end = span_sequence_end(spans);
		while (it != end && static_cast<size_t>(msg_iovlen) != msg_iov.size())
		{
			auto &s = *it++;
			msg_iov[msg_iovlen++] =
			{
				.len = static_cast<ULONG>(s.size_bytes()),
				.buf = const_cast<CHAR *>(reinterpret_cast<const CHAR *>(s.data())),
			};
		}
		return (it == end && static_cast<size_t>(msg_iovlen) <= msg_iov.size());
	}

	void reset () noexcept
	{
		msg_iovlen = 0;
	}

	void name (const void *name, size_t name_size) noexcept
	{
		msg_name = static_cast<sockaddr *>(const_cast<void *>(name));
		msg_namelen = static_cast<INT>(name_size);
	}

	void flags (int flags) noexcept
	{
		msg_flags = flags;
	}
};

#define SHUT_RD SD_RECEIVE
#define SHUT_WR SD_SEND
#define SHUT_RDWR SD_BOTH

extern ::LPFN_CONNECTEX ConnectEx;
extern ::LPFN_ACCEPTEX AcceptEx;
extern ::LPFN_GETACCEPTEXSOCKADDRS GetAcceptExSockaddrs;

#endif //}}}1

constexpr int reuse_port =
#if defined(SO_REUSEPORT_LB)
	SO_REUSEPORT_LB
#elif defined(SO_REUSEPORT)
	SO_REUSEPORT
#else
	-1
#endif
;

enum option_level: int
{
	lib = -1,
};

enum option_name: int
{
	non_blocking_io,
};

} // namespace pal::net::__socket
