#pragma once // -*- C++ -*-

/**
 * \file pal/net/socket_option
 * Socket options types
 */

#include <pal/net/__socket>
#include <pal/result>
#include <chrono>

namespace pal::net {

/// Socket option storage for type \a T
template <typename T>
struct socket_option_storage
{
public:

	socket_option_storage () noexcept = default;

	/// Construct socket option storage with \a value
	socket_option_storage (int value) noexcept
		: value_{value}
	{ }

	/// Returns current value from socket option storage
	int value () const noexcept
	{
		return value_;
	}

	/// Returns pointer to internal socket options storage
	template <typename Protocol>
	void *data (const Protocol &) noexcept
	{
		return std::addressof(value_);
	}

	/// Returns pointer to internal socket options storage
	template <typename Protocol>
	const void *data (const Protocol &) const noexcept
	{
		return std::addressof(value_);
	}

	/// Returns size of socket option storage (in bytes)
	template <typename Protocol>
	size_t size (const Protocol &) const noexcept
	{
		return sizeof(value_);
	}

	/// Resize socket option storage. This method is no-op and it returns
	/// error if \a size is different from value returned by size().
	template <typename Protocol>
	result<void> resize (const Protocol &, size_t size) noexcept
	{
		if (size == sizeof(value_))
		{
			return {};
		}
		return make_unexpected(std::errc::invalid_argument);
	}

protected:

	T value_{};
};

template <>
struct socket_option_storage<bool>: socket_option_storage<int>
{
public:

	socket_option_storage () noexcept = default;

	explicit socket_option_storage (bool value) noexcept
		: socket_option_storage<int>{value}
	{ }

	bool value () const noexcept
	{
		return socket_option_storage<int>::value_;
	}

	explicit operator bool () const noexcept
	{
		return value();
	}

	bool operator! () const noexcept
	{
		return !value();
	}
};

/// Socket option level
enum socket_option_level: int;

/// Socket option name
enum socket_option_name: int;

/// Generic socket option \a Name of type \a T on \a Level
template <typename T, socket_option_level Level, socket_option_name Name>
struct socket_option: socket_option_storage<T>
{
	using socket_option_storage<T>::socket_option_storage;

	/// Set new \a value for socket option
	socket_option &operator= (const T &value) noexcept
	{
		socket_option_storage<T>::value_ = value;
		return *this;
	}

	/// Returns socket option level
	template <typename Protocol>
	socket_option_level level (const Protocol &) const noexcept
	{
		return Level;
	}

	/// Returns socket option name
	template <typename Protocol>
	socket_option_name name (const Protocol &) const noexcept
	{
		return Name;
	}
};

/// \defgroup socket_option Socket options
/// \{

/// Determines whether socket permits sending broadcast messages, if supported
/// by protocol
using broadcast = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_BROADCAST}
>;

/// Determines whether debugging information is recorded by the underlying
/// protocol.
using debug = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_DEBUG}
>;

/// Determines whether outgoing messages bypass standard routing facilities.
using do_not_route = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_DONTROUTE}
>;

/// Determines whether socket permits sending of keep_alive messages, if
/// supported by the protocol.
using keepalive = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_KEEPALIVE}
>;

/// Determines whether out-of-band data (also known as urgent data) is
/// received inline.
using out_of_band_inline = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_OOBINLINE}
>;

/// Determines whether the validation of endpoints used for binding a socket
/// should allow the reuse of local endpoints, if supported by protocol.
using reuse_address = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_REUSEADDR}
>;

/// Determines whether the validation of ports used for binding a socket
/// should allow the reuse of local port, if supported by protocol.
using reuse_port = socket_option<bool,
      socket_option_level{SOL_SOCKET},
      socket_option_name{__socket::reuse_port}
>;

/// Specify the size of the receive buffer associated with socket.
using receive_buffer_size = socket_option<int,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_RCVBUF}
>;

/// Specifies the minimum number of bytes to process for socket input operations.
using receive_low_watermark = socket_option<int,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_RCVLOWAT}
>;

/// Specify the size of the send buffer associated with socket.
using send_buffer_size = socket_option<int,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_SNDBUF}
>;

/// Specifies the minimum number of bytes to process for socket output operations.
using send_low_watermark = socket_option<int,
      socket_option_level{SOL_SOCKET},
      socket_option_name{SO_SNDLOWAT}
>;

/// Controls behaviour when a socket is closed and unsent data is present.
struct linger: socket_option<::linger, socket_option_level{SOL_SOCKET}, socket_option_name{SO_LINGER}>
{
	linger () noexcept = default;

	/// Construct linger option with enabled() == \a e and timeout() == \a t
	linger (bool e, const std::chrono::seconds &t) noexcept
	{
		enabled(e);
		timeout(t);
	}

	/// Returns true if lingering is enabled
	bool enabled () const noexcept
	{
		return value_.l_onoff;
	}

	/// Sets whether lingering is enabled
	void enabled (bool e) noexcept
	{
		value_.l_onoff = e;
	}

	/// Returns lingering timeout in seconds
	std::chrono::seconds timeout () const noexcept
	{
		return std::chrono::seconds{value_.l_linger};
	}

	/// Sets lingering timeout in seconds
	void timeout (const std::chrono::seconds &t) noexcept
	{
		value_.l_linger = static_cast<decltype(value_.l_linger)>(t.count());
	}
};

/// Timeout for blocking socket I/O calls
template <socket_option_level Level, socket_option_name Name>
struct io_timeout: socket_option<__socket::timeval, Level, Name>
{
	io_timeout () noexcept = default;

	/// Construct io_timeout option with timeout() == \a t
	io_timeout (const std::chrono::milliseconds &t) noexcept
	{
		timeout(t);
	}

	/// Returns timeout in milliseconds
	std::chrono::milliseconds timeout () const noexcept
	{
		return __socket::to_chrono_ms(this->value_);
	}

	/// Set timeout in milliseconds
	void timeout (const std::chrono::milliseconds &t) noexcept
	{
		this->value_ = __socket::from_chrono_ms(t);
	}
};

/// Timeout for blocking socket receive syscalls if there is no incoming data
using receive_timeout = io_timeout<
	socket_option_level{SOL_SOCKET},
	socket_option_name{SO_RCVTIMEO}
>;

/// Timeout for blocking socket send syscalls if there is no room to copy outgoing data
using send_timeout = io_timeout<
	socket_option_level{SOL_SOCKET},
	socket_option_name{SO_SNDTIMEO}
>;

/// \}

} // namespace pal::net
