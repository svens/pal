#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_socket_acceptor
 * Incoming socket connect requests acceptor
 */

#include <pal/net/socket_base>

namespace pal::net {

/// Incoming socket connect requests listener and acceptor
template <typename AcceptableProtocol>
class basic_socket_acceptor: public socket_base
{
public:

	/// Accepted socket protocol type
	using protocol_type = AcceptableProtocol;

	/// Protocol-specific endpoint type
	using endpoint_type = typename AcceptableProtocol::endpoint;

	/// Protocol-specific socket type
	using socket_type = typename AcceptableProtocol::socket;

	/// Return true if internal implementation is in valid state
	explicit operator bool () const noexcept
	{
		return socket_.operator bool();
	}

	/// Return acceptor protocol
	protocol_type protocol () const noexcept
	{
		return protocol_type{socket_->family};
	}

	/// Release internal implementation and return native socket handle
	net::native_socket release () noexcept
	{
		return std::move(socket_);
	}

	/// Return reference of native socket handle
	const net::native_socket &native_socket () const noexcept
	{
		return socket_;
	}

	/// Bind this socket to local \a endpoint
	result<void> bind (const endpoint_type &endpoint) noexcept
	{
		return socket_->bind(endpoint.data(), endpoint.size());
	}

	/// Mark acceptor as ready to accept connections. \a backlog parameter
	/// sets the maximum length for the queue of pending connection
	/// requests
	result<void> listen (int backlog = max_listen_connections) noexcept
	{
		return socket_->listen(backlog);
	}

	/// Extract socket from queue of pending connections of this acceptor.
	/// If there are no pending connections, block until new connection arrives.
	result<socket_type> accept () noexcept
	{
		return socket_->accept(nullptr, nullptr).transform(to_api<socket_type>());
	}

	/// \copydoc accept()
	/// Store newly accepted connection's remote endpoint into \a endpoint
	result<socket_type> accept (endpoint_type &endpoint) noexcept
	{
		auto size = endpoint.capacity();
		return socket_->accept(endpoint.data(), &size).and_then([&](auto &&handle) -> result<socket_type>
		{
			endpoint.resize(size);
			return to_api<socket_type>()(std::move(handle));
		});
	}

	/// Return local endpoint to which this socket is bound
	result<endpoint_type> local_endpoint () const noexcept
	{
		endpoint_type endpoint;
		auto size = endpoint.capacity();
		return socket_->local_endpoint(endpoint.data(), &size).and_then([&]() -> result<endpoint_type>
		{
			endpoint.resize(size);
			return endpoint;
		});
	}

	/// Get socket \a option
	template <typename GettableSocketOption>
	result<void> get_option (GettableSocketOption &option) const noexcept
	{
		return socket_->get_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}

	/// Set socket \a option
	template <typename SettableSocketOption>
	result<void> set_option (const SettableSocketOption &option) noexcept
	{
		return socket_->set_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}

private:

	net::native_socket socket_;

	basic_socket_acceptor (net::native_socket &&socket) noexcept
		: socket_{std::move(socket)}
	{ }

	template <typename P>
	friend constexpr auto socket_base::to_api() noexcept;
};

/// Create new datagram socket of \a AcceptableProtocol
template <typename AcceptableProtocol>
result<basic_socket_acceptor<AcceptableProtocol>> make_socket_acceptor (const AcceptableProtocol &protocol) noexcept
{
	return open(protocol.family(), protocol.type(), protocol.protocol())
		.transform(socket_base::to_api<basic_socket_acceptor<AcceptableProtocol>>())
	;
}

/// Create new socket acceptor of \a Protocol and bind to \a endpoint
template <typename Protocol>
result<basic_socket_acceptor<Protocol>> make_socket_acceptor (
	const Protocol &protocol,
	const typename Protocol::endpoint &endpoint) noexcept
{
	if (auto socket = make_socket_acceptor(protocol); !socket)
	{
		return unexpected{socket.error()};
	}
	else if (auto bind = socket->bind(endpoint); !bind)
	{
		return unexpected{bind.error()};
	}
	else if (auto listen = socket->listen(); !listen)
	{
		return unexpected{listen.error()};
	}
	else
	{
		return socket;
	}
}

} // namespace pal::net
