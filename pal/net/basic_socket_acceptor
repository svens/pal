#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_socket_acceptor
 * Incoming socket connect requests acceptor
 */

#include <pal/__bits/lib>
#include <pal/net/socket_base>
#include <pal/assert>


__pal_begin


namespace net {


/**
 * Incoming socket connect requests listener and acceptor
 */
template <typename AcceptableProtocol>
class basic_socket_acceptor: public socket_base
{
public:

	/// Accepted sockets' protocol type
	using protocol_type = AcceptableProtocol;

	/// Protocol-specific endpoint type
	using endpoint_type = typename AcceptableProtocol::endpoint;

	/// Protocol-specific socket type
	using socket_type = typename AcceptableProtocol::socket;


	/**
	 * \returns true if this acceptor was opened by previous call to open()
	 * or assign().
	 */
	bool is_open () const noexcept
	{
		return acceptor_.is_open();
	}


	/**
	 * Returns socket protocol (has valid value only if is_open()).
	 */
	protocol_type protocol () const noexcept
	{
		return protocol_type{acceptor_.family()};
	}


	/**
	 * Return native acceptor handle.
	 */
	native_handle_type native_handle () const noexcept
	{
		return acceptor_.handle();
	}


	/**
	 * Return native_handle(), setting internal handle to invalid value.
	 */
	native_handle_type release () noexcept
	{
		return acceptor_.release();
	}


	/**
	 * Create new acceptor instance of \a protocol. It is undefined
	 * behaviour to open already opened acceptor.
	 */
	result<void> open (const protocol_type &protocol) noexcept(assert_noexcept)
	{
		pal_assert(!is_open());
		if (auto s = acceptor_.open(protocol.family(), protocol.type(), protocol.protocol()))
		{
			acceptor_ = std::move(*s);
			return {};
		}
		else
		{
			return unexpected{s.error()};
		}
	}


	/**
	 * Set new acceptor \a handle. If this acceptor is already opened, it
	 * is closed before assignment.
	 */
	result<void> assign (const protocol_type &protocol, native_handle_type handle) noexcept
	{
		if (handle != -1)
		{
			return acceptor_.assign(
				protocol.family(),
				protocol.type(),
				protocol.protocol(),
				handle
			);
		}
		else if (acceptor_.is_open())
		{
			return acceptor_.close();
		}
		return {};
	}


	/**
	 * Close acceptor and release associated resources.
	 * TODO: document pending asynchronous operations
	 */
	result<void> close () noexcept(assert_noexcept)
	{
		pal_assert(is_open());
		return acceptor_.close();
	}


	/**
	 * Return locally bound endpoint associated with this socket
	 */
	result<endpoint_type> local_endpoint () const noexcept
	{
		endpoint_type endpoint;
		auto size = endpoint.capacity();
		auto r = acceptor_.local_endpoint(endpoint.data(), &size);
		if (r)
		{
			endpoint.resize(size);
			return endpoint;
		}
		return unexpected{r.error()};
	}


	/**
	 * Bind this socket to local \a endpoint
	 */
	result<void> bind (const endpoint_type &endpoint) noexcept
	{
		return acceptor_.bind(endpoint.data(), endpoint.size());
	}


	/**
	 * Mark acceptor as ready to accept connections. \a backlog parameter
	 * sets the maximum length for the queue of pending connection requests.
	 */
	result<void> listen (int backlog = max_listen_connections) noexcept
	{
		return acceptor_.listen(backlog);
	}


	/**
	 * Extract socket from queue of pending connections of this acceptor.
	 * If there are no pending connections, blocks until new arrives.
	 */
	result<socket_type> accept () noexcept
	{
		return accept(nullptr, nullptr);
	}


	/**
	 * \copydoc accept()
	 * Store newly accepted connections' remote endpoint into \a endpoint.
	 */
	result<socket_type> accept (endpoint_type &endpoint) noexcept
	{
		auto size = endpoint.capacity();
		if (auto socket = accept(endpoint.data(), &size))
		{
			(void)endpoint.resize(size);
			return socket;
		}
		else
		{
			return unexpected{socket.error()};
		}
	}


	/**
	 * Get socket non-blocking mode.
	 */
	result<bool> native_non_blocking () const noexcept
	{
		return acceptor_.native_non_blocking();
	}


	/**
	 * Set socket non-blocking \a mode (true - on, false - off)
	 */
	result<void> native_non_blocking (bool mode) const noexcept
	{
		return acceptor_.native_non_blocking(mode);
	}


	/**
	 * Get acceptor option
	 */
	template <typename GettableSocketOption>
	result<void> get_option (GettableSocketOption &option) const noexcept
	{
		return acceptor_.get_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}


	/**
	 * Set acceptor option
	 */
	template <typename SettableSocketOption>
	result<void> set_option (const SettableSocketOption &option) noexcept
	{
		return acceptor_.set_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}


private:

	__bits::socket acceptor_{};

	result<socket_type> accept (void *endpoint, size_t *endpoint_size) noexcept
	{
		if (auto handle = acceptor_.accept(endpoint, endpoint_size))
		{
			__bits::handle_guard guard{*handle};
			socket_type socket;
			if (auto assign = socket.assign(protocol(), guard.handle))
			{
				guard.release();
				return socket;
			}
			else
			{
				return unexpected{assign.error()};
			}
		}
		else
		{
			return unexpected{handle.error()};
		}
	}
};


/**
 * Create new socket acceptor for \a AcceptableProtocol \a protocol
 */
template <typename AcceptableProtocol>
auto make_socket_acceptor (const AcceptableProtocol &protocol) noexcept
	-> result<basic_socket_acceptor<AcceptableProtocol>>
{
	basic_socket_acceptor<AcceptableProtocol> acceptor;
	if (auto open = acceptor.open(protocol);  !open)
	{
		return unexpected{open.error()};
	}
	return acceptor;
}


/**
 * Create new socket acceptor for \a AcceptableProtocol \a protocol.
 */
template <typename AcceptableProtocol>
auto make_socket_acceptor (const AcceptableProtocol &protocol, const typename AcceptableProtocol::endpoint &endpoint) noexcept
	-> result<basic_socket_acceptor<AcceptableProtocol>>
{
	auto acceptor = make_socket_acceptor(protocol);
	if (!acceptor)
	{
		return unexpected{acceptor.error()};
	}
	else if (auto bind = acceptor->bind(endpoint);  !bind)
	{
		return unexpected{bind.error()};
	}
	else if (auto listen = acceptor->listen();  !listen)
	{
		return unexpected{listen.error()};
	}
	return acceptor;
}


/**
 * Create new socket acceptor for \a AcceptableProtocol \a protocol using
 * existing \a handle.
 */
template <typename AcceptableProtocol>
auto make_socket_acceptor (const AcceptableProtocol &protocol, socket_base::native_handle_type handle) noexcept
	-> result<basic_socket_acceptor<AcceptableProtocol>>
{
	basic_socket_acceptor<AcceptableProtocol> acceptor;
	if (auto assign = acceptor.assign(protocol, handle);  !assign)
	{
		return unexpected{assign.error()};
	}
	return acceptor;
}


} // namespace net


__pal_end
