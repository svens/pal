#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_socket
 * Generic socket base class
 */

#include <pal/__bits/lib>
#include <pal/net/socket_base>
#include <pal/assert>


__pal_begin


namespace net {


/**
 * Base for basic_datagram_socket<Protocol> and basic_stream_socket<Protocol>
 * classes. It provides functionality common for both types of sockets.
 */
template <typename Protocol>
class basic_socket: public socket_base
{
public:

	/// Socket protocol
	using protocol_type = Protocol;


	/// Protocol-specific endpoint type
	using endpoint_type = typename Protocol::endpoint;


	/**
	 * \returns true if this socket was opened by previous call to open()
	 * or assign().
	 */
	bool is_open () const noexcept
	{
		return socket_.is_open();
	}


	/**
	 * Returns socket protocol (has valid value only if is_open()).
	 */
	protocol_type protocol () const noexcept
	{
		return protocol_type{socket_.family()};
	}


	/**
	 * Return native socket handle.
	 */
	native_handle_type native_handle () const noexcept
	{
		return socket_.handle();
	}


	/**
	 * Return native_handle(), setting internal handle to invalid value.
	 */
	native_handle_type release () noexcept
	{
		return socket_.release();
	}


	/**
	 * Create new socket instance of \a protocol. It is undefined
	 * behaviour to open already opened socket.
	 */
	result<void> open (const protocol_type &protocol) noexcept(assert_noexcept)
	{
		pal_assert(!is_open());
		if (auto s = socket_.open(protocol.family(), protocol.type(), protocol.protocol()))
		{
			socket_ = std::move(*s);
			return {};
		}
		else
		{
			return unexpected{s.error()};
		}
	}


	/**
	 * Set new socket \a handle. If this socket is already opened, it is
	 * closed before assignment.
	 */
	result<void> assign (const protocol_type &protocol, native_handle_type handle) noexcept
	{
		if (handle != -1)
		{
			return socket_.assign(
				protocol.family(),
				protocol.type(),
				protocol.protocol(),
				handle
			);
		}
		else if (socket_.is_open())
		{
			return socket_.close();
		}
		return {};
	}


	/**
	 * Close socket and release associated resources.
	 * TODO: document pending asynchronous operations
	 */
	result<void> close () noexcept(assert_noexcept)
	{
		pal_assert(is_open());
		return socket_.close();
	}


	/**
	 * Return number of bytes available that can be read without blocking.
	 * \note MacOS returns number of bytes plus size of source endpoint(s)
	 */
	result<size_t> available () const noexcept
	{
		return socket_.available();
	}


	/**
	 * Return locally bound endpoint associated with this socket
	 */
	result<endpoint_type> local_endpoint () const noexcept
	{
		endpoint_type endpoint;
		auto size = endpoint.capacity();
		auto r = socket_.local_endpoint(endpoint.data(), &size);
		if (r)
		{
			endpoint.resize(size);
			return endpoint;
		}
		return unexpected{r.error()};
	}


	/**
	 * Return remote endpoint associated with this socket
	 */
	result<endpoint_type> remote_endpoint () const noexcept
	{
		endpoint_type endpoint;
		auto size = endpoint.capacity();
		auto r = socket_.remote_endpoint(endpoint.data(), &size);
		if (r)
		{
			endpoint.resize(size);
			return endpoint;
		}
		return unexpected{r.error()};
	}


	/**
	 * Bind this socket to local \a endpoint
	 */
	result<void> bind (const endpoint_type &endpoint) noexcept
	{
		return socket_.bind(endpoint.data(), endpoint.size());
	}


	/**
	 * Connect socket to specified remote \a endpoint
	 */
	result<void> connect (const endpoint_type &endpoint) noexcept
	{
		return socket_.connect(endpoint.data(), endpoint.size());
	}


	/**
	 * Get socket non-blocking mode.
	 */
	result<bool> native_non_blocking () const noexcept
	{
		return socket_.native_non_blocking();
	}


	/**
	 * Set socket non-blocking \a mode (true - on, false - off)
	 */
	result<void> native_non_blocking (bool mode) const noexcept
	{
		return socket_.native_non_blocking(mode);
	}


	/**
	 * Get socket option
	 */
	template <typename GettableSocketOption>
	result<void> get_option (GettableSocketOption &option) const noexcept
	{
		return socket_.get_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}


	/**
	 * Set socket option
	 */
	template <typename SettableSocketOption>
	result<void> set_option (const SettableSocketOption &option) noexcept
	{
		return socket_.set_option(
			option.level(protocol()),
			option.name(protocol()),
			option.data(protocol()),
			option.size(protocol())
		);
	}


protected:

	__bits::socket socket_{};
};


} // namespace net


__pal_end
