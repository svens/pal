#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_socket
 * Generic socket base class
 */

#include <pal/__bits/lib>
#include <pal/net/error>
#include <pal/net/socket_base>
#include <chrono>


__pal_begin


namespace net {


/**
 * Base socket class for basic_datagram_socket<Protocol> and
 * basic_stream_socket<Protocol> class templates. It provides functionality
 * common to both types of socket.
 */
template <typename Protocol>
class basic_socket: public socket_base
{
public:

	/// Socket protocol
	using protocol_type = Protocol;

	/// Socket endpoint
	using endpoint_type = typename protocol_type::endpoint;


	/**
	 * Return native socket handle
	 */
	native_handle_type native_handle () const noexcept
	{
		return socket_.handle;
	}


	/**
	 * Return native_handle(), setting internal handle to invalid value.
	 */
	native_handle_type release () noexcept
	{
		return socket_.reset();
	}


	/**
	 * Return true if this socket was open by previous call to open() or
	 * assign()
	 */
	bool is_open () const noexcept
	{
		return socket_.handle != invalid;
	}


	/**
	 * Create new socket instance of \a protocol. On failure, set \a
	 * error.
	 */
	void open (const protocol_type &protocol, std::error_code &error) noexcept
	{
		if (!is_open())
		{
			do_open(protocol, error);
		}
		else
		{
			error = make_error_code(socket_errc::already_open);
		}
	}


	/**
	 * Create new socket instance of \a protocol. On failure, throw
	 * std::system_error.
	 */
	void open (const protocol_type &protocol)
	{
		open(protocol, throw_on_error("basic_socket::open"));
	}


	/**
	 * Assign previously opened native socket \a handle to this socket
	 * object. On failure, set \a error
	 */
	void assign (const protocol_type &protocol,
		native_handle_type handle,
		std::error_code &error) noexcept
	{
		if (handle == invalid)
		{
			error = make_error_code(std::errc::bad_file_descriptor);
		}
		else if (!is_open())
		{
			socket_.reset(handle);
			protocol_ = protocol;
		}
		else
		{
			error = make_error_code(socket_errc::already_open);
		}
	}


	/**
	 * Assign previously opened native socket \a handle to this socket
	 * object. On failure, throw std::system_error.
	 */
	void assign (const protocol_type &protocol, native_handle_type handle)
	{
		assign(protocol, handle, throw_on_error("basic_socket::assign"));
	}


	/**
	 * Close socket. On failure, set \a error.
	 */
	void close (std::error_code &error) noexcept
	{
		if (is_open())
		{
			socket_.close(error);
		}
		else
		{
			error = make_error_code(std::errc::bad_file_descriptor);
		}
	}


	/**
	 * Close socket. On failure, throw std::system_error.
	 */
	void close ()
	{
		close(throw_on_error("basic_socket::close"));
	}


	/**
	 * Bind this socket to specified local \a endpoint. On failure, set \a error
	 */
	void bind (const endpoint_type &endpoint, std::error_code &error) noexcept
	{
		socket_.bind(endpoint.data(), endpoint.size(), error);
	}


	/**
	 * Bind this socket to specified local \a endpoint. On failure, throw
	 * std::system_error
	 */
	void bind (const endpoint_type &endpoint)
	{
		bind(endpoint, throw_on_error("basic_socket::bind"));
	}


	/**
	 * Connect this socket to specified remote \a endpoint. If socket is
	 * not opened, it will be opened first. On failure set \a error.
	 */
	void connect (const endpoint_type &endpoint, std::error_code &error) noexcept
	{
		if (is_open() || do_open(endpoint.protocol(), error))
		{
			socket_.connect(endpoint.data(), endpoint.size(), error);
		}
	}


	/**
	 * Connect this socket to specified remote \a endpoint. If socket is
	 * not opened, it will be opened first. On failure throw
	 * std::system_error.
	 */
	void connect (const endpoint_type &endpoint)
	{
		connect(endpoint, throw_on_error("basic_socket::connect"));
	}


	/**
	 * Wait socket to be ready to read or write, or to have error
	 * conditions pending. On failure, set \a error.
	 */
	void wait (wait_type what, std::error_code &error) noexcept
	{
		socket_.wait(what, -1, error);
	}


	/**
	 * Wait socket to be ready to read or write, or to have error
	 * conditions pending. On failure, throw std::system_error
	 */
	void wait (wait_type what)
	{
		wait(what, throw_on_error("basic_socket::wait"));
	}


	/**
	 * Wait up to \a timeout socket to be ready to read or write, or to
	 * have error conditions pending. On failure, set \a error.
	 */
	template <typename Rep, typename Period>
	wait_type wait_for (wait_type what,
		const std::chrono::duration<Rep, Period> &timeout,
		std::error_code &error) noexcept
	{
		auto msec = std::chrono::duration_cast<std::chrono::milliseconds>(timeout);
		return socket_.wait(what,
			static_cast<int>(msec.count()),
			error
		);
	}


	/**
	 * Wait up to \a timeout socket to be ready to read or write, or to
	 * have error conditions pending. On failure, throw std::system_error
	 */
	template <typename Rep, typename Period>
	wait_type wait_for (wait_type what,
		const std::chrono::duration<Rep, Period> &timeout)
	{
		return wait_for(what, timeout,
			throw_on_error("basic_socket::wait_for")
		);
	}


	/**
	 * Shuts down all or part of a full-duplex connection for the socket
	 * according to combination of flags \a what. On failure, set \a error
	 */
	void shutdown (shutdown_type what, std::error_code &error) noexcept
	{
		socket_.shutdown(what, error);
	}


	/**
	 * Shuts down all or part of a full-duplex connection for the socket
	 * according to combination of flags \a what. On failure, throw
	 * std::system_error.
	 */
	void shutdown (shutdown_type what)
	{
		socket_.shutdown(what, throw_on_error("basic_socket::shutdown"));
	}


	/**
	 * Determine the locally-bound endpoint associated with the socket. On
	 * failure, set \a error and returned endpoint value is undefined.
	 */
	endpoint_type local_endpoint (std::error_code &error) const noexcept
	{
		endpoint_type endpoint;
		size_t size = endpoint.capacity();
		socket_.local_endpoint(protocol_.family(), endpoint.data(), &size, error);
		if (!error)
		{
			endpoint.resize(size, error);
		}
		return endpoint;
	}


	/**
	 * Determine the locally-bound endpoint associated with the socket. On
	 * failure, throw std::system_error.
	 */
	endpoint_type local_endpoint () const
	{
		return local_endpoint(throw_on_error("basic_socket::local_endpoint"));
	}


	/**
	 * Determine the remote endpoint associated with the socket. On
	 * failure, set \a error and returned endpoint value is undefined.
	 */
	endpoint_type remote_endpoint (std::error_code &error) const noexcept
	{
		endpoint_type endpoint;
		size_t size = endpoint.capacity();
		socket_.remote_endpoint(endpoint.data(), &size, error);
		if (!error)
		{
			endpoint.resize(size, error);
		}
		return endpoint;
	}


	/**
	 * Determine the remote endpoint associated with the socket. On
	 * failure, throw std::system_error.
	 */
	endpoint_type remote_endpoint () const
	{
		return remote_endpoint(throw_on_error("basic_socket::remote_endpoint"));
	}


	/**
	 * Returns number of bytes that may be read without blocking. On
	 * failure, set \a error and returned value is undefined.
	 */
	size_t available (std::error_code &error) const noexcept
	{
		return socket_.available(error);
	}


	/**
	 * Returns number of bytes that may be read without blocking. On
	 * failure, throw std::system_error.
	 */
	size_t available () const
	{
		return available(throw_on_error("basic_socket::available"));
	}


	/**
	 * Get socket non-blocking mode. This setting is cached ie if it is
	 * changed externally, library may return incorrect value.
	 * On failure, set \a error.
	 */
	bool native_non_blocking (std::error_code &error) noexcept
	{
		return socket_.native_non_blocking(error);
	}


	/**
	 * Get socket non-blocking mode. This setting is cached ie if it is
	 * changed externally, library may return incorrect value.
	 * On failure, throw std::system_error.
	 */
	bool native_non_blocking ()
	{
		return native_non_blocking(
			throw_on_error("basic_socket::native_non_blocking")
		);
	}


	/**
	 * Set socket non-blocking \a mode. On failure, set \a error.
	 */
	void native_non_blocking (bool mode, std::error_code &error) noexcept
	{
		socket_.native_non_blocking(mode, error);
	}


	/**
	 * Set socket non-blocking \a mode. On failure, throw std::system_error.
	 */
	void native_non_blocking (bool mode)
	{
		native_non_blocking(mode,
			throw_on_error("basic_socket::native_non_blocking")
		);
	}


	/**
	 * Get socket \a option. On failure, set \a error.
	 */
	template <typename GettableSocketOption>
	void get_option (GettableSocketOption &option, std::error_code &error) const noexcept
	{
		auto size = socket_.get_option(
			option.level(protocol_),
			option.name(protocol_),
			option.data(protocol_),
			option.size(protocol_),
			error
		);
		if (!error)
		{
			option.resize(protocol_, size, error);
		}
	}


	/**
	 * Get socket \a option. On failure, throw std::system_error.
	 */
	template <typename GettableSocketOption>
	void get_option (GettableSocketOption &option) const
	{
		get_option(option, throw_on_error("basic_socket::get_option"));
	}


	/**
	 * Set socket \a option. On failure, set \a error.
	 */
	template <typename SettableSocketOption>
	void set_option (const SettableSocketOption &option, std::error_code &error) noexcept
	{
		socket_.set_option(
			option.level(protocol_),
			option.name(protocol_),
			option.data(protocol_),
			option.size(protocol_),
			error
		);
	}


	/**
	 * Set socket \a option. On failure, throw std::system_error.
	 */
	template <typename SettableSocketOption>
	void set_option (const SettableSocketOption &option)
	{
		set_option(option, throw_on_error("basic_socket::set_option"));
	}


protected:

	__bits::socket socket_{};
	protocol_type protocol_{endpoint_type{}.protocol()};


	basic_socket () noexcept = default;
	basic_socket (basic_socket &&) noexcept = default;
	basic_socket &operator= (basic_socket &&) noexcept = default;
	~basic_socket () = default;


	basic_socket (const protocol_type &protocol, native_handle_type handle)
	{
		assign(protocol, handle);
	}


	basic_socket (const protocol_type &protocol)
	{
		open(protocol);
	}


	basic_socket (const endpoint_type &endpoint)
		: basic_socket(endpoint.protocol())
	{
		bind(endpoint);
	}


private:

	bool do_open (const protocol_type &protocol, std::error_code &error) noexcept
	{
		socket_ = __bits::socket::open(
			protocol.family(),
			protocol.type(),
			protocol.protocol(),
			error
		);
		protocol_ = protocol;
		return socket_.handle != invalid;
	}
};


} // namespace net


__pal_end
