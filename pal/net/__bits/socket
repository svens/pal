#pragma once // -*- C++ -*-

#include <pal/__bits/lib>
#include <system_error>
#include <utility>

#if __pal_os_linux || __pal_os_macos
	#include <arpa/inet.h>
	#include <sys/socket.h>
#elif __pal_os_windows
	#include <winsock2.h>
	#include <mswsock.h>
	#pragma comment(lib, "ws2_32")
#endif


__pal_begin


namespace net::__bits {


const std::error_code &init () noexcept;


#if __pal_os_linux || __pal_os_macos //{{{1

using native_socket = int;
static constexpr native_socket invalid_native_socket = -1;

using sa_family = ::sa_family_t;
using message_flags = int;

#elif __pal_os_windows //{{{1

using native_socket = SOCKET;
static constexpr native_socket invalid_native_socket = INVALID_SOCKET;

using socklen_t = int;
using sa_family = ::ADDRESS_FAMILY;
using message_flags = DWORD;

constexpr auto SHUT_RD = SD_RECEIVE;
constexpr auto SHUT_WR = SD_SEND;
constexpr auto SHUT_RDWR = SD_BOTH;

#endif //}}}1


enum class shutdown
{
	receive = SHUT_RD,
	send = SHUT_WR,
	both = SHUT_RDWR,
};


enum class wait
{
	read,
	write,
};


struct socket
{
	native_socket handle = invalid_native_socket;

	socket () = default;

	socket (const socket &) = delete;
	socket &operator= (const socket &) = delete;

	socket (native_socket handle) noexcept
		: handle{handle}
	{ }

	socket (socket &&that) noexcept
		: handle{std::exchange(that.handle, invalid_native_socket)}
	{ }

	~socket () noexcept
	{
		if (handle != invalid_native_socket)
		{
			std::error_code ignore_error;
			close(ignore_error);
		}
	}

	socket &operator= (socket &&that) noexcept
	{
		auto tmp{std::move(that)};
		swap(tmp);
		return *this;
	}

	void swap (socket &that) noexcept
	{
		using std::swap;
		swap(handle, that.handle);
	}

	static socket open (
		int domain,
		int type,
		int protocol,
		std::error_code &error
	) noexcept;

	void close (std::error_code &error) noexcept;

	void bind (
		const void *endpoint,
		size_t endpoint_size,
		std::error_code &error
	) noexcept;
};


} // namespace net::__bits


__pal_end
