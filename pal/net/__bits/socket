#pragma once // -*- C++ -*-

#include <pal/__bits/lib>
#include <pal/result>
#include <pal/span>
#include <array>
#include <chrono>
#include <memory>

#if __pal_os_linux || __pal_os_macos
	#include <netinet/in.h>
	#include <netinet/tcp.h>
	#include <poll.h>
	#include <sys/socket.h>
	#include <sys/time.h>
#elif __pal_os_windows
	#include <winsock2.h>
	#include <ws2ipdef.h>
	#include <mswsock.h>
#endif


__pal_begin


namespace net::async {
class request;
struct receive_from;
struct receive;
struct send_to;
struct send;
struct connect;
struct accept;
} // namespace net::async


namespace net::__bits {


const result<void> &init () noexcept;


constexpr size_t iov_max_size = 4;


#if __pal_os_linux || __pal_os_macos //{{{1

using native_socket = int;
constexpr native_socket invalid_native_socket = -1;

using sa_family = ::sa_family_t;
using message_flags = int;
using timeval = ::timeval;

struct message: ::msghdr
{
	std::array<::iovec, iov_max_size> iov{};

	template <typename SpanSequence>
	bool set (const SpanSequence &spans, std::error_code &error) noexcept
	{
		msg_iovlen = 0;
		msg_iov = iov.data();
		auto it = span_sequence_begin(spans);
		const auto end = span_sequence_end(spans);
		while (it != end && static_cast<size_t>(msg_iovlen) != iov.size())
		{
			auto &v = iov[msg_iovlen++];
			auto &s = *it++;
			v.iov_base = const_cast<void *>(static_cast<const void *>(s.data()));
			v.iov_len = s.size_bytes();
		}

		if (it == end && static_cast<size_t>(msg_iovlen) <= iov.size())
		{
			error.clear();
			return true;
		}
		else
		{
			error = std::make_error_code(std::errc::argument_list_too_long);
			return false;
		}
	}

	bool reset (std::error_code &error) noexcept
	{
		msg_iovlen = 0;
		error.clear();
		return true;
	}

	void name (const void *name, size_t name_size) noexcept
	{
		msg_name = const_cast<void *>(name);
		msg_namelen = name_size;
	}

	void flags (message_flags flags) noexcept
	{
		msg_flags = flags;
	}
};

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &tv)
{
	return std::chrono::milliseconds{tv.tv_sec * 1000 + tv.tv_usec / 1000};
}

constexpr void from_chrono_ms (timeval &tv, const std::chrono::milliseconds &t)
{
	tv.tv_sec = t.count() / 1000;
	tv.tv_usec = (t.count() - tv.tv_sec * 1000) * 1000;
}

#elif __pal_os_windows //{{{1

using native_socket = SOCKET;
constexpr native_socket invalid_native_socket = INVALID_SOCKET;

using sa_family = ::ADDRESS_FAMILY;
using message_flags = ::DWORD;
using timeval = ::DWORD;

struct message
{
	sockaddr *msg_name{};
	INT msg_namelen{};
	message_flags msg_flags{};
	DWORD msg_iovlen{};

	// struct packing for Windows:
	// - vectored I/O uses msg_iov
	// - async AcceptEx / GetAcceptExSockaddrs use accept[]
	union
	{
		std::array<::WSABUF, iov_max_size> msg_iov{};
		char accept[sizeof(::sockaddr_in6) + 16];
	};

	template <typename SpanSequence>
	bool set (const SpanSequence &spans, std::error_code &error) noexcept
	{
		msg_iovlen = 0;
		auto it = span_sequence_begin(spans);
		const auto end = span_sequence_end(spans);
		while (it != end && static_cast<size_t>(msg_iovlen) != msg_iov.size())
		{
			auto &v = msg_iov[msg_iovlen++];
			auto &s = *it++;
			v.buf = const_cast<CHAR *>(s.data());
			v.len = static_cast<ULONG>(s.size_bytes());
		}

		if (it == end && static_cast<size_t>(msg_iovlen) <= msg_iov.size())
		{
			error.clear();
			return true;
		}
		else
		{
			error = std::make_error_code(std::errc::argument_list_too_long);
			return false;
		}
	}

	bool reset (std::error_code &error) noexcept
	{
		msg_iovlen = 0;
		error.clear();
		return true;
	}

	void name (const void *name, size_t name_size) noexcept
	{
		msg_name = static_cast<sockaddr *>(const_cast<void *>(name));
		msg_namelen = static_cast<INT>(name_size);
	}

	void flags (message_flags flags) noexcept
	{
		msg_flags = flags;
	}
};

constexpr std::chrono::milliseconds to_chrono_ms (const timeval &t)
{
	return std::chrono::milliseconds{t};
}

constexpr void from_chrono_ms (timeval &t, const std::chrono::milliseconds &v)
{
	t = static_cast<timeval>(v.count());
}

constexpr auto SHUT_RD = SD_RECEIVE;
constexpr auto SHUT_WR = SD_SEND;
constexpr auto SHUT_RDWR = SD_BOTH;

extern ::LPFN_CONNECTEX ConnectEx;
extern ::LPFN_ACCEPTEX AcceptEx;
extern ::LPFN_GETACCEPTEXSOCKADDRS GetAcceptExSockaddrs;

#endif //}}}1


constexpr int reuse_port =
#if defined(SO_REUSEPORT_LB)
	SO_REUSEPORT_LB
#elif defined(SO_REUSEPORT)
	SO_REUSEPORT
#else
	-1
#endif
;


enum class shutdown_type
{
	receive = SHUT_RD,
	send = SHUT_WR,
	both = SHUT_RDWR,
};


enum class wait_type: int
{
	read = POLLIN,
	write = POLLOUT,
	error = POLLERR,
};


result<void> close_handle (native_socket handle) noexcept;


template <typename Request>
async::request *owner_of (Request &request) noexcept
{
	// relying on assumption std::variant contained value is at same
	// address as instance itself
	return reinterpret_cast<async::request *>(&request);
}


struct handle_guard
{
	native_socket handle;

	handle_guard (native_socket handle) noexcept
		: handle{handle}
	{ }

	~handle_guard () noexcept
	{
		if (handle != invalid_native_socket)
		{
			(void)close_handle(handle);
		}
	}

	native_socket release () noexcept
	{
		return std::exchange(handle, invalid_native_socket);
	}
};


struct socket
{
	struct impl_type;
	using impl_ptr = std::unique_ptr<impl_type>;
	impl_ptr impl;

	socket () noexcept;
	socket (impl_ptr impl) noexcept;

	socket (socket &&) noexcept;
	socket &operator= (socket &&) noexcept;
	~socket () noexcept;

	socket (const socket &) = delete;
	socket &operator= (const socket &) = delete;

	bool is_open () const noexcept
	{
		return impl.get() != nullptr;
	}

	native_socket handle () const noexcept;
	native_socket release () noexcept;

	int family () const noexcept;

	static result<socket> open (bool is_acceptor, int family, int type, int protocol) noexcept;
	result<void> assign (bool is_acceptor, int family, int type, int protocol, native_socket handle) noexcept;
	result<void> close () noexcept;

	result<void> bind (const void *endpoint, size_t endpoint_size) noexcept;
	result<void> listen (int backlog) noexcept;

	result<native_socket> accept (void *endpoint, size_t *endpoint_size) noexcept;
	result<void> connect (const void *endpoint, size_t endpoint_size) noexcept;

	result<size_t> receive (message &msg) noexcept;
	result<size_t> send (const message &msg) noexcept;

	result<size_t> available () const noexcept;
	result<void> local_endpoint (void *endpoint, size_t *endpoint_size) const noexcept;
	result<void> remote_endpoint (void *endpoint, size_t *endpoint_size) const noexcept;
	result<bool> native_non_blocking () const noexcept;
	result<void> native_non_blocking (bool mode) const noexcept;
	result<void> get_option (int level, int name, void *data, size_t data_size) const noexcept;
	result<void> set_option (int level, int name, const void *data, size_t data_size) noexcept;

	bool has_async () const noexcept;
	void start (async::receive_from &receive_from) noexcept;
	void start (async::receive &receive) noexcept;
	void start (async::send_to &send_to) noexcept;
	void start (async::send &send) noexcept;
	void start (async::connect &connect) noexcept;
	void start (async::accept &accept) noexcept;
};


struct service
{
	static constexpr size_t max_poll_events = 256;

	struct impl_type;
	std::unique_ptr<impl_type> impl;

	service (std::error_code &error) noexcept;
	service (service &&) noexcept;
	service &operator= (service &&) noexcept;
	~service () noexcept;

	service (const service &) = delete;
	service &operator= (const service &) = delete;

	result<void> add (__bits::socket &socket) noexcept;

	using notify_fn = void(*)(void *handler, async::request *request) noexcept;

	void poll_for (
		const std::chrono::milliseconds &duration,
		notify_fn notify,
		void *handler
	) noexcept;
};


} // namespace net::__bits


__pal_end
