#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_stream_socket
 * Generic stream-oriented socket
 */

#include <pal/__bits/lib>
#include <pal/net/basic_socket>
#include <pal/net/error>


__pal_begin


namespace net {


/**
 * Stream socket that can be used to exchange data with peer over a sequenced,
 * reliable, bidirectional, connection-oriented byte stream.
 */
template <typename Protocol>
class basic_stream_socket: public basic_socket<Protocol>
{
	using base = basic_socket<Protocol>;

public:

	/// Socket protocol
	using protocol_type = Protocol;

	/// Socket endpoint
	using endpoint_type = typename protocol_type::endpoint;

	/// Native socket handle
	using typename base::native_handle_type;


	/**
	 * Create new unopened socket.
	 */
	basic_stream_socket () noexcept = default;


	/**
	 * Create new socket, acquiring native_sockte.
	 */
	basic_stream_socket (const protocol_type &protocol, native_handle_type handle)
		: base(protocol, handle)
	{ }


	/**
	 * Create new socket and open it.
	 */
	basic_stream_socket (const protocol_type &protocol)
		: base(protocol)
	{ }


	/**
	 * Construct and open new socket. After construction bind to
	 * \a endpoint. On failure, throw std::system_error.
	 */
	basic_stream_socket (const endpoint_type &endpoint)
		: base(endpoint)
	{ }


	//
	// receive
	//


	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received. On failure, set \a error and return value is undefined.
	 */
	template <typename MutableSpanSequence>
	size_t receive (const MutableSpanSequence &spans,
		socket_base::message_flags flags,
		std::error_code &error) noexcept
	{
		__bits::message message(spans);
		if (message.msg_size > 0)
		{
			return base::socket_.receive(message, flags, error);
		}
		error.clear();
		return 0;
	}


	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received. On failure, throw std::system_error.
	 */
	template <typename MutableSpanSequence>
	size_t receive (const MutableSpanSequence &spans,
		socket_base::message_flags flags)
	{
		return receive(spans, flags,
			throw_on_error("basic_datagram_socket::receive")
		);
	}


	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received. On failure, set \a error and return value is undefined.
	 */
	template <typename MutableSpanSequence>
	size_t receive (const MutableSpanSequence &spans,
		std::error_code &error) noexcept
	{
		return receive(spans, socket_base::message_flags{}, error);
	}


	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received. On failure, throw std::system_error.
	 */
	template <typename MutableSpanSequence>
	size_t receive (const MutableSpanSequence &spans)
	{
		return receive(spans, socket_base::message_flags{});
	}


	//
	// send
	//


	/**
	 * Send data from \a spans using this socket. Returns number of
	 * bytes sent. On failure set \a std::error and return value is
	 * undefined.
	 */
	template <typename ConstSpanSequence>
	size_t send (const ConstSpanSequence &spans,
		socket_base::message_flags flags,
		std::error_code &error) noexcept
	{
		__bits::message message(spans);
		if (message.msg_size > 0)
		{
			return base::socket_.send(message, flags, error);
		}
		error.clear();
		return 0;
	}


	/**
	 * Send data from \a spans using this socket. Returns number of
	 * bytes sent. On failure throw std::system_error.
	 */
	template <typename ConstSpanSequence>
	size_t send (const ConstSpanSequence &spans,
		socket_base::message_flags flags)
	{
		return send(spans, flags,
			throw_on_error("basic_datagram_socket::send")
		);
	}


	/**
	 * Send data from \a spans using this socket. Returns number of
	 * bytes sent. On failure set \a std::error and return value is
	 * undefined.
	 */
	template <typename ConstSpanSequence>
	size_t send (const ConstSpanSequence &spans,
		std::error_code &error) noexcept
	{
		return send(spans, socket_base::message_flags{}, error);
	}


	/**
	 * Send data from \a spans using this socket. Returns number of
	 * bytes sent. On failure throw std::system_error.
	 */
	template <typename ConstSpanSequence>
	size_t send (const ConstSpanSequence &spans)
	{
		return send(spans, socket_base::message_flags{});
	}
};


} // namespace net


__pal_end
