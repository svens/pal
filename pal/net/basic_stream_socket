#pragma once // -*- C++ -*-

/**
 * \file pal/net/basic_stream_socket
 * Generic stream-oriented socket
 */

#include <pal/__bits/lib>
#include <pal/net/basic_socket>


__pal_begin


namespace net {


/**
 * Stream socket that can be used to exchange data with peer over a sequenced,
 * reliable, bidirectional connection-oriented byte stream.
 */
template <typename Protocol>
class basic_stream_socket: public basic_socket<Protocol>
{
	using base = basic_socket<Protocol>;

public:

	using typename basic_socket<Protocol>::protocol_type;
	using typename basic_socket<Protocol>::endpoint_type;

	//
	// Synchronous API
	//

	/**
	 * Read data from socket into \a spans. Returns number of bytes
	 * received.
	 */
	template <typename MutableSpanSequence>
	result<size_t> receive (const MutableSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		__bits::message message;
		if (message.set(spans))
		{
			message.msg_flags = flags;
			return base::socket_.receive(message);
		}
		return make_unexpected(std::errc::argument_list_too_long);
	}


	/**
	 * Send data in \a spans using this socket. Returns number of bytes
	 * sent.
	 */
	template <typename ConstSpanSequence>
	result<size_t> send (const ConstSpanSequence &spans,
		socket_base::message_flags flags = 0) noexcept
	{
		__bits::message message;
		if (message.set(spans))
		{
			message.msg_flags = flags;
			return base::socket_.send(message);
		}
		return make_unexpected(std::errc::argument_list_too_long);
	}


private:

	using basic_socket<Protocol>::basic_socket;
};


/**
 * Create new stream socket of \a protocol.
 */
template <typename Protocol>
auto make_stream_socket (const Protocol &protocol) noexcept
	-> result<basic_stream_socket<Protocol>>
{
	basic_stream_socket<Protocol> socket;
	if (auto open = socket.open(protocol);  !open)
	{
		return unexpected{open.error()};
	}
	return socket;
}


/**
 * Create new stream socket of \a protocol and \a bind to \a endpoint.
 */
template <typename Protocol>
auto make_stream_socket (const Protocol &protocol, const typename Protocol::endpoint &endpoint) noexcept
	-> result<basic_stream_socket<Protocol>>
{
	auto socket = make_stream_socket(protocol);
	if (!socket)
	{
		return unexpected{socket.error()};
	}
	else if (auto bind = socket->bind(endpoint);  !bind)
	{
		return unexpected{bind.error()};
	}
	return socket;
}


/**
 * Create new stream socket of \a protocol from existing \a handle.
 */
template <typename Protocol>
auto make_stream_socket (const Protocol &protocol, socket_base::native_handle_type handle) noexcept
	-> result<basic_stream_socket<Protocol>>
{
	basic_stream_socket<Protocol> socket;
	if (auto assign = socket.assign(protocol, handle);  !assign)
	{
		return unexpected{assign.error()};
	}
	return socket;
}


} // namespace net


__pal_end
