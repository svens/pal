#pragma once // -*- C++ -*-

/**
 * \file pal/net/async/request
 * Generic asynchronous request
 */


#include <pal/__bits/lib>
#include <pal/intrusive_queue>
#include <pal/net/socket_base>

#if __pal_os_windows
	#include <ws2ipdef.h>
#endif


__pal_begin


namespace net::async {


/// Type denoting generic request is holding no specific request
using no_request = std::monostate;


/**
 * Result of Socket::async_send_to() request
 */
struct send_to
{
	/// Number of bytes sent
	size_t bytes_transferred = 0;
};


/**
 * Result of Socket::async_receive_from() request
 */
struct receive_from
{
	/// Number of bytes received
	size_t bytes_transferred = 0;

	/// Flags for received message
	socket_base::message_flags flags = {};
};


/**
 * Result of Socket::async_send() request
 */
struct send
{
	/// Number of bytes sent
	size_t bytes_transferred = 0;
};


/**
 * Result of Socket::async_receive() request
 */
struct receive
{
	/// Number of bytes sent
	size_t bytes_transferred = 0;

	/// Flags for received message
	socket_base::message_flags flags = {};
};


/**
 * Result of Socket::async_connect() request
 */
struct connect
{ };


/**
 * Result of Acceptor::async_accept() request
 */
struct accept
{
	// TODO
};


/**
 * General purpose message for application layer that can post messages
 * directly to async::io_service completion list.
 */
struct message
{
	/// Opaque storage for application usage.
	char data[(std::max)({
		sizeof(send_to),
		sizeof(receive_from),
		sizeof(send),
		sizeof(receive),
		sizeof(connect),
		sizeof(accept),
	})];
};


/**
 * Base class for generic asynchronous request
 */
using request_variant = std::variant<
	no_request,
	message,
	send_to,
	receive_from,
	send,
	receive,
	connect,
	accept
>;


/**
 * Generic asynchronous request capable holding specific asynchronous requests
 * data structure and result after completion.
 */
class request: public request_variant
{
public:

	using request_variant::request_variant;
	using request_variant::operator=;


	/**
	 * Get result after asynchronous operation completion. On success,
	 * error is cleared.
	 */
	const std::error_code &error () const noexcept
	{
		return error_;
	}


private:

	std::error_code error_{};

	// active member depends on request ownership:
	// - OS: overlapped_ (Windows)
	// - library: pending_ (Linux/MacOS)
	// - application: completed_ or none
	union
	{
		intrusive_queue_hook<request> completed_{}, pending_;
		#if __pal_os_windows
			::WSAOVERLAPPED overlapped_;
		#endif
	};

	// in-progress request data
	union
	{
		bool init{};
		__bits::message message;
		std::chrono::steady_clock::time_point post_time;
		#if __pal_os_windows
			char accept[sizeof(::sockaddr_in6) + 16];
		#endif
	} service_{};

	using pending_queue = intrusive_queue<&request::pending_>;

	template <typename> friend class service;

public:

	/**
	 * Ordered queue of completed requests.
	 */
	using completion_queue = intrusive_queue<&request::completed_>;
};


/// \copydoc pal::net::async::request::completion_queue
using completion_queue = request::completion_queue;


} // namespace net::async


__pal_end


#if __cpp_lib_variant < 202102L

//
// Here be dragons
//
// https://github.com/cplusplus/papers/issues/873
// std::variant proposal had oversight for std::visit for types *inherited*
// from std::variant (as opposed *being* std::variant)
//
// TODO: drop once fixed in supported STL implementations:
// - MS STL: ok (except variant_size/variant_alternative)
// - Apple libc++: ok
// - GNU libstdc++: not ok
//

namespace std {

template <>
struct variant_size<pal::net::async::request>
	: variant_size<pal::net::async::request_variant>
{ };

template <size_t _1>
struct variant_alternative<_1, pal::net::async::request>
	: variant_alternative<_1, pal::net::async::request_variant>
{ };

#if __GNUC__ >= 9 || (__clang_major__ >= 9 && !__apple_build_version__)

// Extra ugly, specialization into g++ internals :(
//
// In general, variant_size & variant_alternative specializations should be
// sufficient but libstdc++ has lookup-table based std::visit()
// implementation that needs this
namespace __detail::__variant {

template <typename _1>
struct _Extra_visit_slot_needed<_1, pal::net::async::request>
	: _Extra_visit_slot_needed<_1, pal::net::async::request_variant>
{ };

template <typename _1>
struct _Extra_visit_slot_needed<_1, pal::net::async::request &>
	: _Extra_visit_slot_needed<_1, pal::net::async::request_variant &>
{ };

} // namespace __detail::__variant

#endif // __GNUC__ >= 9 || (__clang_major__ >= 9 && !__apple_build_version__)

} // namespace std

#endif // __cpp_lib_variant < 202102L
