#pragma once // -*- C++ -*-

/**
 * \file pal/net/socket_base
 * Base socket types and values
 */

#include <pal/net/__socket>
#include <memory>

namespace pal::net {

/// Initialize networking library. There is no need to call it explicitly as
/// it is also invoked internally by static initialization. Possible exception
/// is when application layer own static initialization order depends on winsock
/// library being loaded. It can be safely called multiple times.
const result<void> &init () noexcept;

/// Wrapper for native socket handle. If application logic requires holding
/// native socket, use native_socket instead that wraps native_socket_handle
/// to std::unique_ptr to ensure closing handle when going out of scope.
///
/// \note Do not instantiate of this class directly, fetch native socket only
/// if library does not provide typesafe wrapper for native OS socket API.
struct native_socket_handle
{
	/// Native OS socket handle type
	using value_type = __socket::handle_type;

	/// Invalid OS socket handle instance. It represents uninitialised socket
	static constexpr value_type invalid = __socket::invalid_handle;

	/// Native OS socket handle instance
	value_type handle = invalid;

	/// Socket family (valid only if handle is initialized)
	int family = 0;

	constexpr native_socket_handle () = default;

	/// Construct uninitialised native_socket_handle instance
	constexpr native_socket_handle (std::nullptr_t) noexcept
	{ }

	/// Construct native_socket_handle from native OS \a handle
	constexpr native_socket_handle (value_type handle, int family) noexcept
		: handle{handle}
		, family{family}
	{ }

	/// Returns true if \a handle is initialised.
	constexpr explicit operator bool () const noexcept
	{
		return handle != invalid;
	}

	/// Represent this instance as fancy pointer
	constexpr native_socket_handle *operator-> () noexcept
	{
		return this;
	}

	/// Represent this instance as fancy pointer
	constexpr const native_socket_handle *operator-> () const noexcept
	{
		return this;
	}

	constexpr auto operator<=> (const native_socket_handle &) const noexcept = default;

	result<void> bind (const void *endpoint, size_t endpoint_size) const noexcept;
	result<void> listen (int backlog) const noexcept;
	result<native_socket_handle> accept (void *endpoint, size_t *endpoint_size) const noexcept;
	result<void> connect (const void *endpoint, size_t endpoint_size) const noexcept;
	result<void> shutdown (int what) const noexcept;
	result<size_t> available () const noexcept;

	result<void> local_endpoint (void *endpoint, size_t *endpoint_size) const noexcept;
	result<void> remote_endpoint (void *endpoint, size_t *endpoint_size) const noexcept;

	result<void> get_option (int level, int name, void *data, size_t data_size) const noexcept;
	result<void> set_option (int level, int name, const void *data, size_t data_size) const noexcept;

	struct close
	{
		using pointer = native_socket_handle;
		void operator() (pointer socket) const noexcept;
	};
};

/// Wrap native_socket_handle to std::unique_ptr
using native_socket = std::unique_ptr<native_socket_handle, native_socket_handle::close>;

/// Open and return new native socket
result<native_socket> open (int family, int type, int protocol) noexcept;

/// Common socket types and constants
class socket_base
{
public:

	/// Bitmask flags for send/receive operations
	enum message_flags: int
	{
		/// Peek at incoming message, without removing it from queue
		message_peek = MSG_PEEK,

		/// Process out-of-band data
		message_out_of_band = MSG_OOB,

		/// Bypass routing, use direct interface
		message_do_not_route = MSG_DONTROUTE,

		/// Received message was truncated because receive buffer was too small
		message_truncated = MSG_TRUNC,
	};

	/// Socket state change waiting types
	enum wait_type: int
	{
		/// Wait for socket to become readable
		wait_read = POLLIN,

		/// Wait for socket to become writable
		wait_write = POLLOUT,

		/// Wait until socket has pending error condition
		wait_error = POLLERR,
	};

	/// Socket shutdown types
	enum shutdown_type: int
	{
		/// Disable further receive operations
		shutdown_receive = SHUT_RD,

		/// Disable further send operations
		shutdown_send = SHUT_WR,

		/// Disable further send/receive operations
		shutdown_both = SHUT_RDWR,
	};

	/// Limit on length of queue of pending incoming connections
	static constexpr int max_listen_connections = SOMAXCONN;

	/// Maximum number of spans for vectored I/O
	static constexpr size_t io_vector_max_size = __socket::io_vector_max_size;

	/// \internal
	///
	/// Return lambda that wraps socket implementation to public API class
	template <typename Socket>
	static constexpr auto to_api () noexcept
	{
		return [](auto &&socket)
		{
			return Socket{std::move(socket)};
		};
	}

protected:

	~socket_base () = default;
};

} // namespace pal::net
