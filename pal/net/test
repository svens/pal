#pragma once // -*- C++ -*-

#include <pal/test>
#include <type_traits>


namespace pal_test {


struct tcp_v4
{
	static constexpr auto protocol_v = 1;
};


struct udp_v4
{
	static constexpr auto protocol_v = 2;
};


struct tcp_v6
{
	static constexpr auto protocol_v = 3;
};


struct udp_v6
{
	static constexpr auto protocol_v = 4;
};


struct tcp_v6_only: tcp_v6
{
};


struct udp_v6_only: udp_v6
{
};


using protocol_types = std::tuple<tcp_v4, udp_v4, tcp_v6, udp_v6, tcp_v6_only, udp_v6_only>;
using stream_protocol_types = std::tuple<tcp_v4, tcp_v6, tcp_v6_only>;
using datagram_protocol_types = std::tuple<udp_v4, udp_v6, udp_v6_only>;


template <typename T>
constexpr bool is_tcp_v = false
	|| std::is_same_v<T, tcp_v4>
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, tcp_v6_only>
;


template <typename T>
constexpr bool is_udp_v = false
	|| std::is_same_v<T, udp_v4>
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, udp_v6_only>
;


template <typename T>
constexpr bool is_v4_v = false
	|| std::is_same_v<T, tcp_v4>
	|| std::is_same_v<T, udp_v4>
;


template <typename T>
constexpr bool is_v6_v = false
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, tcp_v6_only>
	|| std::is_same_v<T, udp_v6_only>
;


} // namespace pal_test
