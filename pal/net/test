#pragma once // -*- C++ -*-

#include <pal/test>
#include <pal/net/socket>
#include <pal/net/internet>
#include <type_traits>
#include <random>

namespace pal_test {


using pal::net::__bits::handle_guard;


struct udp_v4
{
	static constexpr auto protocol_v = pal::net::ip::udp::v4();
	static constexpr auto loopback_v = pal::net::ip::address_v4::loopback();

	static auto make_socket ()
	{
		return pal::net::make_datagram_socket(protocol_v);
	}
};


struct udp_v6
{
	static constexpr auto protocol_v = pal::net::ip::udp::v6();
	static constexpr auto loopback_v = pal::net::ip::address_v6::loopback();

	static auto make_socket ()
	{
		return pal::net::make_datagram_socket(protocol_v);
	}
};


struct udp_v6_only: udp_v6
{
};


struct tcp_v4
{
	static constexpr auto protocol_v = pal::net::ip::tcp::v4();
	static constexpr auto loopback_v = pal::net::ip::address_v4::loopback();

	static auto make_socket ()
	{
		return pal::net::make_stream_socket(protocol_v);
	}

	static auto make_acceptor ()
	{
		return pal::net::make_socket_acceptor(protocol_v);
	}
};


struct tcp_v6
{
	static constexpr auto protocol_v = pal::net::ip::tcp::v6();
	static constexpr auto loopback_v = pal::net::ip::address_v6::loopback();

	static auto make_socket ()
	{
		return pal::net::make_stream_socket(protocol_v);
	}

	static auto make_acceptor ()
	{
		return pal::net::make_socket_acceptor(protocol_v);
	}
};


struct tcp_v6_only: tcp_v6
{
};


struct invalid_protocol
{
	using socket = pal::net::basic_socket<invalid_protocol>;
	using endpoint = int;

	static constexpr int invalid_value = (std::numeric_limits<int>::max)();

	constexpr int family () const noexcept
	{
		return invalid_value;
	}

	constexpr int type () const noexcept
	{
		return invalid_value;
	}

	constexpr int protocol () const noexcept
	{
		return invalid_value;
	}
};


template <typename T>
constexpr bool is_udp_v = false
	|| std::is_same_v<T, udp_v4>
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, udp_v6_only>
;


template <typename T>
constexpr bool is_tcp_v = false
	|| std::is_same_v<T, tcp_v4>
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, tcp_v6_only>
;


template <typename T>
constexpr bool is_v4_v = false
	|| std::is_same_v<T, udp_v4>
	|| std::is_same_v<T, tcp_v4>
;


template <typename T>
constexpr bool is_v6_v = false
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, udp_v6_only>
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, tcp_v6_only>
;


//
// For random order repeated tests:
// - do not hardcode port number but try until find next available one
// - UDP/TCP have separate next_port() ranges
//

constexpr pal::net::ip::port_type min_port = 1024, max_port = 65535;

inline pal::net::ip::port_type base_port () noexcept
{
	std::random_device dev;
	std::default_random_engine eng(dev());
	std::uniform_int_distribution<pal::net::ip::port_type> dist(min_port, max_port);
	return dist(eng);
}

template <typename Protocol>
pal::net::ip::port_type next_port (const Protocol &) noexcept
{
	static auto port = base_port();
	if (port < min_port || port > max_port)
	{
		port = min_port;
	}
	return port++;
}

template <typename Socket>
bool bind_next_available_port (Socket &socket, typename Socket::endpoint_type &endpoint) noexcept
{
	constexpr size_t max_tries = max_port - min_port;
	for (auto tries_left = max_tries;  tries_left;  tries_left--)
	{
		endpoint.port(next_port(endpoint.protocol()));
		if (socket.bind(endpoint))
		{
			return true;
		}
	}
	return false;
}


} // namespace pal_test
