#pragma once // -*- C++ -*-

#include <pal/net/ip/udp>
#include <pal/net/ip/tcp>
#include <pal/test>
#include <type_traits>


namespace pal_test {


struct tcp_v4
{
	using address_type = pal::net::ip::address_v4;

	static constexpr auto protocol () noexcept
	{
		return pal::net::ip::tcp::v4();
	}
};


struct tcp_v6
{
	using address_type = pal::net::ip::address_v6;

	static constexpr auto protocol () noexcept
	{
		return pal::net::ip::tcp::v6();
	}
};


struct udp_v4
{
	using address_type = pal::net::ip::address_v4;

	static constexpr auto protocol () noexcept
	{
		return pal::net::ip::udp::v4();
	}
};


struct udp_v6
{
	using address_type = pal::net::ip::address_v6;

	static constexpr auto protocol () noexcept
	{
		return pal::net::ip::udp::v6();
	}
};


template <typename Protocol>
constexpr bool is_udp_v = std::is_same_v<Protocol, pal::net::ip::udp>;

template <typename Protocol>
constexpr bool is_tcp_v = std::is_same_v<Protocol, pal::net::ip::tcp>;


inline auto next_port () noexcept
{
	static pal::net::ip::port_type port = 1025;
	return port++;
}


} // namespace pal_test
