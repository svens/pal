#pragma once // -*- C++ -*-

#include <pal/test>
#include <pal/net/socket>
#include <pal/net/internet>
#include <type_traits>

#if __pal_os_linux || __pal_os_macos
	#include <unistd.h>
#endif

namespace pal_test {


struct handle_guard
{
	pal::net::socket_base::native_handle_type handle;

	handle_guard (pal::net::socket_base::native_handle_type handle) noexcept
		: handle{handle}
	{ }

	~handle_guard () noexcept
	{
		if (handle != -1)
		{
			#if __pal_os_linux || __pal_os_macos
				(void)::close(handle);
			#elif __pal_os_windows
				(void)::closesocket(handle);
			#endif
		}
	}
};


struct udp_v4
{
	static constexpr auto protocol_v = pal::net::ip::udp::v4();

	static auto make_socket ()
	{
		return pal::net::make_datagram_socket(protocol_v);
	}
};


struct udp_v6
{
	static constexpr auto protocol_v = pal::net::ip::udp::v6();

	static auto make_socket ()
	{
		return pal::net::make_datagram_socket(protocol_v);
	}
};


struct udp_v6_only: udp_v6
{
};


struct tcp_v4
{
	static constexpr auto protocol_v = pal::net::ip::tcp::v4();

	static auto make_socket ()
	{
		return pal::net::make_stream_socket(protocol_v);
	}
};


struct tcp_v6
{
	static constexpr auto protocol_v = pal::net::ip::tcp::v6();

	static auto make_socket ()
	{
		return pal::net::make_stream_socket(protocol_v);
	}
};


struct tcp_v6_only: tcp_v6
{
};


struct invalid_protocol
{
	using socket = pal::net::basic_socket<invalid_protocol>;

	static constexpr int invalid_value = (std::numeric_limits<int>::max)();

	constexpr int family () const noexcept
	{
		return invalid_value;
	}

	constexpr int type () const noexcept
	{
		return invalid_value;
	}

	constexpr int protocol () const noexcept
	{
		return invalid_value;
	}
};


template <typename T>
constexpr bool is_udp_v = false
	|| std::is_same_v<T, udp_v4>
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, udp_v6_only>
;


template <typename T>
constexpr bool is_tcp_v = false
	|| std::is_same_v<T, tcp_v4>
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, tcp_v6_only>
;


template <typename T>
constexpr bool is_v4_v = false
	|| std::is_same_v<T, udp_v4>
	|| std::is_same_v<T, tcp_v4>
;


template <typename T>
constexpr bool is_v6_v = false
	|| std::is_same_v<T, udp_v6>
	|| std::is_same_v<T, udp_v6_only>
	|| std::is_same_v<T, tcp_v6>
	|| std::is_same_v<T, tcp_v6_only>
;


} // namespace pal_test
