#pragma once // -*- C++ -*-

/**
 * \file pal/result
 * Convenience type pal::result<T> for std::expected<T, std::error_code>
 */

#include <pal/__expected>
#include <system_error>
#include <type_traits>

namespace pal {

/// Convenience wrapper for std::expected<T, E>, where E is std::error_code
template <typename T>
using result = expected<T, std::error_code>;

/// Return unexpected{std::make_error_code(ec)}
unexpected<std::error_code> make_unexpected (std::errc ec) noexcept
{
	return unexpected{std::make_error_code(ec)};
}

/// Return value in \a result if set, otherwise throw std::system_error with
/// contained std::error_code
template <typename T>
constexpr auto value_or_throw (result<T> &&result) noexcept(false)
{
	if (result.has_value())
	{
		return std::move(*result);
	}
	throw std::system_error(result.error());
}

/// Return value in \a result if set, otherwise throw std::system_error with
/// contained std::error_code
template <>
constexpr auto value_or_throw (result<void> &&result) noexcept(false)
{
	if (!result.has_value())
	{
		throw std::system_error(result.error());
	}
}

} // namespace pal
