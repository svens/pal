#pragma once // -*- C++ -*-

#if __cpp_lib_expected >= 202211L
	#define __pal_use_std_expected 1
	#include <expected>
#else
	#define __pal_use_std_expected 0
	#include <type_traits>
	#include <utility>
#endif

namespace pal {

#if __pal_use_std_expected

using std::unexpect;
using std::unexpect_t;
using std::unexpected;

#else

template <typename E>
class unexpected;

namespace __expected {

template <typename E>
constexpr bool is_unexpected_v = false;

template <typename E>
constexpr bool is_unexpected_v<unexpected<E>> = true;

template <typename E>
struct valid_unexpected_argument: std::true_type
{
	static_assert(std::is_object_v<E>);
	static_assert(!std::is_array_v<E>);
	static_assert(!std::is_const_v<E>);
	static_assert(!std::is_volatile_v<E>);
	static_assert(!is_unexpected_v<E>);
};

} // namespace __expected

template <typename E>
class unexpected
{
public:

	static_assert(__expected::valid_unexpected_argument<E>::value);

	constexpr unexpected (const unexpected &) = default;
	constexpr unexpected (unexpected &&) = default;

	template <typename U = E>
		requires(std::is_constructible_v<E, U>
			&& !std::is_same_v<std::remove_cvref_t<U>, std::in_place_t>
			&& !std::is_same_v<std::remove_cvref_t<U>, unexpected<E>>
		)
	explicit constexpr unexpected (U &&e)
		noexcept(std::is_nothrow_constructible_v<E, U>)
		: error_{std::forward<U>(e)}
	{ }

	template <typename... Args>
		requires(std::is_constructible_v<E, Args...>)
	explicit constexpr unexpected (std::in_place_t, Args &&...args)
		noexcept(std::is_nothrow_constructible_v<E, Args...>)
		: error_{std::forward<Args>(args)...}
	{ }

	constexpr unexpected &operator= (const unexpected &) = default;
	constexpr unexpected &operator= (unexpected &&) = default;

	constexpr const E &error () const & noexcept
	{
		return error_;
	}

	constexpr E &error () & noexcept
	{
		return error_;
	}

	constexpr const E &&error () const && noexcept
	{
		return std::move(error_);
	}

	constexpr E &&error () && noexcept
	{
		return std::move(error_);
	}

	constexpr void swap (unexpected &that)
		noexcept(std::is_nothrow_swappable_v<E>)
	{
		static_assert(std::is_swappable_v<E>);
		using std::swap;
		swap(error_, that.error_);
	}

	friend constexpr void swap (unexpected &left, unexpected &right)
		noexcept(noexcept(left.swap(right)))
	{
		left.swap(right);
	}

	template <typename E2>
	friend constexpr bool operator== (const unexpected &left, const unexpected<E2> &right)
		noexcept(noexcept(left.error_ == right.error_))
	{
		return left.error_ == right.error_;
	}

private:

	E error_;
};

template <typename E> unexpected(E) -> unexpected<E>;

struct unexpect_t
{
	explicit unexpect_t () = default;
};

inline constexpr unexpect_t unexpect{};

#endif // __pal_use_std_expected

} // namespace pal

#undef __pal_use_std_expected
