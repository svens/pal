#pragma once // -*- C++ -*-

/**
 * \file pal/error
 * PAL errors
 */

#include <pal/__bits/lib>
#include <system_error>


__pal_begin


#define __pal_errc(Impl) \
	Impl(__0, "internal placeholder for not an error") \
	Impl(cancelled, "cancelled")


/**
 * PAL errors
 */
enum class errc: int
{
	#define __pal_errc_enum(Code, Message) Code,
	__pal_errc(__pal_errc_enum)
	#undef __pal_errc_enum
};


/**
 * Return PAL error category. The \c name() virtual function returns "pal".
 */
const std::error_category &error_category () noexcept;


/**
 * Make \c std::error_code from error code \a ec
 */
inline std::error_code make_error_code (errc ec) noexcept
{
	return {static_cast<int>(ec), error_category()};
}


/**
 * Helper class to catch std::error_code and throw std::system_error if there
 * was an error.
 */
class throw_on_error
{
public:

	throw_on_error () = delete;
	throw_on_error (const throw_on_error &) = delete;
	throw_on_error &operator= (const throw_on_error &) = delete;

	/**
	 * Construct error thrower with \a message
	 */
	throw_on_error (const char *message) noexcept
		: message_(message)
	{ }


	/**
	 * Throw std::system_error if error is set.
	 */
	~throw_on_error () noexcept(false)
	{
		if (error_)
		{
			throw std::system_error(error_, message_);
		}
	}


	/**
	 * Return mutable reference to internal error member.
	 */
	operator std::error_code &() noexcept
	{
		return error_;
	}


private:

	std::error_code error_{};
	const char * const message_;
};


__pal_end


namespace std {

template <>
struct is_error_code_enum<pal::errc>
	: true_type
{ };

} // namespace std
