#pragma once // -*- C++ -*-

/**
 * \file pal/byte_order
 * Host/network byte order conversions
 */

#include <pal/__config>
#include <bit>


namespace pal {


/// Convert 16-bit \a value from host to network order.
constexpr uint16_t hton (uint16_t value)
{
	if constexpr (std::endian::native == std::endian::little)
	{
		#if __pal_compiler_clang || __pal_compiler_gnu
			return __builtin_bswap16(value);
		#else
			return
				((value & 0x00ff) << 8) |
				((value & 0xff00) >> 8) ;
		#endif
	}
	else
	{
		return value;
	}
}


/// Convert 32-bit \a value from host to network order.
constexpr uint32_t hton (uint32_t value)
{
	if constexpr (std::endian::native == std::endian::little)
	{
		#if __pal_compiler_clang || __pal_compiler_gnu
			return __builtin_bswap32(value);
		#else
			return
				((value & 0x0000'00ff) << 24) |
				((value & 0x0000'ff00) <<  8) |
				((value & 0x00ff'0000) >>  8) |
				((value & 0xff00'0000) >> 24) ;
		#endif
	}
	else
	{
		return value;
	}
}


/// Convert 64-bit \a value from host to network order.
constexpr uint64_t hton (uint64_t value)
{
	if constexpr (std::endian::native == std::endian::little)
	{
		#if __pal_compiler_clang || __pal_compiler_gnu
			return __builtin_bswap64(value);
		#else
			return
				((value & 0x0000'0000'0000'00ff) << 56) |
				((value & 0x0000'0000'0000'ff00) << 40) |
				((value & 0x0000'0000'00ff'0000) << 24) |
				((value & 0x0000'0000'ff00'0000) <<  8) |
				((value & 0x0000'00ff'0000'0000) >>  8) |
				((value & 0x0000'ff00'0000'0000) >> 24) |
				((value & 0x00ff'0000'0000'0000) >> 40) |
				((value & 0xff00'0000'0000'0000) >> 56) ;
		#endif
	}
	else
	{
		return value;
	}
}


/// Convert 16-bit \a value from network to host order.
constexpr uint16_t ntoh (uint16_t value)
{
	return hton(value);
}


/// Convert 32-bit \a value from network to host order.
constexpr uint32_t ntoh (uint32_t value)
{
	return hton(value);
}


/// Convert 64-bit \a value from network to host order.
constexpr uint64_t ntoh (uint64_t value)
{
	return hton(value);
}


} // namespace pal
