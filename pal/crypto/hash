#pragma once // -*- C++ -*-

/**
 * \file pal/crypto/hash
 * Cryptographic hashing
 */

#include <pal/__bits/lib>
#include <pal/crypto/__bits/digest>
#include <pal/error>
#include <pal/span>
#include <array>


__pal_begin


namespace crypto {


/**
 * One-way cryptographic hashing using \a Algorithm.
 *
 * If all data is already fully present, use static one_shot() to calculate
 * digest immediately.
 *
 * If data is not completely present, instantiate this class and add new data
 * in one or more calls to update(). Once full data has been fed into hasher,
 * call finish() to fetch calculated digest. Application can immediately reuse
 * instance after call to finish(), it is re-initialized internally.
 */
template <typename Algorithm>
class basic_hash
{
public:

	/// Number of bytes in hash digest result.
	static constexpr size_t digest_size = __bits::digest_size_v<Algorithm>;

	/// Owning hashing result type.
	using result_type = std::array<std::byte, digest_size>;


	/**
	 * Initialize hasher object.
	 */
	basic_hash ();


	/**
	 * Feed \a input into hasher object.
	 * \returns *this for call chaining
	 */
	template <typename SpanSequence>
	basic_hash &update (const SpanSequence &input) noexcept
	{
		const auto end = span_sequence_end(input);
		for (auto it = span_sequence_begin(input);  it != end;  ++it)
		{
			update(it->data(), it->size_bytes());
		}
		return *this;
	}


	/**
	 * Calculate and return hash of previously fed data.
	 */
	result_type finish () noexcept
	{
		result_type result;
		finish(result.data(), result.size());
		return result;
	}


	/**
	 * Calculate hash of \a input, returning result as std::array. On
	 * failure \a error is set and undefined value is returned.
	 */
	template <typename SpanSequence>
	static result_type one_shot (const SpanSequence &input) noexcept
	{
		return basic_hash{}.update(input).finish();
	}


private:

	typename Algorithm::hash context_{};

	void update (const void *input, size_t size) noexcept;
	void finish (void *result, size_t size) noexcept;
};


/// \{
/// Cryptographic hashes
using md5_hash = basic_hash<__bits::md5_algorithm>;
using sha1_hash = basic_hash<__bits::sha1_algorithm>;
using sha256_hash = basic_hash<__bits::sha256_algorithm>;
using sha384_hash = basic_hash<__bits::sha384_algorithm>;
using sha512_hash = basic_hash<__bits::sha512_algorithm>;
/// \}


} // namespace crypto


__pal_end
