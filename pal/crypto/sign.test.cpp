#include <pal/crypto/sign>
#include <pal/crypto/hash>
#include <pal/crypto/test>
#include <pal/crypto/certificate_store>
#include <catch2/catch_template_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>
#include <map>

namespace {

using namespace pal::crypto::padding;
using namespace pal::crypto::algorithm;
namespace test_cert = pal_test::cert;

auto &store ()
{
	static auto store_ = pal::crypto::certificate_store::from_pkcs12(test_cert::pkcs12_unprotected).value();
	return store_;
}

auto &public_key ()
{
	static auto key_ = store().begin()->public_key().value();
	return key_;
}

auto &private_key ()
{
	static auto key_ = store().begin()->private_key().value();
	return key_;
}

template <typename PaddingAlgorithm, typename DigestAlgorithm>
struct with
{
	using padding_type = PaddingAlgorithm;
	using algorithm_type = DigestAlgorithm;
	using message_digest_type = pal::crypto::basic_hash<DigestAlgorithm>;

	using provider_type = pal::crypto::signature_provider<PaddingAlgorithm, DigestAlgorithm>;
	using verifier_type = pal::crypto::signature_verifier<PaddingAlgorithm, DigestAlgorithm>;

	static auto &provider ()
	{
		static auto provider_ = provider_type::make(private_key()).value();
		return provider_;
	}

	static auto &verifier ()
	{
		static auto verifier_ = verifier_type::make(public_key()).value();
		return verifier_;
	}

	static inline const auto message_digest = message_digest_type::one_shot(std::span{test_cert::server.pem}).value();
};

using signature_type = std::array<uint8_t, 256>;
template <pal::os_type OsType, typename TestType> constexpr signature_type precalculated_signature{};

template <pal::os_type OsType> constexpr signature_type precalculated_signature<OsType, with<pkcs1,sha1>> = //{{{1
{
	0x0d, 0x95, 0x08, 0xec, 0xe0, 0x3d, 0x9b, 0xab, 0xaa, 0x31, 0x7d, 0x9d, 0xc4, 0x99, 0x08, 0x49,
	0xda, 0xcf, 0xa0, 0x49, 0xbf, 0x4c, 0xd7, 0x80, 0xa1, 0x23, 0x01, 0x19, 0x6d, 0x33, 0x78, 0x54,
	0x97, 0x34, 0xf5, 0x9e, 0x2c, 0xb5, 0x83, 0x3e, 0xc4, 0x85, 0x9a, 0xc1, 0x93, 0xf4, 0x19, 0xd9,
	0xb8, 0xfc, 0x94, 0x9b, 0x7b, 0x87, 0x7c, 0x69, 0xcd, 0xe7, 0x7a, 0x98, 0x99, 0x90, 0x6b, 0x9a,
	0x9e, 0xc7, 0x02, 0x74, 0x3e, 0x72, 0xda, 0x3b, 0x52, 0xc5, 0x2e, 0x84, 0x33, 0xf4, 0x91, 0x14,
	0x80, 0xb0, 0xb4, 0xff, 0x1c, 0xf5, 0x13, 0xaa, 0xda, 0x81, 0x40, 0xeb, 0xa1, 0x09, 0x5c, 0x4f,
	0x19, 0xb8, 0x93, 0x14, 0xc9, 0xd6, 0x55, 0xcd, 0xcf, 0xcc, 0x6d, 0x0b, 0x72, 0xe3, 0x0e, 0x4f,
	0x05, 0x6a, 0x13, 0xc9, 0x47, 0x27, 0x84, 0xa3, 0xcb, 0x3c, 0x59, 0x89, 0xd4, 0x35, 0x62, 0x79,
	0x1f, 0x21, 0x0a, 0xea, 0x12, 0x5d, 0x98, 0x30, 0xab, 0x72, 0x5f, 0xb9, 0x46, 0xf8, 0x74, 0xa9,
	0xb0, 0x22, 0xf6, 0xed, 0x21, 0x19, 0x30, 0xf8, 0xc3, 0x00, 0xd5, 0xeb, 0x11, 0x78, 0x93, 0x15,
	0xb3, 0xfd, 0x97, 0x93, 0x45, 0x44, 0x81, 0x27, 0xe5, 0x64, 0x47, 0xcf, 0x4d, 0xc1, 0xee, 0x0b,
	0x5e, 0x70, 0x04, 0xca, 0x03, 0x64, 0x74, 0x81, 0x46, 0x40, 0x41, 0x14, 0xde, 0x21, 0x38, 0x9b,
	0x28, 0xba, 0xd9, 0xdf, 0x2c, 0x71, 0xf4, 0x53, 0x22, 0x9b, 0xfc, 0xed, 0xc3, 0x67, 0x11, 0xb2,
	0x0a, 0x93, 0xda, 0xdf, 0xc3, 0x56, 0x9f, 0xa3, 0x96, 0xe5, 0x11, 0x2b, 0xe9, 0x8a, 0x13, 0xb6,
	0x50, 0x7c, 0xac, 0x84, 0x2a, 0x8c, 0x48, 0x6b, 0xd7, 0x76, 0xc8, 0xcf, 0x05, 0x2d, 0x9f, 0x95,
	0x25, 0xa0, 0x3f, 0x0b, 0x61, 0xf3, 0x08, 0x24, 0xcb, 0x16, 0xda, 0x1c, 0xe2, 0x97, 0x04, 0x16,
};

template <pal::os_type OsType> constexpr signature_type precalculated_signature<OsType, with<pkcs1,sha256>> = //{{{1
{
	0x4e, 0xa4, 0xfd, 0xff, 0xbc, 0x10, 0x6d, 0xd1, 0xdc, 0x78, 0x4d, 0x74, 0x64, 0x39, 0xfd, 0xdd,
	0x1f, 0x1d, 0x55, 0xfe, 0x0a, 0x64, 0x94, 0x6c, 0x17, 0xda, 0x83, 0x67, 0x08, 0xcd, 0xf9, 0x1c,
	0x41, 0x55, 0x93, 0x48, 0x1b, 0xe9, 0xba, 0x73, 0xf2, 0xcd, 0x13, 0xbc, 0xc2, 0x28, 0x77, 0x61,
	0x54, 0xdd, 0x5a, 0xb5, 0x19, 0x6f, 0xb9, 0x32, 0x26, 0x3b, 0xff, 0x4a, 0x80, 0x5f, 0xf0, 0x25,
	0xe9, 0xc8, 0x1c, 0xdf, 0xb3, 0xf5, 0xd7, 0xd0, 0x84, 0xff, 0x94, 0x56, 0xb2, 0x9e, 0xe2, 0x51,
	0xf8, 0x4f, 0x98, 0xbf, 0x34, 0x79, 0x6a, 0x16, 0xcc, 0xd5, 0xd2, 0xc4, 0xac, 0x2a, 0xc9, 0x12,
	0xb9, 0xa1, 0x82, 0x52, 0x0d, 0x05, 0x77, 0x1a, 0x0e, 0xd4, 0xbe, 0xec, 0x88, 0xfb, 0xc4, 0x4f,
	0x61, 0x58, 0x43, 0x22, 0x86, 0xa5, 0x88, 0x18, 0xab, 0xca, 0x69, 0x79, 0x1f, 0x8f, 0xfa, 0xed,
	0xaf, 0x12, 0x51, 0x46, 0x01, 0x6e, 0x17, 0x61, 0xd5, 0x22, 0x91, 0xd0, 0x0c, 0xde, 0xf6, 0x57,
	0x3b, 0x46, 0x2a, 0xb3, 0x83, 0x9f, 0xee, 0xbd, 0x6a, 0xad, 0xc3, 0x9a, 0xe1, 0x27, 0xba, 0x1d,
	0x9c, 0x82, 0xa7, 0xce, 0x13, 0x37, 0x06, 0xe8, 0xb8, 0xd0, 0xb5, 0xba, 0x2d, 0x73, 0xe4, 0x01,
	0x8c, 0x77, 0x57, 0xe1, 0x83, 0xc2, 0x44, 0xb4, 0xd3, 0x41, 0x36, 0xa8, 0x00, 0x89, 0x8a, 0x47,
	0xda, 0xdd, 0xa1, 0xf9, 0xc1, 0xb7, 0x46, 0x1c, 0x7f, 0x52, 0x9e, 0x00, 0x19, 0x61, 0x55, 0x13,
	0x33, 0x3a, 0xdb, 0x46, 0xfa, 0x7d, 0x7b, 0x7f, 0x99, 0xd8, 0x74, 0x6f, 0x6e, 0x1c, 0x69, 0x41,
	0xc1, 0x47, 0x8f, 0x8e, 0x87, 0x1b, 0xaa, 0x2e, 0x6c, 0x0c, 0x54, 0x81, 0x69, 0xdb, 0xd1, 0x8b,
	0x88, 0x05, 0xeb, 0xaf, 0xbf, 0x46, 0x1b, 0x8f, 0xf2, 0xfc, 0x5f, 0x2d, 0xaa, 0x10, 0xfe, 0xa1,
};

template <pal::os_type OsType> constexpr signature_type precalculated_signature<OsType, with<pkcs1,sha384>> = //{{{1
{
	0x26, 0x58, 0x25, 0x7c, 0xc9, 0x91, 0xff, 0x2f, 0x91, 0xb3, 0xc5, 0x73, 0x4b, 0x1b, 0x82, 0x37,
	0xc3, 0xf7, 0xff, 0x48, 0x3f, 0xf8, 0x67, 0xff, 0xdd, 0xa7, 0x9f, 0xc1, 0x73, 0x32, 0x03, 0x96,
	0xab, 0xdf, 0x46, 0x34, 0x68, 0xa5, 0x80, 0x7e, 0x80, 0x17, 0x2f, 0x9e, 0x6e, 0xbc, 0xbf, 0x1d,
	0xc7, 0x2c, 0xb5, 0x9e, 0x29, 0x93, 0x01, 0xfb, 0xc3, 0x6b, 0x5b, 0x9a, 0x51, 0x26, 0xa8, 0x1c,
	0x68, 0xa4, 0x4e, 0x33, 0x4e, 0x1b, 0x8e, 0xf5, 0x5d, 0x90, 0x48, 0x1b, 0xc1, 0x6d, 0x11, 0xea,
	0xff, 0xcd, 0x33, 0x05, 0x5f, 0x67, 0x6d, 0xcf, 0x3b, 0x1f, 0x24, 0xae, 0xfc, 0xbd, 0x1c, 0x98,
	0x38, 0x90, 0x0c, 0x1c, 0xe7, 0x39, 0xa1, 0x25, 0x5f, 0xa9, 0xf4, 0xcf, 0xc2, 0x4a, 0xa6, 0x4c,
	0xb4, 0x5b, 0x87, 0x69, 0xa5, 0x69, 0xc5, 0x4b, 0x7b, 0x8c, 0x68, 0xda, 0xa8, 0x53, 0x2e, 0x97,
	0x1d, 0x8c, 0xb9, 0x3e, 0xdb, 0x25, 0x2e, 0x0e, 0x57, 0xc0, 0x68, 0x0e, 0xa4, 0xd4, 0xf4, 0x99,
	0x8f, 0x4e, 0xba, 0xcc, 0x9e, 0x2e, 0xac, 0x6c, 0xd9, 0xf1, 0x11, 0xc0, 0xc5, 0xe0, 0x9a, 0x91,
	0x94, 0xfe, 0x0e, 0xe6, 0x1f, 0xa6, 0x87, 0x07, 0x5d, 0x21, 0x69, 0xa6, 0xc0, 0x08, 0x6b, 0x78,
	0x20, 0xc1, 0xd8, 0x92, 0x04, 0x65, 0x1f, 0x95, 0x43, 0x03, 0x70, 0xd8, 0x88, 0x5a, 0x74, 0xd5,
	0x22, 0x71, 0xd7, 0x4c, 0x59, 0x83, 0x22, 0x07, 0xc8, 0x54, 0xc3, 0xc2, 0x4d, 0x33, 0x40, 0xb7,
	0x48, 0x3e, 0x5a, 0xfd, 0x89, 0xfd, 0xc5, 0xa4, 0xb9, 0xc5, 0xa9, 0xc6, 0x06, 0xaf, 0x32, 0x2d,
	0x4a, 0xb1, 0x1e, 0x18, 0x08, 0x11, 0xf1, 0x18, 0x40, 0x4e, 0x6d, 0xd7, 0x66, 0xa4, 0x6f, 0xb6,
	0xe8, 0xb1, 0x3c, 0xe6, 0xdf, 0x51, 0x0f, 0xa8, 0x83, 0xc2, 0x24, 0xe0, 0x8e, 0x0a, 0xcd, 0x6c,
};

template <pal::os_type OsType> constexpr signature_type precalculated_signature<OsType, with<pkcs1,sha512>> = //{{{1
{
	0x52, 0x8c, 0x45, 0x68, 0x0b, 0x83, 0x24, 0x37, 0x40, 0x33, 0xad, 0x7f, 0xaf, 0x2e, 0x36, 0x1e,
	0xd2, 0x3d, 0x60, 0x82, 0x00, 0xc0, 0xe1, 0x2d, 0x33, 0xc7, 0xf7, 0x5b, 0x06, 0xa2, 0xda, 0x1a,
	0xe0, 0x60, 0x7e, 0xc2, 0xe9, 0x83, 0xc0, 0x17, 0x48, 0xd7, 0x10, 0xc0, 0xe7, 0x54, 0x54, 0x98,
	0xa4, 0xd1, 0xce, 0xec, 0x44, 0x5d, 0xf0, 0x45, 0xc5, 0x02, 0x38, 0x60, 0x1b, 0xa3, 0xe7, 0x49,
	0xa3, 0xb2, 0x32, 0x99, 0x1f, 0x52, 0x71, 0xaa, 0xf6, 0x0c, 0x32, 0xf7, 0x97, 0x61, 0x3d, 0x48,
	0xfa, 0xfb, 0xa1, 0x97, 0xcb, 0x28, 0x4b, 0x6b, 0xa2, 0x39, 0xfc, 0x08, 0x88, 0x25, 0xe2, 0xfa,
	0xd6, 0x1d, 0x58, 0x9a, 0x72, 0x10, 0x64, 0x03, 0x0d, 0x33, 0xaa, 0x86, 0xcc, 0xbe, 0x38, 0x93,
	0x69, 0xee, 0x87, 0x8b, 0xd3, 0x1f, 0x65, 0x28, 0xbd, 0xd9, 0xf5, 0x1b, 0xa1, 0x49, 0x69, 0xa4,
	0x1b, 0x7e, 0x5a, 0x74, 0xd5, 0x38, 0x8f, 0xe9, 0x6c, 0xea, 0xc0, 0x9d, 0x8d, 0x9b, 0x76, 0x96,
	0x36, 0x16, 0x0e, 0x78, 0xf4, 0x90, 0xa7, 0xa0, 0x02, 0x9e, 0x51, 0x41, 0xf6, 0x38, 0xc5, 0xdd,
	0x3a, 0x95, 0x4e, 0x88, 0xad, 0x16, 0x17, 0x83, 0xa7, 0x40, 0x8f, 0xaf, 0xd6, 0x37, 0x63, 0x7a,
	0xeb, 0x6b, 0x29, 0x4a, 0x91, 0x14, 0x3f, 0x26, 0x02, 0xb6, 0x5c, 0xf1, 0x35, 0x42, 0xd9, 0x23,
	0x40, 0xaa, 0x49, 0xf6, 0xd7, 0xa7, 0xb4, 0xa0, 0x86, 0x45, 0x0c, 0xae, 0x24, 0xe7, 0xf8, 0x31,
	0xe5, 0xae, 0x56, 0x2b, 0x2c, 0xf4, 0xb7, 0x38, 0x6d, 0x8e, 0x16, 0xce, 0xf1, 0xd1, 0xd0, 0x4a,
	0xd0, 0x9c, 0xfa, 0x82, 0xc4, 0xad, 0x85, 0x42, 0xee, 0x0d, 0x24, 0x0f, 0xa2, 0x54, 0xef, 0xdc,
	0xca, 0x03, 0x04, 0x88, 0x79, 0x99, 0x5c, 0x5e, 0xec, 0x40, 0xa1, 0xc6, 0xec, 0x8c, 0x91, 0xc7,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::linux, with<pss,sha1>> = //{{{1
{
	0x70, 0xfe, 0x2a, 0x66, 0xbc, 0x5d, 0xff, 0x8f, 0x02, 0x4b, 0xa7, 0xdf, 0xe2, 0x6b, 0xda, 0xc7,
	0xa4, 0x11, 0x42, 0x33, 0x7c, 0xe4, 0x80, 0xa8, 0xfa, 0xdd, 0x61, 0xf7, 0xa0, 0x93, 0xb1, 0x6d,
	0x31, 0x4f, 0xcf, 0x51, 0x2a, 0x21, 0xc5, 0x43, 0x30, 0x4b, 0x07, 0x0b, 0xb2, 0x4a, 0x5b, 0xf6,
	0x5b, 0x34, 0x08, 0x86, 0xbf, 0x69, 0xc7, 0xa8, 0xfb, 0x15, 0x0d, 0xd9, 0x73, 0x0e, 0xe5, 0xb7,
	0x4d, 0xdb, 0x7a, 0x93, 0x46, 0xf7, 0xa4, 0x0e, 0xc6, 0xcb, 0x99, 0xe1, 0x5a, 0xc8, 0xad, 0x9b,
	0x7b, 0x27, 0x9d, 0x4d, 0xec, 0x04, 0xe8, 0x6c, 0xfe, 0x54, 0x17, 0x47, 0xb9, 0x58, 0x78, 0x1e,
	0xe2, 0x36, 0xa8, 0x1c, 0xca, 0xfa, 0x2b, 0x42, 0xfa, 0x09, 0x70, 0xac, 0x9b, 0x46, 0xc0, 0x2b,
	0x49, 0xac, 0x0b, 0xbc, 0xaa, 0xb2, 0x30, 0xcf, 0xf3, 0x47, 0xcc, 0xaa, 0x4a, 0x80, 0x9a, 0x67,
	0x0c, 0x79, 0xc5, 0x36, 0xf2, 0x62, 0x7b, 0xa5, 0x1d, 0x7e, 0xd9, 0x45, 0x79, 0x7e, 0x79, 0x41,
	0xe6, 0x0b, 0xc8, 0x14, 0xeb, 0x07, 0x06, 0xa6, 0x29, 0xd1, 0x29, 0x7b, 0xc1, 0xa0, 0xe4, 0x33,
	0x35, 0x06, 0xca, 0x51, 0x5c, 0x79, 0x04, 0x3e, 0xfd, 0x23, 0x1f, 0x7d, 0x4b, 0xd2, 0xb6, 0x33,
	0x68, 0x4c, 0xe5, 0xee, 0xcb, 0x99, 0x1a, 0xbe, 0x3d, 0xd0, 0x87, 0x4b, 0x68, 0x14, 0x84, 0x8e,
	0x9a, 0xa6, 0x4a, 0xc3, 0xc9, 0x52, 0x6d, 0x19, 0xd3, 0x20, 0x1f, 0xca, 0x8b, 0x7c, 0x2d, 0x4e,
	0xc9, 0xf8, 0xa1, 0x4f, 0xd8, 0x56, 0x20, 0x23, 0x4f, 0x67, 0xda, 0xf9, 0x4b, 0x0a, 0x98, 0xfb,
	0x2e, 0x14, 0x0c, 0xd5, 0xd3, 0xe0, 0x15, 0x38, 0xcf, 0xb9, 0xc3, 0xc8, 0x72, 0x58, 0x3f, 0xfe,
	0x2f, 0x55, 0x9f, 0x30, 0xf8, 0xe4, 0x80, 0x5a, 0x0d, 0x56, 0x04, 0xda, 0x09, 0xd7, 0xbb, 0x18,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::linux, with<pss,sha256>> = //{{{1
{
	0x7b, 0xfb, 0xaa, 0xe9, 0xf7, 0x4a, 0x41, 0x70, 0x62, 0xd3, 0x3c, 0x12, 0xd1, 0xfc, 0xe6, 0x9e,
	0xe5, 0x0b, 0xae, 0xf8, 0x4c, 0x8f, 0xcf, 0x27, 0x2e, 0xd2, 0x53, 0x03, 0xb5, 0x3f, 0x12, 0xc9,
	0xcd, 0x99, 0xe0, 0x95, 0x64, 0x0d, 0xc6, 0x86, 0x6b, 0xeb, 0x42, 0x59, 0x67, 0xbd, 0x3a, 0xc4,
	0xb6, 0xf9, 0x78, 0x89, 0xf3, 0x2e, 0xab, 0x8c, 0x37, 0x7e, 0x95, 0x2e, 0x06, 0x47, 0x24, 0xe7,
	0x67, 0x35, 0x08, 0x7e, 0x43, 0x76, 0x3c, 0x85, 0xea, 0xa2, 0x4c, 0xa0, 0x72, 0x19, 0x9a, 0x28,
	0x17, 0xbc, 0x74, 0x07, 0x42, 0x75, 0x0f, 0x95, 0xf7, 0x57, 0xa7, 0x50, 0x00, 0x2d, 0x28, 0x18,
	0x03, 0x7e, 0xf8, 0x57, 0xd8, 0x67, 0x29, 0xa4, 0xea, 0x94, 0x33, 0xda, 0x6d, 0x1c, 0xdb, 0x6c,
	0x21, 0x7a, 0x3b, 0xe0, 0x17, 0x42, 0xd9, 0xcb, 0x17, 0xa7, 0x5a, 0xb8, 0xd4, 0x4b, 0x4a, 0x05,
	0x77, 0x5d, 0x4a, 0x96, 0x0b, 0xd9, 0xa7, 0xd9, 0x7e, 0x5d, 0x04, 0x15, 0x7e, 0x5a, 0xfe, 0x5d,
	0x1d, 0x41, 0x78, 0xaa, 0xbb, 0x9b, 0xc3, 0x25, 0xec, 0xa0, 0x47, 0x09, 0x6b, 0x81, 0xd1, 0xdf,
	0x06, 0xf7, 0x00, 0x04, 0xf0, 0x66, 0x55, 0xfa, 0x5a, 0xe2, 0x0d, 0xa1, 0x4f, 0x79, 0x11, 0x82,
	0x0d, 0xc8, 0x8e, 0xdb, 0x53, 0x6e, 0x19, 0xc6, 0x4a, 0x64, 0x60, 0x25, 0x3c, 0x64, 0xa6, 0x86,
	0x28, 0x6d, 0xa7, 0x21, 0x69, 0x8f, 0xcb, 0x34, 0x3d, 0x25, 0xdc, 0xc0, 0xce, 0x2e, 0x18, 0xed,
	0x08, 0x44, 0x6d, 0x09, 0x61, 0x8d, 0x81, 0xd8, 0x7d, 0x82, 0xdb, 0x29, 0x5f, 0x8a, 0x15, 0xdd,
	0xc1, 0x5d, 0x0c, 0x65, 0xcc, 0xe9, 0xf0, 0xbc, 0x91, 0x24, 0xed, 0xc3, 0x54, 0xb1, 0xd6, 0x0b,
	0x64, 0x23, 0x64, 0x45, 0x45, 0xcc, 0x83, 0x14, 0x92, 0xbe, 0x50, 0xa2, 0x3f, 0x00, 0x80, 0x9c,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::linux, with<pss,sha384>> = //{{{1
{
	0x3d, 0x6e, 0xbf, 0x41, 0x57, 0xe1, 0xa4, 0xc2, 0xaa, 0xc3, 0x13, 0x60, 0x1d, 0xd5, 0x8c, 0xdc,
	0x25, 0xe0, 0x1b, 0xd6, 0x0f, 0xc1, 0x27, 0x5f, 0x3d, 0xe4, 0x07, 0xe0, 0x4a, 0xe5, 0xdd, 0x93,
	0x9f, 0x5e, 0xce, 0x0c, 0xad, 0x5c, 0xe8, 0xb2, 0x46, 0x81, 0x7a, 0x9e, 0x80, 0x42, 0x71, 0xfd,
	0xbd, 0x37, 0x67, 0x3d, 0x3c, 0xd8, 0xca, 0xaa, 0xca, 0xb0, 0xb8, 0xb0, 0xee, 0x80, 0xc1, 0x20,
	0xc8, 0x8e, 0x74, 0x83, 0x33, 0xcf, 0x1b, 0xf1, 0xc3, 0xbf, 0xcf, 0x48, 0xc6, 0xf1, 0x0d, 0x60,
	0x5c, 0x31, 0x16, 0xa9, 0x99, 0xb9, 0x63, 0x03, 0x88, 0x1a, 0x30, 0xa9, 0xa1, 0x35, 0xdd, 0x70,
	0xf2, 0xe5, 0xb0, 0x64, 0x50, 0xd3, 0x3b, 0x14, 0xb7, 0x72, 0x58, 0x54, 0x1c, 0x27, 0x36, 0xe8,
	0x17, 0xda, 0x38, 0xd7, 0x18, 0x2e, 0x8e, 0xf6, 0x05, 0x32, 0xf0, 0x79, 0xd1, 0x6b, 0x23, 0xcb,
	0x8e, 0x4d, 0x70, 0x47, 0x06, 0xaa, 0xe6, 0x3f, 0x76, 0x5c, 0xd6, 0x58, 0xdb, 0x5e, 0xd3, 0x66,
	0xf9, 0x1d, 0xaf, 0xef, 0x57, 0xd2, 0x53, 0xf7, 0x36, 0x2b, 0xb0, 0x63, 0xd8, 0x82, 0xba, 0xf1,
	0x63, 0x8d, 0xdc, 0xad, 0x28, 0x4c, 0xaf, 0x11, 0x0e, 0x84, 0xf5, 0x9f, 0x70, 0xd3, 0xa8, 0x6f,
	0xfb, 0x58, 0x1d, 0x46, 0x2a, 0x8a, 0xbe, 0x7f, 0x41, 0xd3, 0x5e, 0x21, 0x24, 0x57, 0x6c, 0x01,
	0x4a, 0x6d, 0x1b, 0xfb, 0x5a, 0x7e, 0xfc, 0xe7, 0x94, 0x3a, 0x60, 0x5c, 0x7e, 0x35, 0x93, 0xb4,
	0x88, 0x03, 0x8f, 0xa1, 0x39, 0x87, 0xd5, 0xce, 0xc0, 0x27, 0x70, 0x39, 0x23, 0x58, 0x1c, 0xd8,
	0x9e, 0x7b, 0x36, 0xe7, 0x28, 0x6d, 0x51, 0x96, 0xa5, 0x6f, 0xb9, 0xf5, 0xa9, 0xa6, 0xf7, 0x97,
	0x5d, 0x94, 0xf7, 0xab, 0xf6, 0x08, 0x47, 0x41, 0xd4, 0x0d, 0xce, 0xb0, 0x26, 0x9c, 0xd3, 0x89,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::linux, with<pss,sha512>> = //{{{1
{
	0x82, 0x3a, 0xaa, 0x31, 0x48, 0x06, 0xa5, 0xf1, 0x85, 0x7b, 0xd7, 0xcd, 0xbc, 0xfa, 0x67, 0x47,
	0x59, 0xf2, 0x1f, 0xfa, 0x16, 0x40, 0x9c, 0x55, 0xdf, 0x7d, 0xa7, 0xba, 0x60, 0x52, 0xd9, 0xbe,
	0xca, 0x83, 0x12, 0xf1, 0xfd, 0xd2, 0x01, 0xe3, 0x0a, 0xf5, 0x68, 0x17, 0xd4, 0xad, 0xe4, 0x5d,
	0x07, 0x3d, 0xe7, 0x31, 0x98, 0x8a, 0x4d, 0x41, 0x64, 0x2f, 0x55, 0xa1, 0xae, 0x5e, 0xba, 0xda,
	0xf5, 0x03, 0x37, 0x14, 0xbf, 0xd8, 0x41, 0xa2, 0xf6, 0xdc, 0x6c, 0x8a, 0x29, 0x35, 0xd9, 0x51,
	0x49, 0xf7, 0x5c, 0x5a, 0x7a, 0xbc, 0x9c, 0x3c, 0xd1, 0x28, 0x23, 0xa7, 0xb3, 0x98, 0x1c, 0x72,
	0xf7, 0x85, 0xa3, 0x93, 0x48, 0xe6, 0x80, 0xd0, 0x8c, 0xd1, 0xf6, 0x34, 0x52, 0x4b, 0x8f, 0xc1,
	0xe6, 0xb8, 0x56, 0xb4, 0xf1, 0xb6, 0x55, 0x33, 0x26, 0x03, 0xe9, 0xec, 0xed, 0x9d, 0xae, 0x47,
	0xff, 0xed, 0x68, 0x31, 0x83, 0x53, 0x5c, 0x2f, 0xec, 0xa7, 0x65, 0x37, 0xb5, 0xea, 0x7e, 0xfc,
	0x34, 0x54, 0xee, 0x7a, 0xf5, 0xbf, 0xab, 0x91, 0x7e, 0xc3, 0x60, 0x2f, 0xed, 0x04, 0x54, 0xdb,
	0x2a, 0x8c, 0xbf, 0xa5, 0x59, 0x04, 0x56, 0x19, 0x2c, 0x36, 0xdb, 0x7d, 0x22, 0xbd, 0xde, 0xe8,
	0xdc, 0x0f, 0x4c, 0xd3, 0xf9, 0xf8, 0x40, 0x1c, 0x65, 0xe3, 0x53, 0xc9, 0x05, 0x08, 0x81, 0x25,
	0xac, 0x7e, 0x92, 0x9a, 0x2f, 0x89, 0x67, 0xcf, 0x7e, 0x5c, 0x69, 0x62, 0x8c, 0x79, 0xac, 0x77,
	0x32, 0xbc, 0xac, 0x42, 0x3e, 0x3c, 0xcb, 0x26, 0x31, 0x0d, 0x16, 0xe2, 0x28, 0x43, 0x59, 0x34,
	0x86, 0x3c, 0xac, 0x0f, 0x31, 0xd6, 0x14, 0x68, 0xd1, 0x4c, 0x28, 0x21, 0xca, 0xb4, 0xb8, 0xc3,
	0x04, 0xeb, 0xfa, 0xd1, 0x1f, 0x63, 0xf5, 0x95, 0x32, 0x35, 0x35, 0x10, 0x6f, 0x09, 0x30, 0xc8,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::macos, with<pss,sha1>> = //{{{1
{
	0x6c, 0x6e, 0xe3, 0x2d, 0x13, 0x61, 0xd2, 0x35, 0xe8, 0xef, 0x36, 0x23, 0x6b, 0x44, 0x17, 0x81,
	0x06, 0x86, 0x08, 0xe5, 0x5a, 0x0c, 0x33, 0xc6, 0x6d, 0xb1, 0xc7, 0x2b, 0x2a, 0x28, 0xbd, 0x69,
	0xa6, 0x4e, 0x53, 0x43, 0x50, 0xe3, 0xce, 0xb8, 0x38, 0x20, 0xa1, 0x33, 0x12, 0x62, 0x4a, 0x74,
	0xd2, 0xb5, 0x02, 0x82, 0x46, 0x38, 0x03, 0x26, 0x8c, 0x57, 0xa3, 0x7d, 0x8a, 0x88, 0x18, 0x5a,
	0x97, 0x66, 0x22, 0x62, 0xae, 0x06, 0x3b, 0xe6, 0xe0, 0xdd, 0xf4, 0x13, 0x84, 0x63, 0x45, 0x3d,
	0xbf, 0x55, 0x28, 0x13, 0x36, 0x1d, 0xc6, 0x60, 0x05, 0xcf, 0x90, 0xb2, 0xa5, 0x51, 0xa9, 0x3a,
	0x2c, 0xf9, 0xc8, 0xb0, 0x34, 0x68, 0xd4, 0x09, 0xba, 0xbc, 0x67, 0x4d, 0x5c, 0x2d, 0x4d, 0x17,
	0xc0, 0x5f, 0x50, 0x59, 0xc8, 0xf7, 0x68, 0xda, 0x6a, 0x79, 0xc7, 0xd9, 0xfa, 0xa5, 0x1e, 0x83,
	0xe2, 0x20, 0x0d, 0xe4, 0x92, 0x29, 0x4f, 0xc3, 0xb6, 0x15, 0x15, 0xea, 0xa8, 0x5d, 0x19, 0x7c,
	0x76, 0xa1, 0x69, 0xb0, 0x71, 0x6c, 0xf1, 0x4b, 0x63, 0xe7, 0x72, 0x1d, 0x64, 0x10, 0xab, 0xe0,
	0xab, 0x11, 0x8f, 0x41, 0x89, 0x69, 0x13, 0xbd, 0x4e, 0xd3, 0xf8, 0x97, 0xbf, 0x51, 0x63, 0x5a,
	0x55, 0x9e, 0x4e, 0xa6, 0x55, 0x66, 0xb9, 0xe3, 0x9b, 0x2c, 0x79, 0x74, 0xa1, 0xa4, 0x11, 0x3d,
	0x6a, 0x21, 0xcd, 0x0b, 0x2f, 0x44, 0xdb, 0x9b, 0x7a, 0xb8, 0x41, 0x78, 0xa8, 0xda, 0x5a, 0x0f,
	0x43, 0x76, 0x09, 0xb3, 0x21, 0x54, 0x36, 0x8d, 0xa4, 0x3d, 0x14, 0x3b, 0x1d, 0x90, 0xf5, 0x43,
	0x06, 0x40, 0x9f, 0xce, 0x66, 0x1a, 0x62, 0x9d, 0xe5, 0xb9, 0x18, 0x25, 0x15, 0xae, 0x67, 0x73,
	0x22, 0x41, 0xec, 0x3a, 0x79, 0x58, 0xc9, 0x24, 0x6b, 0x09, 0xfa, 0x50, 0x20, 0x62, 0xc9, 0x6e,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::macos, with<pss,sha256>> = //{{{1
{
	0x79, 0xe9, 0x10, 0x3f, 0xfb, 0x85, 0x99, 0xae, 0x88, 0x09, 0x16, 0x74, 0x8f, 0x6e, 0x0a, 0xcf,
	0x7b, 0x79, 0x38, 0x2c, 0x5f, 0x60, 0x27, 0xeb, 0x24, 0xb3, 0x47, 0x1f, 0x4c, 0x94, 0x61, 0x53,
	0x4c, 0xda, 0xb6, 0x62, 0x74, 0x07, 0x36, 0xdf, 0x45, 0xc2, 0xce, 0x64, 0xb9, 0x5c, 0x99, 0xa5,
	0xb3, 0xd7, 0x63, 0x04, 0xde, 0x04, 0x26, 0x50, 0x48, 0xe0, 0x97, 0x92, 0xd7, 0xfe, 0xaa, 0xd8,
	0x30, 0x49, 0x5f, 0x7b, 0x53, 0xc4, 0xf3, 0x72, 0x45, 0xb7, 0x9d, 0xef, 0x4e, 0x44, 0xa3, 0x39,
	0xfb, 0x4c, 0x1d, 0x97, 0x7b, 0xe8, 0x07, 0x64, 0x72, 0x5b, 0x68, 0x6c, 0x3b, 0xc9, 0x2f, 0x3d,
	0xa2, 0xfe, 0x0f, 0xe8, 0xa7, 0xcf, 0x3c, 0xb4, 0x61, 0xfb, 0xa3, 0x32, 0x75, 0x89, 0x6f, 0x04,
	0xb7, 0x23, 0xb8, 0x91, 0x78, 0x4a, 0x26, 0xe1, 0xa2, 0xd3, 0x59, 0x54, 0xf5, 0x06, 0xcb, 0x09,
	0x69, 0x97, 0x2e, 0xa8, 0x3e, 0xe1, 0xa7, 0xbe, 0x60, 0x50, 0x6c, 0xcc, 0x75, 0x05, 0x9b, 0x4f,
	0x01, 0x75, 0x84, 0x37, 0x3f, 0xa7, 0xc3, 0xfe, 0x70, 0x39, 0xd1, 0x05, 0xde, 0x1d, 0x28, 0x70,
	0xe6, 0x5b, 0xc1, 0x11, 0x7a, 0x33, 0x01, 0x34, 0xf2, 0xb9, 0x35, 0x32, 0xa3, 0x78, 0x27, 0x4d,
	0x33, 0xf9, 0xe6, 0x7e, 0x0a, 0xa3, 0xea, 0xe1, 0x32, 0x85, 0xa1, 0x6b, 0x07, 0x27, 0x05, 0xf4,
	0xe4, 0x05, 0x09, 0x23, 0x6b, 0xd1, 0x50, 0xe9, 0x8d, 0xbb, 0xe9, 0x68, 0xc5, 0x52, 0xbb, 0xdd,
	0x1f, 0xe7, 0x92, 0xdd, 0xbb, 0xd3, 0x1d, 0xef, 0xf2, 0xb3, 0x82, 0xbc, 0xa2, 0xee, 0x07, 0xa7,
	0xe1, 0xbe, 0x47, 0x53, 0x24, 0xcc, 0x03, 0xc7, 0x6c, 0xa7, 0x8a, 0x60, 0x8b, 0x87, 0xb7, 0x8a,
	0xd5, 0x19, 0xb2, 0xef, 0x7e, 0xbc, 0xc3, 0x26, 0xf9, 0x79, 0x73, 0xb9, 0xa7, 0xcc, 0x32, 0x5c,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::macos, with<pss,sha384>> = //{{{1
{
	0x68, 0x41, 0xbc, 0x92, 0xd8, 0xa6, 0x2d, 0xdd, 0x39, 0xb2, 0x47, 0x6e, 0x21, 0xee, 0xb1, 0x69,
	0xd0, 0x9e, 0x9e, 0x4f, 0x6c, 0x1d, 0x6d, 0x21, 0x5b, 0x38, 0xe0, 0x37, 0x41, 0xca, 0xfb, 0x3e,
	0xd7, 0x1e, 0x33, 0xfa, 0x45, 0x88, 0x78, 0x50, 0x42, 0x94, 0x44, 0x0c, 0xec, 0x02, 0x68, 0x93,
	0xad, 0x75, 0xf8, 0x2b, 0x89, 0x94, 0xb1, 0xc1, 0x81, 0xc2, 0xbc, 0x33, 0xce, 0x11, 0xdd, 0xca,
	0x1f, 0x5d, 0x39, 0xaf, 0xd3, 0xe0, 0xa7, 0x2c, 0x5a, 0xcc, 0x81, 0x09, 0x8f, 0x62, 0x99, 0xaf,
	0x32, 0x54, 0xf7, 0xb4, 0xaa, 0xec, 0x2b, 0x6e, 0x2b, 0xe8, 0xfa, 0xb7, 0x89, 0xe0, 0x41, 0xa3,
	0xe8, 0xdc, 0x21, 0x50, 0x86, 0x15, 0x68, 0x63, 0xbe, 0xc9, 0x43, 0xad, 0xcf, 0x59, 0x3f, 0x02,
	0x22, 0x2a, 0x7e, 0x5a, 0x80, 0x19, 0x20, 0x80, 0x2a, 0x39, 0x04, 0x91, 0x14, 0xf4, 0x22, 0x36,
	0x43, 0x16, 0x19, 0x02, 0x4d, 0x25, 0xcf, 0xa9, 0x65, 0xfc, 0x07, 0x84, 0x93, 0x9c, 0x52, 0xf1,
	0x42, 0x2a, 0xe4, 0x38, 0xd6, 0x80, 0xaf, 0x8b, 0xbf, 0x11, 0x6f, 0x3c, 0x70, 0x48, 0x94, 0x21,
	0xb8, 0x74, 0xe5, 0x8d, 0xc8, 0xda, 0x85, 0x05, 0x96, 0xbb, 0x89, 0x0c, 0x49, 0xab, 0x25, 0xce,
	0xec, 0xd2, 0x9b, 0x3e, 0xb0, 0x7a, 0x3b, 0x10, 0xe4, 0x6b, 0x05, 0xa3, 0x2e, 0xb9, 0x20, 0xbb,
	0x92, 0xfc, 0x7a, 0x05, 0x25, 0x12, 0xe1, 0x7c, 0x19, 0xca, 0x3c, 0x2c, 0xa2, 0xd2, 0x98, 0xba,
	0xed, 0xa2, 0x71, 0xfd, 0xe4, 0xed, 0xc8, 0xa6, 0xb4, 0xc1, 0x66, 0xac, 0xf4, 0xe9, 0x2e, 0xe3,
	0x3c, 0xb5, 0xd3, 0xb4, 0x69, 0xaa, 0x86, 0xa4, 0xf0, 0x34, 0x74, 0xbd, 0xb0, 0x14, 0x24, 0x37,
	0xf0, 0x23, 0x7c, 0x97, 0x36, 0x30, 0x5f, 0xfa, 0x33, 0x69, 0xeb, 0xe3, 0x46, 0x31, 0x03, 0x79,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::macos, with<pss,sha512>> = //{{{1
{
	0x08, 0x0c, 0x1a, 0xbc, 0xd2, 0xb2, 0xa9, 0x21, 0x1d, 0xaa, 0xa4, 0xa0, 0xb3, 0xf3, 0x1e, 0x96,
	0xaf, 0x32, 0xcd, 0xb8, 0x12, 0x80, 0x14, 0xea, 0xce, 0x83, 0x61, 0x48, 0x86, 0x32, 0x04, 0x6f,
	0xee, 0xd3, 0xc2, 0x1c, 0x29, 0xbe, 0x6f, 0xf9, 0xc6, 0xce, 0x80, 0x4a, 0x7b, 0xac, 0x34, 0xde,
	0xd0, 0x9c, 0x38, 0xb3, 0x0f, 0xa5, 0x90, 0x94, 0x08, 0x00, 0x8a, 0x2e, 0xff, 0xfb, 0x3e, 0xf3,
	0x66, 0x6c, 0x57, 0xbe, 0x75, 0x17, 0xfb, 0xe4, 0x3a, 0x4d, 0xde, 0x44, 0x0a, 0xfd, 0xe2, 0xce,
	0x26, 0x03, 0x23, 0x89, 0x5f, 0x36, 0x60, 0x45, 0x7c, 0xdf, 0x42, 0x56, 0xe4, 0xf1, 0x52, 0x6c,
	0x5c, 0x38, 0xc0, 0x8e, 0x74, 0xac, 0x4c, 0xf0, 0xed, 0x60, 0x50, 0x6c, 0x63, 0xbe, 0x26, 0x6e,
	0x4c, 0xc8, 0x7d, 0x19, 0x2f, 0xad, 0xf3, 0xdf, 0x94, 0x85, 0xb1, 0xa7, 0x65, 0xc9, 0xf9, 0x69,
	0x62, 0xc2, 0xf3, 0xef, 0xa3, 0x89, 0x8b, 0x18, 0x6c, 0xaf, 0x2b, 0x83, 0x72, 0xe2, 0x25, 0xa0,
	0xa4, 0x0d, 0xef, 0xf1, 0xe7, 0xe9, 0x49, 0x7c, 0xc1, 0x71, 0x7e, 0x27, 0xdf, 0x7d, 0xad, 0x12,
	0xd9, 0xe4, 0x48, 0x29, 0xef, 0x30, 0x4c, 0x54, 0x76, 0x86, 0xdf, 0x7e, 0x7a, 0xeb, 0xe2, 0x26,
	0xcb, 0xd7, 0xd5, 0x55, 0x11, 0xf9, 0xaa, 0x8c, 0x22, 0xc3, 0x3e, 0x3f, 0xf7, 0x9a, 0x90, 0x52,
	0x66, 0x24, 0xdf, 0xa9, 0x6f, 0x6b, 0x57, 0xe0, 0xd8, 0xd9, 0x5e, 0x2f, 0x1d, 0x20, 0x4d, 0x6a,
	0xaa, 0xa2, 0x91, 0x00, 0x2e, 0x53, 0x7d, 0xcc, 0x6f, 0x70, 0xfe, 0x77, 0x19, 0xa0, 0xe5, 0x3e,
	0x22, 0x5a, 0xd2, 0x0f, 0xc8, 0x22, 0x0f, 0x57, 0x93, 0xa1, 0x66, 0x9f, 0xcc, 0xd0, 0x96, 0x26,
	0x1d, 0x99, 0x8f, 0xad, 0xfc, 0x72, 0x1c, 0x8b, 0x29, 0x7a, 0xf7, 0xd6, 0x52, 0x51, 0x5b, 0x0d,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::windows, with<pss,sha1>> = //{{{1
{
	0x16, 0x4a, 0xc9, 0xa6, 0x57, 0x01, 0x5d, 0xe5, 0xe4, 0xad, 0x85, 0x21, 0xbe, 0xe1, 0x1a, 0x3c,
	0x5c, 0xd0, 0x4d, 0xf7, 0x44, 0x3e, 0x4f, 0x73, 0x5d, 0x62, 0x1d, 0x3c, 0x41, 0x94, 0x55, 0xa5,
	0xec, 0x7e, 0x43, 0x85, 0x93, 0x4b, 0xc5, 0x1e, 0x7e, 0xc2, 0x0c, 0x51, 0x5b, 0xc9, 0xce, 0x96,
	0x7f, 0x40, 0x59, 0xb4, 0xad, 0x03, 0x3c, 0x67, 0x92, 0x49, 0x9d, 0x3c, 0xe5, 0x35, 0xc3, 0xfa,
	0xbc, 0x59, 0x9b, 0x71, 0x5f, 0x6b, 0xb6, 0x40, 0xfc, 0xa1, 0xf9, 0xc3, 0x2a, 0x36, 0x2d, 0xbf,
	0xc3, 0x77, 0xb8, 0xa5, 0xca, 0xf0, 0xe6, 0x58, 0x94, 0x33, 0x10, 0xca, 0x83, 0x35, 0x37, 0xc5,
	0x55, 0xc2, 0xdc, 0x6b, 0x4d, 0x54, 0x74, 0xfc, 0x11, 0x92, 0xbe, 0xad, 0x16, 0x27, 0xc9, 0xa2,
	0xc2, 0x2a, 0xb4, 0xba, 0xc2, 0xc9, 0xa1, 0x05, 0xa0, 0x22, 0x0d, 0xaf, 0x00, 0xc3, 0x16, 0x5d,
	0x92, 0x05, 0x79, 0xf4, 0xde, 0x02, 0x73, 0xee, 0x67, 0x49, 0x91, 0xd6, 0x07, 0x13, 0xe6, 0x14,
	0x6f, 0x4c, 0x52, 0xc0, 0x42, 0x55, 0x04, 0xcb, 0x43, 0xed, 0xae, 0x7d, 0x9a, 0x61, 0xaa, 0x4b,
	0x06, 0x45, 0xe7, 0xd4, 0x5d, 0xdc, 0x4b, 0x0f, 0x03, 0xe7, 0x51, 0x0b, 0xe3, 0xfb, 0xbd, 0x3e,
	0x2e, 0xa4, 0x6e, 0x1c, 0xcd, 0xc5, 0x94, 0xc3, 0x55, 0xe3, 0x4b, 0x16, 0xd4, 0xf3, 0x24, 0xda,
	0x43, 0x4e, 0x3a, 0x9f, 0xbe, 0xed, 0x08, 0x0c, 0x28, 0x51, 0xef, 0x8b, 0x28, 0x29, 0xb1, 0x4a,
	0x64, 0xc1, 0xd7, 0x7a, 0x18, 0xd8, 0x99, 0x6d, 0x14, 0xd2, 0x41, 0x01, 0xc9, 0x48, 0x47, 0x91,
	0xa9, 0xad, 0x38, 0xb2, 0x20, 0xc5, 0x3a, 0x8f, 0xd6, 0x32, 0x50, 0x45, 0xee, 0x37, 0x06, 0x55,
	0xaf, 0xdd, 0xe5, 0x45, 0xc7, 0xad, 0x99, 0xcc, 0xa5, 0x64, 0xeb, 0x13, 0xa7, 0x32, 0x20, 0x2c,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::windows, with<pss,sha256>> = //{{{1
{
	0xa8, 0xb9, 0xc1, 0x5e, 0x45, 0x71, 0x1c, 0xee, 0xf6, 0xbf, 0xfb, 0xbc, 0xf1, 0x50, 0x18, 0x6f,
	0x81, 0xde, 0x9b, 0x79, 0x85, 0x68, 0xdf, 0x48, 0xd6, 0x8c, 0xc6, 0x39, 0xea, 0xf2, 0x2d, 0x74,
	0x5b, 0x96, 0xb9, 0x06, 0x1c, 0xf1, 0xab, 0xad, 0x16, 0x1b, 0xb9, 0xb1, 0x63, 0xc4, 0xb1, 0x65,
	0xbd, 0x41, 0x36, 0xfb, 0x09, 0xd5, 0x92, 0x26, 0x05, 0x85, 0x2f, 0x55, 0xe8, 0x1d, 0x65, 0xd5,
	0xcf, 0x2f, 0x5b, 0x51, 0xf1, 0xf7, 0x26, 0x81, 0x3a, 0x6a, 0xd4, 0x2a, 0xd7, 0x21, 0xe8, 0x02,
	0xcb, 0xc2, 0x82, 0xaf, 0xd4, 0x3e, 0x44, 0x1e, 0xad, 0xd0, 0x26, 0x78, 0xa6, 0x06, 0xb1, 0x0f,
	0xe9, 0x8c, 0xac, 0xb3, 0x55, 0x56, 0x56, 0x25, 0x1c, 0x57, 0x10, 0x7b, 0x76, 0x0e, 0xd0, 0x83,
	0x1c, 0x07, 0x3f, 0xed, 0xdf, 0xe0, 0xfb, 0xcd, 0x7a, 0x46, 0xa8, 0x11, 0xff, 0xba, 0xd2, 0x69,
	0xc9, 0xaf, 0xe3, 0xa3, 0x99, 0x45, 0x55, 0xae, 0x33, 0xec, 0x18, 0x0b, 0xf2, 0x4f, 0x74, 0x12,
	0x0e, 0xc0, 0x9d, 0x2e, 0xea, 0x59, 0x9c, 0x77, 0xcc, 0xdd, 0xc9, 0x56, 0x83, 0xc3, 0x05, 0x8c,
	0x82, 0x24, 0xf6, 0x2c, 0x2c, 0xf0, 0xe6, 0x05, 0xca, 0x03, 0xa3, 0x76, 0x4a, 0xba, 0x75, 0xdd,
	0xd2, 0x6b, 0xe0, 0xd0, 0x90, 0x8c, 0x5b, 0x01, 0x64, 0xf3, 0x44, 0x5b, 0xd8, 0xfa, 0xef, 0x11,
	0x2a, 0x31, 0x0c, 0xd2, 0x6b, 0xbd, 0x4e, 0x0d, 0x56, 0x5b, 0xc4, 0x49, 0x05, 0xff, 0x77, 0x3a,
	0x6a, 0x4b, 0x5a, 0x6a, 0x8b, 0xa0, 0x15, 0x6a, 0xf2, 0x52, 0x44, 0x29, 0x8a, 0x73, 0x90, 0xe8,
	0x85, 0xf4, 0xd5, 0x11, 0xcc, 0xb9, 0xa9, 0x9a, 0x1b, 0xf2, 0xf6, 0x83, 0x1c, 0x56, 0xd3, 0xd3,
	0xbd, 0xf7, 0x49, 0xbb, 0x57, 0x83, 0xd9, 0x15, 0x3b, 0x59, 0x02, 0x18, 0x16, 0xc7, 0x2d, 0x60,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::windows, with<pss,sha384>> = //{{{1
{
	0x62, 0x8a, 0x33, 0x8e, 0x5a, 0x89, 0xe6, 0x92, 0x6d, 0xde, 0x34, 0x3a, 0x8a, 0x40, 0x42, 0x5b,
	0x50, 0xcf, 0x47, 0x18, 0x6e, 0xd7, 0x7d, 0x05, 0x7a, 0x7a, 0x33, 0x38, 0xb3, 0x74, 0xbe, 0x54,
	0x9a, 0x5b, 0xd9, 0xe2, 0xdb, 0x00, 0xa3, 0x1a, 0x7b, 0xbf, 0x94, 0x0f, 0x76, 0x10, 0xc8, 0x5b,
	0xa1, 0x33, 0x21, 0x74, 0x8d, 0xc4, 0x7f, 0x5f, 0xb4, 0x78, 0x43, 0x64, 0x88, 0x0f, 0x5d, 0xf2,
	0x6f, 0x5c, 0xe6, 0x25, 0x09, 0xc9, 0x4e, 0xdb, 0xa3, 0x7e, 0x3a, 0x92, 0x18, 0xdb, 0x55, 0xa7,
	0x39, 0xa6, 0xb0, 0xaa, 0xfd, 0xec, 0xbc, 0x45, 0xfe, 0x19, 0x5a, 0x5f, 0xd3, 0xf6, 0xe3, 0x5e,
	0xf5, 0xb0, 0xbe, 0x3e, 0xe5, 0x4e, 0x53, 0xb4, 0x21, 0x9a, 0x16, 0xf6, 0x27, 0xae, 0xe5, 0x31,
	0x66, 0x95, 0x63, 0xf5, 0x72, 0xd7, 0x7a, 0xd9, 0x35, 0x23, 0x49, 0x3e, 0x79, 0xfd, 0x00, 0xbb,
	0x40, 0xf5, 0xc3, 0x40, 0x99, 0xf3, 0xf2, 0x9c, 0x1d, 0xe8, 0x04, 0x8d, 0xa6, 0x9f, 0x93, 0x59,
	0x46, 0x60, 0x0a, 0x7c, 0x0e, 0x14, 0xcb, 0x93, 0x94, 0x02, 0x29, 0xa5, 0x13, 0x74, 0x2e, 0x14,
	0xef, 0x23, 0x93, 0xbe, 0xbe, 0x1c, 0xcd, 0x0a, 0x23, 0x6f, 0xf3, 0x8d, 0x22, 0x61, 0xdf, 0x23,
	0x71, 0x3d, 0x7a, 0xc5, 0x92, 0x96, 0x33, 0xaf, 0x47, 0xae, 0x97, 0x31, 0x07, 0xde, 0xb7, 0xbf,
	0xa7, 0x06, 0xa3, 0x63, 0x53, 0x69, 0xba, 0xb1, 0xfa, 0xa0, 0x3c, 0xc3, 0xc4, 0xb6, 0x0b, 0xca,
	0xf8, 0xcd, 0x2c, 0xee, 0x8a, 0x16, 0x69, 0x3d, 0xcd, 0xe3, 0x39, 0x94, 0x94, 0x8e, 0xed, 0x36,
	0x92, 0x01, 0xf7, 0x71, 0x7f, 0x91, 0x7c, 0x20, 0xe4, 0x45, 0x79, 0x73, 0x37, 0x1d, 0xe0, 0x08,
	0xf6, 0x81, 0xae, 0x58, 0x88, 0x9d, 0xaa, 0x46, 0xec, 0xb4, 0xfb, 0x8b, 0xc0, 0xb4, 0x9e, 0x44,
};

template <> constexpr signature_type precalculated_signature<pal::os_type::windows, with<pss,sha512>> = //{{{1
{
	0x1e, 0xf4, 0xaa, 0xd3, 0xe0, 0xf0, 0x50, 0x6d, 0xe3, 0xc2, 0xe1, 0xf8, 0xb9, 0xe5, 0x58, 0x96,
	0xd9, 0x5c, 0xdd, 0x33, 0xef, 0xfc, 0xd3, 0x9c, 0x69, 0x03, 0xd8, 0x9b, 0x2c, 0x43, 0x96, 0x9a,
	0xc6, 0xeb, 0x88, 0xd8, 0x94, 0xca, 0x62, 0x3b, 0xc7, 0xde, 0x03, 0x88, 0x34, 0x61, 0xab, 0x37,
	0x63, 0x7a, 0xec, 0xfd, 0xce, 0xb0, 0x5c, 0xe0, 0xec, 0x28, 0xef, 0xab, 0x7e, 0x55, 0xc8, 0xda,
	0xec, 0x83, 0x69, 0x5f, 0xde, 0xf2, 0x43, 0x70, 0x29, 0xc8, 0xf2, 0xc6, 0x3e, 0x78, 0xd8, 0x99,
	0x8d, 0x33, 0x89, 0x5e, 0xef, 0x4d, 0xce, 0x3c, 0xf5, 0x77, 0xb3, 0xd6, 0xa0, 0xf3, 0xbb, 0x81,
	0xf8, 0xeb, 0x7a, 0x40, 0x3a, 0x37, 0x64, 0x97, 0x95, 0x00, 0xe3, 0x14, 0x1e, 0x4c, 0x5d, 0x02,
	0x43, 0x4e, 0x6c, 0x14, 0xa4, 0x37, 0x02, 0x64, 0x51, 0xb7, 0x05, 0xd8, 0x16, 0x53, 0x49, 0xf0,
	0x94, 0x7c, 0xeb, 0x79, 0xd0, 0xbf, 0x9c, 0xde, 0x57, 0xf6, 0x99, 0x64, 0x3e, 0xaa, 0x28, 0xe3,
	0x1b, 0x7b, 0x78, 0x87, 0x8b, 0x4c, 0xb1, 0x8f, 0x39, 0x41, 0xf6, 0xe2, 0xfc, 0xb0, 0x51, 0xa2,
	0xbe, 0x33, 0xf1, 0xf1, 0xfc, 0x9d, 0x7a, 0x83, 0x0d, 0xcc, 0xfc, 0x58, 0x6b, 0x0b, 0xd2, 0x1e,
	0x6c, 0x4a, 0x21, 0x9c, 0x92, 0x86, 0x79, 0x4c, 0xbe, 0xcf, 0x9b, 0x51, 0xa0, 0x9b, 0xf5, 0xe2,
	0x39, 0x1d, 0x44, 0x13, 0x2e, 0xb8, 0xfa, 0x01, 0x76, 0x45, 0x26, 0x54, 0x2f, 0x1f, 0x9f, 0x62,
	0xa2, 0x08, 0xdd, 0x56, 0x1f, 0xe8, 0x3a, 0xbe, 0xba, 0x51, 0x8f, 0x13, 0xe9, 0x9e, 0x9f, 0x54,
	0xc2, 0xc0, 0x17, 0xe1, 0xa3, 0xd7, 0xa4, 0x29, 0x3b, 0x54, 0xc7, 0x18, 0x15, 0xaa, 0x9b, 0x75,
	0xf5, 0x48, 0x05, 0x08, 0xa7, 0x86, 0x6f, 0xef, 0x54, 0x5e, 0x89, 0xa6, 0x6e, 0x32, 0x32, 0x0f,
};

//}}}

template <pal::os_type OsType> const char *os_name = nullptr;
template <> const char *os_name<pal::os_type::linux> = "linux";
template <> const char *os_name<pal::os_type::macos> = "macos";
template <> const char *os_name<pal::os_type::windows> = "windows";

TEMPLATE_TEST_CASE("crypto/sign", "",
	(with<pkcs1,sha1>),
	(with<pkcs1,sha256>),
	(with<pkcs1,sha384>),
	(with<pkcs1,sha512>),
	(with<pss,sha1>),
	(with<pss,sha256>),
	(with<pss,sha384>),
	(with<pss,sha512>))
{
	auto &provider = TestType::provider();

	signature_type signature;
	auto signature_span = provider.sign(TestType::message_digest, signature).value();
	REQUIRE(signature_span.data() == reinterpret_cast<const std::byte *>(signature.data()));
	REQUIRE(signature_span.size() == signature.size());

	constexpr bool precalculate_signature = false;
	if constexpr (precalculate_signature)
	{
		printf("template <> constexpr signature_type precalculated_signature<pal::os_type::%s, %s> =\n{",
			os_name<pal::os>,
			pal_test::case_name().erase(0, sizeof("crypto/sign -")).c_str()
		);
		for (auto i = 0u; auto b: signature)
		{
			if (i++ % 16 == 0)
			{
				printf("\n\t");
			}
			printf("0x%02x, ", (uint32_t)b);
		}
		printf("\n};\n");

		SKIP();
	}

	auto &verifier = TestType::verifier();

	SECTION("verify")
	{
		CHECK(verifier.is_valid(TestType::message_digest, signature));

		SECTION("invalid message size")
		{
			auto message_digest = std::span{TestType::message_digest}.first(10);
			CHECK_FALSE(verifier.is_valid(message_digest, signature));
		}

		SECTION("invalid message")
		{
			auto message_digest = TestType::message_digest;
			message_digest[0] ^= 1;
			CHECK_FALSE(verifier.is_valid(message_digest, signature));
		}

		SECTION("invalid signature size")
		{
			CHECK_FALSE(verifier.is_valid(TestType::message_digest, signature_span.first(10)));
		}

		SECTION("invalid signature")
		{
			signature[0] ^= 1;
			CHECK_FALSE(verifier.is_valid(TestType::message_digest, signature));
		}
	}

	SECTION("cross-platform")
	{
		static constexpr auto &linux = precalculated_signature<pal::os_type::linux, TestType>;
		static constexpr auto &macos = precalculated_signature<pal::os_type::macos, TestType>;
		static constexpr auto &windows = precalculated_signature<pal::os_type::windows, TestType>;

		static constexpr auto is_deterministic = true
			&& linux == macos
			&& macos == windows
			&& windows == linux
		;

		const auto &[os, precalculated] = GENERATE(table<std::string_view, signature_type>
		({
			{ os_name<pal::os_type::linux>, linux },
			{ os_name<pal::os_type::macos>, macos },
			{ os_name<pal::os_type::windows>, windows },
		}));
		CAPTURE(os);

		REQUIRE(verifier.is_valid(TestType::message_digest, precalculated));

		auto is_equal = signature == precalculated;
		CHECK(is_equal == is_deterministic);
	}

	SECTION("sign: no buffer space")
	{
		char tiny_buffer[1];
		auto result = provider.sign(TestType::message_digest, tiny_buffer);
		REQUIRE_FALSE(result);
		CHECK(result.error() == std::errc::no_buffer_space);
	}

	SECTION("provider/public_key: not supported")
	{
		auto tmp = TestType::provider_type::make(public_key());
		REQUIRE_FALSE(tmp);
		CHECK(tmp.error() == std::errc::not_supported);
	}

	SECTION("verifier/private_key: not supported")
	{
		auto tmp = TestType::verifier_type::make(private_key());
		REQUIRE_FALSE(tmp);
		CHECK(tmp.error() == std::errc::not_supported);
	}

	SECTION("provider: not enough memory")
	{
		pal_test::bad_alloc_once x;
		auto tmp = TestType::provider_type::make(private_key());
		REQUIRE_FALSE(tmp);
		CHECK(tmp.error() == std::errc::not_enough_memory);
	}

	SECTION("verifier: not enough memory")
	{
		pal_test::bad_alloc_once x;
		auto tmp = TestType::verifier_type::make(public_key());
		REQUIRE_FALSE(tmp);
		CHECK(tmp.error() == std::errc::not_enough_memory);
	}
}

TEST_CASE("crypto/sign")
{
	SECTION("provider: invalid padding")
	{
		auto provider = pal::crypto::signature_provider<sha1, sha1>::make(private_key());
		REQUIRE_FALSE(provider);
		CHECK(provider.error() == std::errc::not_supported);
	}

	SECTION("verifier: invalid padding")
	{
		auto verifier = pal::crypto::signature_verifier<sha1, sha1>::make(public_key());
		REQUIRE_FALSE(verifier);
		CHECK(verifier.error() == std::errc::not_supported);
	}

	SECTION("provider: invalid digest")
	{
		auto provider = pal::crypto::signature_provider<pkcs1, pkcs1>::make(private_key());
		REQUIRE_FALSE(provider);
		CHECK(provider.error() == std::errc::not_supported);
	}

	SECTION("verifier: invalid digest")
	{
		auto verifier = pal::crypto::signature_verifier<pkcs1, pkcs1>::make(public_key());
		REQUIRE_FALSE(verifier);
		CHECK(verifier.error() == std::errc::not_supported);
	}
}

} // namespace
