#pragma once // -*- C++ -*-

/**
 * \file pal/crypto/certificate
 * Public key certificate in X509 format.
 *
 * \see https://en.wikipedia.org/wiki/Public_key_certificate
 */

#include <pal/__bits/lib>
#include <pal/crypto/__bits/x509>
#include <pal/crypto/error>
#include <pal/crypto/hash>
#include <pal/crypto/key>
#include <pal/crypto/oid>
#include <chrono>
#include <deque>
#include <span>
#include <string>
#include <string_view>
#include <tuple>


__pal_begin


namespace crypto {


/**
 * OID and corresponding value pair.
 */
using oid_value_pair = std::tuple<std::string, std::string>;


/**
 * Alternative name type
 */
enum class alt_name
{
	dns,    ///< DNS name
	ip,     ///< IP address
	uri,    ///< URI
	email,  ///< Email address
};


/**
 * Alternative name type and corresponding value pair.
 */
using alt_name_value_pair = std::tuple<alt_name, std::string>;


/**
 * Wrapper for platform's native public key certificate.
 *
 * Platforms use following native implementations:
 * - MacOS: Security framework with SecCertificateRef
 * - Linux: OpenSSL with X509
 * - Windows: WinCrypt with PCCERT_CONTEXT
 *
 * \note Invoking any method except swap/is_null on certificate for which
 * method is_null returns true is undefined behaviour.
 */
class certificate
{
public:

	/// Clock type for certificate time functions
	using clock_type = std::chrono::system_clock;

	/// Timestamp type for certificate time functions
	using time_type = clock_type::time_point;

	/// Distinguished name.
	using name_type = std::deque<oid_value_pair>;

	/// Alternative name.
	using alt_name_type = std::deque<alt_name_value_pair>;


	/**
	 * Construct new empty certificate reference.
	 */
	certificate () noexcept = default;


	/**
	 * Copy certificate reference (increases reference count).
	 */
	certificate (const certificate &) noexcept = default;


	/**
	 * Construct new certificate reference from other, resetting other
	 * instance.
	 */
	certificate (certificate &&) noexcept = default;


	/**
	 * Assign \a this from other, increasing native handle reference count.
	 */
	certificate &operator= (const certificate &) = default;


	/**
	 * Assign \a this from other, resetting other instance.
	 */
	certificate &operator= (certificate &&) = default;


	/**
	 * Swap \a this certificate handle with \a that.
	 */
	void swap (certificate &that) noexcept
	{
		impl_.swap(that.impl_);
	}


	/**
	 * Returns true if \a this certificate represents unspecified
	 * certificate.
	 */
	bool is_null () const noexcept
	{
		return impl_.is_null();
	}


	/**
	 * Returns true if \a this is valid certificate.
	 */
	explicit operator bool () const noexcept
	{
		return !is_null();
	}


	/**
	 * Returns X509 structure version (1 for v1, 3 for v3).
	 */
	int version () const noexcept;


	/**
	 * Returns absolute time since when \a this certificate is valid.
	 */
	time_type not_before () const noexcept;


	/**
	 * Returns absolute time until \a this certificate is valid.
	 */
	time_type not_after () const noexcept;


	/**
	 * Return true if \a this is not expired at \a time.
	 */
	bool not_expired_at (const time_type &time) const noexcept
	{
		return not_before() <= time && time <= not_after();
	}


	/**
	 * Return true if \a this does not expire at least for \a period at
	 * \a time (defaults to now).
	 */
	template <typename Rep, typename Period>
	bool not_expired_for (
		const std::chrono::duration<Rep, Period> &period,
		const time_type &time = clock_type::now()) const noexcept
	{
		return not_before() <= time && time + period <= not_after();
	}


	/**
	 * Calculate and return hash of DER representation of \a this
	 * certificate.
	 */
	template <typename Algorithm>
	typename basic_hash<Algorithm>::result_type digest () const noexcept
	{
		using hash_type = basic_hash<Algorithm>;
		using result_type = typename hash_type::result_type;
		result_type result{};
		digest(result.data(),
			[](auto *result, const auto &der) noexcept
			{
				*reinterpret_cast<result_type *>(result) = hash_type::one_shot(der);
			}
		);
		return result;
	}


	/**
	 * Store serial number of \a this certificate into \a dest.
	 *
	 * \returns span of actually stored data.
	 */
	result<std::span<uint8_t>> serial_number (std::span<uint8_t> dest) const noexcept;


	/**
	 * Store authority key identifier of \a this certificate into \a dest.
	 *
	 * \returns span of actually stored data.
	 */
	result<std::span<uint8_t>> authority_key_identifier (std::span<uint8_t> dest) const noexcept;


	/**
	 * Store subject key identifier of \a this certificate into \a dest.
	 *
	 * \returns span of actually stored data.
	 */
	result<std::span<uint8_t>> subject_key_identifier (std::span<uint8_t> dest) const noexcept;


	/**
	 * Returns true if \a this certificate is issued by \a that
	 * certificate.
	 */
	bool issued_by (const certificate &that) const noexcept;


	/**
	 * Returns true if \a this certificate is self-signed.
	 */
	bool is_self_signed () const noexcept
	{
		return issued_by(*this);
	}


	/**
	 * Returns complete issuer distinguished name.
	 */
	name_type issuer () const;


	/**
	 * Returns issuer distinguished name for \a oid. If there is no such
	 * \a oid returns default-constructed value.
	 */
	name_type issuer (const std::string_view &oid) const;


	/**
	 * Returns complete certificate distinguished name.
	 */
	name_type subject () const;


	/**
	 * Returns certificate distinguished name for \a oid.
	 */
	name_type subject (const std::string_view &oid) const;


	/**
	 * Return issuer alternative name as list of pairs of name type and
	 * corresponding textual values.
	 */
	alt_name_type issuer_alt_name () const;


	/**
	 * Return subject alternative name as list of pairs of name type and
	 * corresponding textual values.
	 */
	alt_name_type subject_alt_name () const;


	/**
	 * Return true if \a this represents same certificate as \a that.
	 */
	bool operator== (const certificate &that) const noexcept;


	/**
	 * Return true if \a this represents different certificate as \a that.
	 */
	bool operator!= (const certificate &that) const noexcept
	{
		return !operator==(that);
	}


	/**
	 * Return certificate's public key.
	 */
	crypto::public_key public_key () const noexcept;


	/**
	 * Load and construct new certificate from DER encoded \a span.
	 */
	template <typename Data>
	static result<certificate> from_der (const Data &data) noexcept
	{
		if (auto cert = load_der(std::as_bytes(std::span{data})))
		{
			return certificate{std::move(cert)};
		}
		return pal::make_unexpected(std::errc::invalid_argument);
	}


	/**
	 * Load and construct new certificate from \a pem (if there are
	 * multiple, only first is extracted).
	 */
	static result<certificate> from_pem (const std::string_view &pem) noexcept;


	/**
	 * Import and return all certificates from PKCS12 formatted \a blob.
	 * Private key corresponding to leaf certificate is extracted using \a
	 * passphrase and assigned to \a key if not nullptr.
	 *
	 * Returned certificates collection is ordered by issuer i.e. start with
	 * leaf and end with root (self signed issuer). If there are unrelated
	 * certificates imported, their order is not defined.
	 *
	 * On failure empty collection is returned.
	 *
	 * \note Upon returning, clear \a passphrase from memory.
	 */
	template <typename T, size_t Extent>
	static std::deque<certificate> import_pkcs12 (
		const std::span<T, Extent> &blob,
		const std::string_view &passphrase,
		private_key *key = nullptr)
	{
		return load_pkcs12(std::as_bytes(blob), passphrase, key);
	}


	/**
	 * Load and return all certificates from system store that satisfy
	 * \a predicate. If no such certificates, returns empty collection.
	 *
	 * Order of iterating over certificates depends on platform:
	 *   - Linux: uses OpenSSL system-wide CA bundle. Location of it depends on
	 *     distro (see https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/).
	 *     This function tries multiple files until first succeeds, which is
	 *     then iterated:
	 *     1. CA bundle file pointed by environment variable name as defined by
	 *        X509_get_default_cert_file_env()
	 *     2. OpenSSL default file as defined by X509_get_default_cert_file()
	 *     3. /etc/pki/tls/certs/ca-bundle.crt
	 *     4. /etc/ssl/certs/ca-certificates.crt
	 *   - MacOS: trusted certificates in Login and System keychains.
	 *   - Windows: system's certificate stores MY, Root, Trust and CA
	 */
	template <typename Predicate>
	static std::deque<certificate> load_all (Predicate predicate)
	{
		std::deque<certificate> result;
		__bits::x509_store_loop sys_cert_store;
		while (auto c = certificate{sys_cert_store.next()})
		{
			if (predicate(c))
			{
				result.emplace_back(std::move(c));
			}
		}
		return result;
	}


	/**
	 * Load first certificate from system store that satisfies \a
	 * predicate. If no such certificate, returns
	 * std::errc::no_such_file_or_directory
	 *
	 * \copydetails load_all()
	 */
	template <typename Predicate>
	static result<certificate> load_one (Predicate predicate) noexcept
	{
		__bits::x509_store_loop sys_cert_store;
		while (auto c = certificate{sys_cert_store.next()})
		{
			if (predicate(c))
			{
				return c;
			}
		}
		return pal::make_unexpected(std::errc::no_such_file_or_directory);
	}


private:

	__bits::x509 impl_{};

	certificate (__bits::x509 &&that) noexcept
		: impl_{std::forward<__bits::x509>(that)}
	{ }

	static __bits::x509 load_der (
		const std::span<const std::byte> &der
	) noexcept;

	static std::deque<certificate> load_pkcs12 (
		const std::span<const std::byte> &blob,
		const std::string_view &passphrase,
		private_key *key
	);

	using hash_fn = void(*)(std::byte *, const std::span<const std::byte> &) noexcept;
	void digest (std::byte *result, hash_fn h) const noexcept;
};


/**
 * Return predicate for certificate loading functions. It checks whether
 * specified certificate has \a expected common name.
 */
inline auto with_common_name (std::string expected)
{
	return [=](const certificate &cert) -> bool
	{
		auto subject = cert.subject(oid::common_name);
		return !subject.empty() && std::get<1>(subject.front()) == expected;
	};
}


/**
 * \copybrief with_common_name()
 *
 * It checks whether specified certificate has DNS subject alternate name with
 * exact or wildcard match for \a expected.
 */
inline auto with_fqdn (std::string expected)
{
	return [=](const certificate &cert) -> bool
	{
		for (auto &[type, value]: cert.subject_alt_name())
		{
			if (type == alt_name::dns)
			{
				std::string_view fqdn = value, match = expected;
				if (fqdn.starts_with("*."))
				{
					auto first_segment = match.find('.');
					if (first_segment == match.npos)
					{
						continue;
					}
					match.remove_prefix(first_segment + 1);
					fqdn.remove_prefix(2);
				}
				if (fqdn == match)
				{
					return true;
				}
			}
		}
		return false;
	};
}


/**
 * \copybrief with_common_name()
 *
 * It checks whether specified certificate has \a expected digest calculated
 * by \a Algorithm.
 */
template <typename Algorithm>
inline auto with_thumbprint (typename basic_hash<Algorithm>::result_type expected)
{
	return [=](const certificate &cert) -> bool
	{
		return cert.digest<Algorithm>() == expected;
	};
}


} // namespace crypto


__pal_end
