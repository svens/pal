#pragma once // -*- C++ -*-

#include <pal/test>
#include <pal/conv>
#include <algorithm>
#include <string>

namespace pal_test {

template <typename Data>
std::string to_hex (const Data &data)
{
	std::string result;
	for (auto &b: data)
	{
		char buf[3];
		snprintf(buf, sizeof(buf), "%02x", static_cast<uint32_t>(b));
		result += buf;
	}
	return result;
}

inline std::string to_der (std::string_view pem)
{
	static constexpr std::string_view prefix = "-----BEGIN CERTIFICATE-----\n";
	if (pem.starts_with(prefix))
	{
		pem.remove_prefix(prefix.size());
	}

	static constexpr std::string_view suffix = "\n-----END CERTIFICATE-----\n";
	if (pem.ends_with(suffix))
	{
		pem.remove_suffix(suffix.size());
	}

	std::string data(pem);
	auto it = std::remove_if(data.begin(), data.end(), [](auto ch) { return std::isspace(ch); });
	data.resize(it - data.begin());

	std::string result(pal::decode_size<pal::base64>(data), '\0');
	auto last_out = pal::decode<pal::base64>(data, result.data());
	result.resize(last_out - result.data());

	return result;
}

namespace cert {

// see scripts/certificate-generate/make_ca.sh

struct info
{
	int version;
	std::string_view common_name;
	std::string_view subject_name;
	std::string_view subject_alternative_name;
	std::string_view issuer_name;
	std::string_view issuer_alternative_name;
	std::string_view serial_number;
	std::string_view fingerprint;
	size_t size_bits;
	size_t max_block_size;
	std::string_view pem;
}
constexpr data[] =
{
	{ // authority {{{1
		.version = 3,
		.common_name =
			"PAL Root CA",
		.subject_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Root CA\n",
		.subject_alternative_name =
			"",
		.issuer_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Root CA\n",
		.issuer_alternative_name =
			"",
		.serial_number =
			"15c3e866f072776aafa8c4a901d98d0437401143",
		.fingerprint =
			"9142bc1722c89d86772a3ec2145c1587adddc7ff",
		.size_bits = 4096,
		.max_block_size = 512,
		.pem =
			"-----BEGIN CERTIFICATE-----\n"
			"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\n"
			"-----END CERTIFICATE-----\n"
	},
	{ // intermediate {{{1
		.version = 3,
		.common_name =
			"PAL Intermediate CA",
		.subject_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Intermediate CA\n",
		.subject_alternative_name =
			"",
		.issuer_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Root CA\n",
		.issuer_alternative_name =
			"",
		.serial_number =
			"1000",
		.fingerprint =
			"fc8d8a72cc89dcfd66f2f9496cd4825b50a31902",
		.size_bits = 4096,
		.max_block_size = 512,
		.pem =
			"-----BEGIN CERTIFICATE-----\n"
			"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\n"
			"-----END CERTIFICATE-----\n"
	},
	{ // server {{{1
		.version = 3,
		.common_name =
			"pal.alt.ee",
		.subject_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL Test\n"
			"CN=pal.alt.ee\n",
		.subject_alternative_name =
			"ip=1.2.3.4\n"
			"ip=2001:db8:85a3::8a2e:370:7334\n"
			"dns=*.pal.alt.ee\n"
			"dns=server.pal.alt.ee\n"
			"email=pal@alt.ee\n"
			"uri=https://pal.alt.ee/path\n",
		.issuer_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Intermediate CA\n",
		.issuer_alternative_name =
			"dns=ca.pal.alt.ee\n"
			"uri=https://ca.pal.alt.ee/path\n",
		.serial_number =
			"1001",
		.fingerprint =
			"815020f9709463abab79e2073b702897c0677c02",
		.size_bits = 2048,
		.max_block_size = 256,
		.pem =
			"-----BEGIN CERTIFICATE-----\n"
			"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\n"
			"48+Egt3Fq9C/7nhuSbtAAOkm4ihcjV8=\n"
			"-----END CERTIFICATE-----\n"
	},
	{ // client {{{1
		.version = 3,
		.common_name =
			"pal.alt.ee",
		.subject_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL Test\n"
			"CN=pal.alt.ee\n"
			"1.2.840.113549.1.9.1=pal@alt.ee\n",
		.subject_alternative_name =
			"email=pal@alt.ee\n"
			"dns=client.pal.alt.ee\n",
		.issuer_name =
			"C=EE\n"
			"ST=Estonia\n"
			"O=PAL\n"
			"OU=PAL CA\n"
			"CN=PAL Intermediate CA\n",
		.issuer_alternative_name =
			"",
		.serial_number =
			"1002",
		.fingerprint =
			"9e34f12d33377eab3a9c7b0a4965e376394c1b40",
		.size_bits = 2048,
		.max_block_size = 256,
		.pem =
			"-----BEGIN CERTIFICATE-----\n"
			"MIIFAzCCAuugAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwXDELMAkGA1UEBhMCRUUx\n"
			"EDAOBgNVBAgMB0VzdG9uaWExDDAKBgNVBAoMA1BBTDEPMA0GA1UECwwGUEFMIENB\n"
			"MRwwGgYDVQQDDBNQQUwgSW50ZXJtZWRpYXRlIENBMB4XDTI0MDkyMDEwMzgyNFoX\n"
			"DTQ0MDkxNTEwMzgyNFowcDELMAkGA1UEBhMCRUUxEDAOBgNVBAgMB0VzdG9uaWEx\n"
			"DDAKBgNVBAoMA1BBTDERMA8GA1UECwwIUEFMIFRlc3QxEzARBgNVBAMMCnBhbC5h\n"
			"bHQuZWUxGTAXBgkqhkiG9w0BCQEWCnBhbEBhbHQuZWUwggEiMA0GCSqGSIb3DQEB\n"
			"AQUAA4IBDwAwggEKAoIBAQCSDTgpOyA+Nxao5cYlpizGeruynjzmqIaIvk1VuqjA\n"
			"mvruW+094pQQdy4zbTrltaH4oVpp4PlLjtlqCiPoTooLIIC1WPvfKdnr7ioIsS40\n"
			"zXjyFItoBLlkkFxO2l4oi5j6IgjAsYfjaqB1/OLYYou/UzJcCcb6AzM+b/auKJx3\n"
			"ll9jGV5TgvzhvCdisG9lHwDa9eJN2aLbIItELoaKej2DoA8Q1IrAGiUEG/qbMtrP\n"
			"UJOVV6Dx7lMu7lRbHJwT4CQXI2OqOOyAiyq4qr44iyqWu31Nj+eWNZgClzZQQrRh\n"
			"aYHtqbQ5RHl3JYasOcTjv+zoZBQ5lTd/1v6sWNU8Y3tlAgMBAAGjgbowgbcwCQYD\n"
			"VR0TBAIwADARBglghkgBhvhCAQEEBAMCBaAwHQYDVR0OBBYEFAxwDjSJYz1SVjsD\n"
			"Qs96dX3jtRtGMCgGA1UdEQQhMB+BCnBhbEBhbHQuZWWCEWNsaWVudC5wYWwuYWx0\n"
			"LmVlMB8GA1UdIwQYMBaAFOzWLzA8fsZaN5afGyrpn8ZWRrM3MA4GA1UdDwEB/wQE\n"
			"AwIF4DAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwDQYJKoZIhvcNAQEL\n"
			"BQADggIBAHn8AJ5aK+rzIosTDvmLb5PDsVVbE23zcuM1IMd35I5PaoZkipNQooQK\n"
			"k9uawBEdper4iKpj5UdS+ttqkLgE6d256qupcoOEKUpO+Neql0WmgJMpLpv++MPU\n"
			"CUeeQpYxixAQcnA07IEO3XvjDuPMhwhvbWQacNPjXU2kXeRrOm3OF3gACcqLu6SE\n"
			"ieENbi7yVB4wA262aAVQVh1iDAAdnwvogiCb2z2R57SqinTZCi0iy1QYtK98t82I\n"
			"4mRK6UDpbHRLYjdV+1CwblnGBKYynHo6EC96sSsoY85GeJwbXtsqkFZMpgPSeh/b\n"
			"FrPBbK0ewcbnrRPrqNUwjlyh/D/Uhty41mK5TZwO9JWIHrlKpRBdX6DKtRwzf+ft\n"
			"6Q7XS8zXURVZGPExVqSAWsDFA6TAQDPoO6e/SGexx+crQoj85Wt6R2xw9Cj2M8rT\n"
			"rLkJ5QDD7ChIB2my/jCR9lREcisyuOhSfpZRQNf+7YHf0Pomj33qUCPzM5Zx9ykN\n"
			"bMsi+x2sPgn1zAM+hupK12cVf/IWr4jUjCp59dsOn1h3TWu5ESSDNXeyJtStkPxk\n"
			"/J87mzmK2ixs4GCt+EKu1Zcx6SLkWfQyB8Dlv4EmNBgwXm9j/7Glgpll23774zll\n"
			"Ac3zIsapnxtBCha7X+hRqlFp3sn2eQbQxbo4r6qzgMyEGEQSVNHr\n"
			"-----END CERTIFICATE-----\n"
	},
	{ // self-signed {{{1
		// Certificate to test special cases:
		// - no authority/subject key identifier v3 extensions
		// - date with 4 digits in year
		//
		// New-SelfSignedCertificate -Subject 'CN=Test' -SuppressOid '2.5.29.14' -NotAfter (Get-Date).AddYears(100)
		.version = 3,
		.common_name =
			"Test",
		.subject_name =
			"CN=Test\n",
		.subject_alternative_name =
			"",
		.issuer_name =
			"CN=Test\n",
		.issuer_alternative_name =
			"",
		.serial_number =
			"5feebd7481e6029946cfc05cd0b6c645",
		.fingerprint =
			"f7c05805853defda0f8e3376c4e70d4f09f5060e",
		.size_bits = 2048,
		.max_block_size = 256,
		.pem =
			"-----BEGIN CERTIFICATE-----\n"
			"MIIC2zCCAcOgAwIBAgIQX+69dIHmAplGz8Bc0LbGRTANBgkqhkiG9w0BAQsFADAP\n"
			"MQ0wCwYDVQQDDARUZXN0MCAXDTE5MDIyODEwNDkxNVoYDzIxMTkwMjI4MTA1OTE1\n"
			"WjAPMQ0wCwYDVQQDDARUZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\n"
			"AQEAm9aGu6TTrXfsx8jBEYCTJ9+I3McWWa1snkKKKXHKMiCo/BYkAIpQBj4/c/vJ\n"
			"QP89cbujojLxpQqjUC7z6PjZqbULO2JTzWdgc6nwjGOW0GSp2+ZDFSi15JnevHy+\n"
			"eAlN++L3d3F6VEYf9Cb6M0LoA9bRC2DBKIl3WvKIMLHo3/+BhYtgLLCbguEzVgBB\n"
			"btihm3jqzX4b7yNOkVDASzOTMd8n7S+DalO6UWJwGUeiEovrYYmujlQ87XWTBDWY\n"
			"S4Cns6/zhdu/aHHvYQBcoYasroXRewBzH7GWxCkCrny9sDo2oFZMnM2BflaDrNAG\n"
			"h4ovhL3bqYJYwg42rbuCN0JovQIDAQABozEwLzAOBgNVHQ8BAf8EBAMCBaAwHQYD\n"
			"VR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMA0GCSqGSIb3DQEBCwUAA4IBAQAX\n"
			"9x0Cermd6lEkGPgUQlA6oIQ6FGAIPZwkLQr/sEC4EV4XJY7EQq4D/I/SIdbC8zz8\n"
			"DMQOWTBP5/cFGbIe6SvQWf/Z6ld40uGnVL0G/sYFpsnVRYEJGwXpPZOjJOOG3Qy6\n"
			"TVYy0h+Tt4JIKYQBe3oNZ351eHU3YMBvOvUnKyl0JqTui0wa6Qe/J7NZ5uRgiXzv\n"
			"LPBNbT7fgDDltSdcFDT0VCPQtO8oUKUh/8Eql0O/KugZcu2MLxEpJZg/uZlf7YnB\n"
			"TrAnm+CEeWakddDTgexT82zUXx4J2yrI3QTSX/Zp+yQJk66/Qo0hL6NN9/JbC0JN\n"
			"imY5E1DpVFaB+++/6i1c\n"
			"-----END CERTIFICATE-----\n"
	},
	//}}}1
};

constexpr inline auto &ca = data[0];
constexpr inline auto &intermediate = data[1];
constexpr inline auto &server = data[2];
constexpr inline auto &client = data[3];
constexpr inline auto &self_signed = data[4];

#include <pal/crypto/test.pkcs12_protected.ipp>
#include <pal/crypto/test.pkcs12_unprotected.ipp>

} // namespace cert

} // namespace pal_test
